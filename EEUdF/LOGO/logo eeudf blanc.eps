%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: logo eeudf blanc.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Sandrine Galia
%%CreationDate: 7/24/14
%%BoundingBox: 0 0 240 337
%%HiResBoundingBox: 0 0 239.6500 336.6329
%%CropBox: 0 0 239.6500 336.6329
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x409 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 92 128 8%%BeginData: 1888 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFF%FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFF%FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFF%FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFF%FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDB7FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">CMJN de base</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2014-07-03T10:51:44+02:00</xap:CreateDate>
         <xap:ModifyDate>2014-07-24T15:00:51+02:00</xap:ModifyDate>
         <xap:MetadataDate>2014-07-24T15:00:51+02:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>184</xapGImg:width>
                  <xapGImg:height>256</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAC4AwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX//&#xA;2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:8715013F2E04E41198B3D169F00DE2F1</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:88EFB3F1D214E411A6E0DF66913F42AE</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:8615013F2E04E41198B3D169F00DE2F1</stRef:instanceID>
            <stRef:documentID>uuid:8515013F2E04E41198B3D169F00DE2F1</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Basic CMYK</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>104.999997</stDim:w>
            <stDim:h>144.999989</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Groupe de nuances par défaut</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Blanc</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Noir</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>100.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Rouge CMJN</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Jaune CMJN</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Vert CMJN</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Cyan CMJN</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Bleu CMJN</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Magenta CMJN</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=15 M=100 J=90 N=10</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>14.999998</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>90.000000</xapG:yellow>
                           <xapG:black>10.000002</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=90 J=85 N=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>90.000000</xapG:magenta>
                           <xapG:yellow>85.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=80 J=95 N=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>80.000000</xapG:magenta>
                           <xapG:yellow>95.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=50 J=100 N=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=35 J=85 N=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>35.000004</xapG:magenta>
                           <xapG:yellow>85.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=5 M=0 J=90 N=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>5.000001</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>90.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=20 M=0 J=100 N=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>19.999998</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=0 J=100 N=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=75 M=0 J=100 N=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>75.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=85 M=10 J=100 N=10</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>85.000000</xapG:cyan>
                           <xapG:magenta>10.000002</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>10.000002</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=90 M=30 J=95 N=30</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>90.000000</xapG:cyan>
                           <xapG:magenta>30.000002</xapG:magenta>
                           <xapG:yellow>95.000000</xapG:yellow>
                           <xapG:black>30.000002</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=75 M=0 J=75 N=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>75.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>75.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=80 M=10 J=45 N=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>80.000000</xapG:cyan>
                           <xapG:magenta>10.000002</xapG:magenta>
                           <xapG:yellow>45.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=70 M=15 J=0 N=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>70.000000</xapG:cyan>
                           <xapG:magenta>14.999998</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=85 M=50 J=0 N=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>85.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=100 M=95 J=5 N=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>95.000000</xapG:magenta>
                           <xapG:yellow>5.000001</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=100 M=100 J=25 N=25</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>25.000000</xapG:yellow>
                           <xapG:black>25.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=75 M=100 J=0 N=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>75.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=100 J=0 N=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=35 M=100 J=35 N=10</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>35.000004</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>35.000004</xapG:yellow>
                           <xapG:black>10.000002</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=10 M=100 J=50 N=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>10.000002</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>50.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=95 J=20 N=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>95.000000</xapG:magenta>
                           <xapG:yellow>19.999998</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=25 M=25 J=40 N=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>25.000000</xapG:cyan>
                           <xapG:magenta>25.000000</xapG:magenta>
                           <xapG:yellow>39.999996</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=40 M=45 J=50 N=5</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>39.999996</xapG:cyan>
                           <xapG:magenta>45.000000</xapG:magenta>
                           <xapG:yellow>50.000000</xapG:yellow>
                           <xapG:black>5.000001</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=50 J=60 N=25</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>60.000004</xapG:yellow>
                           <xapG:black>25.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=55 M=60 J=65 N=40</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>55.000000</xapG:cyan>
                           <xapG:magenta>60.000004</xapG:magenta>
                           <xapG:yellow>65.000000</xapG:yellow>
                           <xapG:black>39.999996</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=25 M=40 J=65 N=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>25.000000</xapG:cyan>
                           <xapG:magenta>39.999996</xapG:magenta>
                           <xapG:yellow>65.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=30 M=50 J=75 N=10</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>30.000002</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>75.000000</xapG:yellow>
                           <xapG:black>10.000002</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=35 M=60 J=80 N=25</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>35.000004</xapG:cyan>
                           <xapG:magenta>60.000004</xapG:magenta>
                           <xapG:yellow>80.000000</xapG:yellow>
                           <xapG:black>25.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=40 M=65 J=90 N=35</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>39.999996</xapG:cyan>
                           <xapG:magenta>65.000000</xapG:magenta>
                           <xapG:yellow>90.000000</xapG:yellow>
                           <xapG:black>35.000004</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=40 M=70 J=100 N=50</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>39.999996</xapG:cyan>
                           <xapG:magenta>70.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>50.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=70 J=80 N=70</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>70.000000</xapG:magenta>
                           <xapG:yellow>80.000000</xapG:yellow>
                           <xapG:black>70.000000</xapG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Niveaux de gris</xapG:groupName>
                  <xapG:groupType>1</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>N=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>N=90</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>229</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>N=80</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>203</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>N=70</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>178</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>N=60</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>152</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>N=50</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>127</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>N=40</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>101</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>N=30</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>76</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>N=20</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>50</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>N=10</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>25</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>N=5</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>12</xapG:gray>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -336.633 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 336.633 li
239.65 336.633 li
239.65 0 li
cp
clp
[1 0 0 1 0 0 ]ct
18.9834 251.672 mo
19.5156 251.672 19.9697 251.859 20.3447 252.234 cv
20.7197 252.609 20.9072 253.063 20.9072 253.596 cv
20.9072 254.128 20.7197 254.582 20.3447 254.957 cv
19.9697 255.332 19.5156 255.52 18.9834 255.52 cv
2.19531 255.52 li
1.91699 255.52 1.66309 255.472 1.43359 255.374 cv
1.20313 255.277 1.00098 255.142 0.825195 254.966 cv
0.650391 254.791 0.513672 254.588 0.416992 254.358 cv
0.320313 254.128 0.271484 253.874 0.271484 253.596 cv
0.271484 228.405 li
0.271484 228.139 0.320313 227.888 0.416992 227.652 cv
0.513672 227.416 0.650391 227.21 0.825195 227.035 cv
1.00098 226.859 1.20313 226.724 1.43359 226.626 cv
1.66309 226.529 1.91699 226.481 2.19531 226.481 cv
18.9834 226.481 li
19.5156 226.481 19.9697 226.669 20.3447 227.044 cv
20.7197 227.419 20.9072 227.873 20.9072 228.405 cv
20.9072 228.938 20.7197 229.392 20.3447 229.767 cv
19.9697 230.142 19.5156 230.329 18.9834 230.329 cv
4.11914 230.329 li
4.11914 239.076 li
14.791 239.076 li
15.3232 239.076 15.7773 239.265 16.1523 239.64 cv
16.5273 240.015 16.7148 240.468 16.7148 241 cv
16.7148 241.533 16.5273 241.986 16.1523 242.361 cv
15.7773 242.736 15.3232 242.924 14.791 242.924 cv
4.11914 242.924 li
4.11914 251.672 li
18.9834 251.672 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
38.5098 249.767 mo
39.0537 249.767 39.5049 249.945 39.8613 250.302 cv
40.2188 250.659 40.3975 251.109 40.3975 251.654 cv
40.3975 252.187 40.1973 252.652 39.7979 253.052 cv
37.9229 254.697 35.7148 255.52 33.1738 255.52 cv
30.3662 255.52 27.9707 254.527 25.9863 252.543 cv
24.002 250.559 23.0107 248.163 23.0107 245.356 cv
23.0107 242.549 24.002 240.153 25.9863 238.169 cv
27.9707 236.185 30.3662 235.192 33.1738 235.192 cv
35.7266 235.192 37.9346 236.016 39.7979 237.661 cv
40.2334 238.049 40.4512 238.526 40.4512 239.095 cv
40.4512 239.64 40.2725 240.093 39.916 240.456 cv
39.5586 240.819 39.1084 241 38.5645 241 cv
38.1045 241 37.6924 240.855 37.3301 240.564 cv
36.7129 240.045 36.0654 239.651 35.3877 239.385 cv
34.71 239.119 33.9727 238.986 33.1738 238.986 cv
32.29 238.986 31.4619 239.152 30.6875 239.485 cv
29.9131 239.818 29.2354 240.271 28.6543 240.846 cv
28.0742 241.421 27.6172 242.096 27.2842 242.87 cv
26.9512 243.645 26.7852 244.473 26.7852 245.356 cv
26.7852 246.239 26.9512 247.068 27.2842 247.843 cv
27.6172 248.617 28.0742 249.292 28.6543 249.866 cv
29.2354 250.441 29.9131 250.895 30.6875 251.228 cv
31.4619 251.561 32.29 251.727 33.1738 251.727 cv
33.9727 251.727 34.71 251.597 35.3877 251.336 cv
36.0654 251.076 36.7061 250.686 37.3115 250.166 cv
37.6504 249.911 38.0498 249.778 38.5098 249.767 cv
cp
f
43.8604 253.632 mo
43.8604 228.387 li
43.8604 227.854 44.0391 227.404 44.3955 227.035 cv
44.752 226.666 45.2031 226.481 45.748 226.481 cv
46.292 226.481 46.7432 226.666 47.0996 227.035 cv
47.457 227.404 47.6348 227.854 47.6348 228.387 cv
47.6348 251.727 li
48.5068 251.727 li
49.0264 251.727 49.4707 251.911 49.8408 252.28 cv
50.209 252.649 50.3936 253.1 50.3936 253.632 cv
50.3936 254.152 50.209 254.597 49.8408 254.966 cv
49.4707 255.335 49.0264 255.52 48.5068 255.52 cv
45.7295 255.52 li
45.209 255.52 44.7676 255.335 44.4043 254.966 cv
44.042 254.597 43.8604 254.152 43.8604 253.632 cv
cp
f
63.5859 238.986 mo
62.6904 238.986 61.8555 239.155 61.0811 239.494 cv
60.3066 239.833 59.6357 240.29 59.0674 240.864 cv
58.498 241.439 58.0479 242.113 57.7148 242.888 cv
57.3818 243.662 57.2158 244.485 57.2158 245.356 cv
57.2158 246.228 57.3818 247.05 57.7148 247.824 cv
58.0479 248.599 58.498 249.273 59.0674 249.848 cv
59.6357 250.423 60.3066 250.88 61.0811 251.218 cv
61.8555 251.557 62.6904 251.727 63.5859 251.727 cv
64.4688 251.727 65.2979 251.557 66.0723 251.218 cv
66.8467 250.88 67.5215 250.42 68.0957 249.839 cv
68.6709 249.258 69.124 248.584 69.457 247.815 cv
69.79 247.047 69.9561 246.228 69.9561 245.356 cv
69.9561 244.485 69.79 243.665 69.457 242.896 cv
69.124 242.129 68.6709 241.454 68.0957 240.873 cv
67.5215 240.293 66.8467 239.833 66.0723 239.494 cv
65.2979 239.155 64.4688 238.986 63.5859 238.986 cv
cp
69.9561 253.632 mo
69.9561 253.27 li
69.0488 253.995 68.0625 254.552 66.998 254.938 cv
65.9336 255.326 64.7959 255.52 63.5859 255.52 cv
60.7793 255.52 58.3828 254.527 56.3994 252.543 cv
54.415 250.559 53.4229 248.163 53.4229 245.356 cv
53.4229 242.549 54.415 240.153 56.3994 238.169 cv
58.3828 236.185 60.7793 235.192 63.5859 235.192 cv
66.3691 235.192 68.7646 236.185 70.7734 238.169 cv
72.7568 240.153 73.749 242.549 73.749 245.356 cv
73.749 253.632 li
73.749 254.152 73.5645 254.597 73.1963 254.966 cv
72.8262 255.335 72.3818 255.52 71.8623 255.52 cv
71.3291 255.52 70.8789 255.335 70.5098 254.966 cv
70.1406 254.597 69.9561 254.152 69.9561 253.632 cv
cp
f
78.3379 253.614 mo
78.3379 237.099 li
78.3379 236.566 78.5225 236.115 78.8916 235.746 cv
79.2607 235.377 79.7051 235.192 80.2256 235.192 cv
80.7461 235.192 81.1904 235.377 81.5596 235.746 cv
81.9287 236.115 82.1191 236.566 82.1318 237.099 cv
82.1318 253.614 li
82.1191 254.146 81.9287 254.597 81.5596 254.966 cv
81.1904 255.335 80.7461 255.52 80.2256 255.52 cv
79.7051 255.52 79.2607 255.335 78.8916 254.966 cv
78.5225 254.597 78.3379 254.146 78.3379 253.614 cv
cp
82.458 231.581 mo
82.458 232.198 82.2402 232.725 81.8047 233.16 cv
81.3691 233.596 80.8428 233.813 80.2256 233.813 cv
79.6084 233.813 79.082 233.596 78.6465 233.16 cv
78.2109 232.725 77.9932 232.198 77.9932 231.581 cv
77.9932 230.964 78.2109 230.438 78.6465 230.002 cv
79.082 229.566 79.6084 229.349 80.2256 229.349 cv
80.8428 229.349 81.3691 229.566 81.8047 230.002 cv
82.2402 230.438 82.458 230.964 82.458 231.581 cv
cp
f
90.4238 237.08 mo
90.4238 237.443 li
91.3311 236.717 92.3164 236.161 93.3818 235.773 cv
94.4463 235.387 95.584 235.192 96.7939 235.192 cv
97.3262 235.192 97.8975 235.229 98.5088 235.302 cv
99.1191 235.374 99.6826 235.504 100.196 235.691 cv
100.711 235.88 101.138 236.137 101.477 236.463 cv
101.814 236.79 101.984 237.214 101.984 237.733 cv
101.984 238 101.933 238.248 101.83 238.478 cv
101.728 238.708 101.591 238.91 101.422 239.086 cv
101.252 239.261 101.053 239.397 100.822 239.494 cv
100.593 239.591 100.345 239.64 100.079 239.64 cv
99.8486 239.64 99.582 239.573 99.2803 239.439 cv
98.5176 239.138 97.6885 238.986 96.7939 238.986 cv
95.9102 238.986 95.0811 239.152 94.3076 239.485 cv
93.5332 239.818 92.8584 240.271 92.2832 240.846 cv
91.709 241.421 91.2549 242.096 90.9229 242.87 cv
90.5898 243.645 90.4238 244.473 90.4238 245.356 cv
90.4238 253.632 li
90.4238 254.152 90.2393 254.597 89.8701 254.966 cv
89.501 255.335 89.0557 255.52 88.5361 255.52 cv
88.0029 255.52 87.5527 255.335 87.1836 254.966 cv
86.8145 254.597 86.6299 254.152 86.6299 253.632 cv
86.6299 237.08 li
86.6299 236.561 86.8145 236.115 87.1836 235.746 cv
87.5527 235.377 88.0029 235.192 88.5361 235.192 cv
89.0557 235.192 89.501 235.377 89.8701 235.746 cv
90.2393 236.115 90.4238 236.561 90.4238 237.08 cv
cp
f
121.074 243.469 mo
120.869 242.804 120.562 242.195 120.158 241.645 cv
119.752 241.095 119.28 240.622 118.742 240.229 cv
118.204 239.836 117.61 239.53 116.964 239.313 cv
116.316 239.095 115.647 238.986 114.958 238.986 cv
114.269 238.986 113.597 239.095 112.943 239.313 cv
112.29 239.53 111.691 239.836 111.146 240.229 cv
110.603 240.622 110.131 241.095 109.731 241.645 cv
109.332 242.195 109.035 242.804 108.842 243.469 cv
121.074 243.469 li
cp
120.258 249.803 mo
120.802 249.803 121.252 249.981 121.61 250.338 cv
121.966 250.695 122.145 251.146 122.145 251.69 cv
122.145 252.223 121.964 252.677 121.601 253.052 cv
119.725 254.697 117.511 255.52 114.958 255.52 cv
112.151 255.52 109.755 254.527 107.771 252.543 cv
105.787 250.559 104.795 248.163 104.795 245.356 cv
104.795 242.549 105.787 240.153 107.771 238.169 cv
109.755 236.185 112.151 235.192 114.958 235.192 cv
117.741 235.192 120.137 236.185 122.145 238.169 cv
123.137 239.149 123.881 240.241 124.377 241.445 cv
124.874 242.649 125.123 243.953 125.123 245.356 cv
125.123 245.9 124.937 246.352 124.569 246.708 cv
124.199 247.065 123.749 247.243 123.216 247.243 cv
108.842 247.243 li
109.048 247.909 109.35 248.518 109.749 249.067 cv
110.148 249.618 110.617 250.09 111.156 250.483 cv
111.694 250.877 112.287 251.182 112.935 251.399 cv
113.582 251.617 114.256 251.727 114.958 251.727 cv
115.757 251.727 116.488 251.605 117.154 251.363 cv
117.819 251.121 118.437 250.759 119.005 250.274 cv
119.368 249.973 119.786 249.814 120.258 249.803 cv
cp
f
145.719 255.52 mo
145.173 255.52 144.727 255.338 144.376 254.975 cv
144.024 254.612 143.843 254.171 143.832 253.65 cv
142.996 254.304 142.113 254.778 141.181 255.075 cv
140.25 255.371 139.24 255.52 138.15 255.52 cv
136.856 255.52 135.634 255.269 134.485 254.767 cv
133.335 254.265 132.332 253.584 131.472 252.725 cv
130.612 251.865 129.931 250.861 129.429 249.712 cv
128.927 248.563 128.677 247.341 128.677 246.046 cv
128.677 237.08 li
128.677 236.561 128.861 236.115 129.231 235.746 cv
129.599 235.377 130.049 235.192 130.583 235.192 cv
131.102 235.192 131.547 235.377 131.917 235.746 cv
132.286 236.115 132.469 236.561 132.469 237.08 cv
132.469 246.046 li
132.469 246.832 132.619 247.57 132.915 248.26 cv
133.21 248.949 133.616 249.552 134.131 250.065 cv
134.644 250.58 135.248 250.985 135.936 251.282 cv
136.626 251.578 137.365 251.727 138.15 251.727 cv
138.924 251.727 139.657 251.578 140.347 251.282 cv
141.036 250.985 141.641 250.577 142.161 250.057 cv
142.681 249.537 143.09 248.935 143.386 248.251 cv
143.682 247.567 143.832 246.832 143.832 246.046 cv
143.832 237.08 li
143.832 236.561 144.015 236.115 144.385 235.746 cv
144.753 235.377 145.204 235.192 145.737 235.192 cv
146.256 235.192 146.702 235.377 147.072 235.746 cv
147.44 236.115 147.624 236.561 147.624 237.08 cv
147.624 253.632 li
147.624 254.152 147.44 254.597 147.072 254.966 cv
146.702 255.335 146.251 255.52 145.719 255.52 cv
cp
f
154.845 245.846 mo
153.708 245.41 152.911 244.963 152.451 244.503 cv
152.468 244.503 li
151.548 243.571 151.089 242.477 151.089 241.218 cv
151.089 240.299 151.333 239.467 151.824 238.723 cv
152.314 237.979 152.953 237.347 153.738 236.826 cv
154.525 236.306 155.411 235.903 156.398 235.619 cv
157.384 235.335 158.373 235.192 159.365 235.192 cv
162.39 235.192 164.985 236.409 167.15 238.841 cv
167.404 239.155 167.532 239.536 167.532 239.984 cv
167.532 240.528 167.353 240.979 166.996 241.336 cv
166.64 241.693 166.189 241.871 165.644 241.871 cv
165.256 241.871 164.927 241.763 164.656 241.545 cv
164.382 241.327 164.12 241.091 163.865 240.837 cv
162.631 239.603 161.131 238.986 159.365 238.986 cv
157.623 238.986 156.232 239.519 155.19 240.583 cv
154.998 240.776 154.9 241.043 154.9 241.382 cv
154.9 241.721 155.057 241.95 155.373 242.071 cv
163.865 244.866 li
165.052 245.326 165.849 245.773 166.261 246.209 cv
166.244 246.209 li
167.162 247.141 167.623 248.236 167.623 249.494 cv
167.623 250.426 167.377 251.261 166.887 251.999 cv
166.398 252.736 165.759 253.369 164.973 253.896 cv
164.186 254.422 163.302 254.824 162.324 255.103 cv
161.343 255.381 160.357 255.52 159.365 255.52 cv
156.315 255.52 153.72 254.315 151.579 251.908 cv
151.312 251.557 151.179 251.164 151.179 250.729 cv
151.179 250.184 151.358 249.733 151.715 249.376 cv
152.072 249.02 152.523 248.841 153.068 248.841 cv
153.466 248.841 153.804 248.959 154.083 249.194 cv
154.361 249.431 154.615 249.657 154.845 249.875 cv
156.081 251.109 157.585 251.727 159.365 251.727 cv
161.094 251.727 162.486 251.182 163.54 250.093 cv
163.72 249.888 163.811 249.64 163.811 249.349 cv
163.811 249.011 163.648 248.774 163.322 248.641 cv
154.845 245.846 li
cp
f
187.331 243.469 mo
187.124 242.804 186.819 242.195 186.415 241.645 cv
186.007 241.095 185.536 240.622 184.999 240.229 cv
184.46 239.836 183.866 239.53 183.219 239.313 cv
182.573 239.095 181.903 238.986 181.214 238.986 cv
180.524 238.986 179.852 239.095 179.199 239.313 cv
178.545 239.53 177.948 239.836 177.403 240.229 cv
176.858 240.622 176.386 241.095 175.987 241.645 cv
175.587 242.195 175.291 242.804 175.098 243.469 cv
187.331 243.469 li
cp
186.514 249.803 mo
187.057 249.803 187.509 249.981 187.865 250.338 cv
188.223 250.695 188.402 251.146 188.402 251.69 cv
188.402 252.223 188.219 252.677 187.857 253.052 cv
185.981 254.697 183.766 255.52 181.214 255.52 cv
178.407 255.52 176.011 254.527 174.028 252.543 cv
172.043 250.559 171.05 248.163 171.05 245.356 cv
171.05 242.549 172.043 240.153 174.028 238.169 cv
176.011 236.185 178.407 235.192 181.214 235.192 cv
183.998 235.192 186.393 236.185 188.402 238.169 cv
189.393 239.149 190.136 240.241 190.632 241.445 cv
191.128 242.649 191.377 243.953 191.377 245.356 cv
191.377 245.9 191.193 246.352 190.824 246.708 cv
190.454 247.065 190.003 247.243 189.472 247.243 cv
175.098 247.243 li
175.303 247.909 175.606 248.518 176.005 249.067 cv
176.404 249.618 176.874 250.09 177.412 250.483 cv
177.951 250.877 178.543 251.182 179.19 251.399 cv
179.837 251.617 180.511 251.727 181.214 251.727 cv
182.012 251.727 182.744 251.605 183.411 251.363 cv
184.076 251.121 184.693 250.759 185.261 250.274 cv
185.624 249.973 186.042 249.814 186.514 249.803 cv
cp
f
198.653 245.846 mo
197.515 245.41 196.716 244.963 196.256 244.503 cv
196.274 244.503 li
195.356 243.571 194.895 242.477 194.895 241.218 cv
194.895 240.299 195.14 239.467 195.631 238.723 cv
196.12 237.979 196.759 237.347 197.544 236.826 cv
198.332 236.306 199.218 235.903 200.204 235.619 cv
201.19 235.335 202.178 235.192 203.172 235.192 cv
206.197 235.192 208.791 236.409 210.957 238.841 cv
211.21 239.155 211.339 239.536 211.339 239.984 cv
211.339 240.528 211.161 240.979 210.802 241.336 cv
210.447 241.693 209.995 241.871 209.452 241.871 cv
209.064 241.871 208.735 241.763 208.461 241.545 cv
208.19 241.327 207.927 241.091 207.672 240.837 cv
206.439 239.603 204.937 238.986 203.172 238.986 cv
201.428 238.986 200.039 239.519 198.998 240.583 cv
198.803 240.776 198.707 241.043 198.707 241.382 cv
198.707 241.721 198.865 241.95 199.178 242.071 cv
207.672 244.866 li
208.858 245.326 209.657 245.773 210.069 246.209 cv
210.049 246.209 li
210.969 247.141 211.428 248.236 211.428 249.494 cv
211.428 250.426 211.185 251.261 210.694 251.999 cv
210.204 252.736 209.565 253.369 208.779 253.896 cv
207.994 254.422 207.11 254.824 206.13 255.103 cv
205.149 255.381 204.164 255.52 203.172 255.52 cv
200.123 255.52 197.528 254.315 195.386 251.908 cv
195.119 251.557 194.986 251.164 194.986 250.729 cv
194.986 250.184 195.165 249.733 195.521 249.376 cv
195.877 249.02 196.329 248.841 196.874 248.841 cv
197.273 248.841 197.611 248.959 197.89 249.194 cv
198.168 249.431 198.422 249.657 198.653 249.875 cv
199.886 251.109 201.392 251.727 203.172 251.727 cv
204.902 251.727 206.293 251.182 207.345 250.093 cv
207.528 249.888 207.619 249.64 207.619 249.349 cv
207.619 249.011 207.454 248.774 207.127 248.641 cv
198.653 245.846 li
cp
f
44.6973 288.841 mo
45.2295 288.841 45.6836 289.028 46.0586 289.403 cv
46.4336 289.778 46.6211 290.232 46.6211 290.765 cv
46.6211 291.297 46.4336 291.751 46.0586 292.126 cv
45.6836 292.501 45.2295 292.688 44.6973 292.688 cv
27.9092 292.688 li
27.6309 292.688 27.377 292.641 27.1475 292.543 cv
26.917 292.446 26.7148 292.311 26.5391 292.135 cv
26.3643 291.96 26.2275 291.757 26.1309 291.527 cv
26.0342 291.297 25.9854 291.043 25.9854 290.765 cv
25.9854 265.574 li
25.9854 265.308 26.0342 265.057 26.1309 264.821 cv
26.2275 264.585 26.3643 264.379 26.5391 264.204 cv
26.7148 264.028 26.917 263.893 27.1475 263.795 cv
27.377 263.698 27.6309 263.65 27.9092 263.65 cv
44.6973 263.65 li
45.2295 263.65 45.6836 263.838 46.0586 264.213 cv
46.4336 264.588 46.6211 265.042 46.6211 265.574 cv
46.6211 266.106 46.4336 266.561 46.0586 266.936 cv
45.6836 267.311 45.2295 267.498 44.6973 267.498 cv
29.833 267.498 li
29.833 276.245 li
40.5049 276.245 li
41.0371 276.245 41.4912 276.434 41.8662 276.809 cv
42.2412 277.184 42.4287 277.637 42.4287 278.169 cv
42.4287 278.702 42.2412 279.155 41.8662 279.53 cv
41.4912 279.905 41.0371 280.093 40.5049 280.093 cv
29.833 280.093 li
29.833 288.841 li
44.6973 288.841 li
cp
f
64.2236 286.936 mo
64.7676 286.936 65.2188 287.114 65.5752 287.471 cv
65.9326 287.828 66.1113 288.278 66.1113 288.823 cv
66.1113 289.355 65.9111 289.821 65.5117 290.221 cv
63.6367 291.866 61.4287 292.688 58.8877 292.688 cv
56.0801 292.688 53.6846 291.696 51.7002 289.712 cv
49.7158 287.728 48.7246 285.332 48.7246 282.525 cv
48.7246 279.718 49.7158 277.322 51.7002 275.338 cv
53.6846 273.354 56.0801 272.361 58.8877 272.361 cv
61.4404 272.361 63.6484 273.185 65.5117 274.83 cv
65.9473 275.218 66.165 275.695 66.165 276.264 cv
66.165 276.809 65.9863 277.262 65.6299 277.625 cv
65.2725 277.988 64.8223 278.169 64.2783 278.169 cv
63.8184 278.169 63.4063 278.024 63.0439 277.733 cv
62.4268 277.214 61.7793 276.82 61.1016 276.554 cv
60.4238 276.288 59.6865 276.155 58.8877 276.155 cv
58.0039 276.155 57.1758 276.321 56.4014 276.654 cv
55.627 276.987 54.9492 277.44 54.3682 278.015 cv
53.7881 278.59 53.3311 279.265 52.998 280.039 cv
52.665 280.813 52.499 281.642 52.499 282.525 cv
52.499 283.408 52.665 284.237 52.998 285.012 cv
53.3311 285.786 53.7881 286.461 54.3682 287.035 cv
54.9492 287.61 55.627 288.063 56.4014 288.396 cv
57.1758 288.729 58.0039 288.896 58.8877 288.896 cv
59.6865 288.896 60.4238 288.766 61.1016 288.505 cv
61.7793 288.245 62.4199 287.854 63.0254 287.335 cv
63.3643 287.08 63.7637 286.947 64.2236 286.936 cv
cp
f
69.5742 290.801 mo
69.5742 265.556 li
69.5742 265.023 69.7529 264.573 70.1094 264.204 cv
70.4658 263.835 70.917 263.65 71.4619 263.65 cv
72.0059 263.65 72.457 263.835 72.8135 264.204 cv
73.1709 264.573 73.3486 265.023 73.3486 265.556 cv
73.3486 288.896 li
74.2207 288.896 li
74.7402 288.896 75.1846 289.08 75.5547 289.449 cv
75.9229 289.818 76.1074 290.269 76.1074 290.801 cv
76.1074 291.321 75.9229 291.766 75.5547 292.135 cv
75.1846 292.504 74.7402 292.688 74.2207 292.688 cv
71.4434 292.688 li
70.9229 292.688 70.4814 292.504 70.1182 292.135 cv
69.7559 291.766 69.5742 291.321 69.5742 290.801 cv
cp
f
89.2998 276.155 mo
88.4043 276.155 87.5693 276.324 86.7949 276.663 cv
86.0205 277.002 85.3496 277.459 84.7813 278.033 cv
84.2119 278.608 83.7617 279.282 83.4287 280.057 cv
83.0957 280.831 82.9297 281.654 82.9297 282.525 cv
82.9297 283.396 83.0957 284.219 83.4287 284.993 cv
83.7617 285.768 84.2119 286.442 84.7813 287.017 cv
85.3496 287.592 86.0205 288.049 86.7949 288.387 cv
87.5693 288.726 88.4043 288.896 89.2998 288.896 cv
90.1826 288.896 91.0117 288.726 91.7861 288.387 cv
92.5605 288.049 93.2354 287.589 93.8096 287.008 cv
94.3848 286.427 94.8379 285.753 95.1709 284.984 cv
95.5039 284.216 95.6699 283.396 95.6699 282.525 cv
95.6699 281.654 95.5039 280.834 95.1709 280.065 cv
94.8379 279.298 94.3848 278.623 93.8096 278.042 cv
93.2354 277.462 92.5605 277.002 91.7861 276.663 cv
91.0117 276.324 90.1826 276.155 89.2998 276.155 cv
cp
95.6699 290.801 mo
95.6699 290.438 li
94.7627 291.164 93.7764 291.721 92.7119 292.107 cv
91.6475 292.495 90.5098 292.688 89.2998 292.688 cv
86.4932 292.688 84.0967 291.696 82.1133 289.712 cv
80.1289 287.728 79.1367 285.332 79.1367 282.525 cv
79.1367 279.718 80.1289 277.322 82.1133 275.338 cv
84.0967 273.354 86.4932 272.361 89.2998 272.361 cv
92.083 272.361 94.4785 273.354 96.4873 275.338 cv
98.4707 277.322 99.4629 279.718 99.4629 282.525 cv
99.4629 290.801 li
99.4629 291.321 99.2783 291.766 98.9102 292.135 cv
98.54 292.504 98.0957 292.688 97.5762 292.688 cv
97.043 292.688 96.5928 292.504 96.2236 292.135 cv
95.8545 291.766 95.6699 291.321 95.6699 290.801 cv
cp
f
104.052 290.783 mo
104.052 274.268 li
104.052 273.735 104.236 273.284 104.605 272.915 cv
104.975 272.546 105.419 272.361 105.939 272.361 cv
106.46 272.361 106.904 272.546 107.273 272.915 cv
107.643 273.284 107.833 273.735 107.846 274.268 cv
107.846 290.783 li
107.833 291.315 107.643 291.766 107.273 292.135 cv
106.904 292.504 106.46 292.688 105.939 292.688 cv
105.419 292.688 104.975 292.504 104.605 292.135 cv
104.236 291.766 104.052 291.315 104.052 290.783 cv
cp
108.172 268.75 mo
108.172 269.367 107.954 269.894 107.519 270.329 cv
107.083 270.765 106.557 270.982 105.939 270.982 cv
105.322 270.982 104.796 270.765 104.36 270.329 cv
103.925 269.894 103.707 269.367 103.707 268.75 cv
103.707 268.133 103.925 267.606 104.36 267.171 cv
104.796 266.735 105.322 266.518 105.939 266.518 cv
106.557 266.518 107.083 266.735 107.519 267.171 cv
107.954 267.606 108.172 268.133 108.172 268.75 cv
cp
f
116.138 274.249 mo
116.138 274.612 li
117.045 273.886 118.03 273.33 119.096 272.942 cv
120.16 272.556 121.298 272.361 122.507 272.361 cv
123.041 272.361 123.612 272.398 124.223 272.471 cv
124.833 272.543 125.398 272.673 125.911 272.86 cv
126.425 273.049 126.852 273.306 127.191 273.632 cv
127.529 273.959 127.699 274.383 127.699 274.902 cv
127.699 275.169 127.648 275.417 127.544 275.646 cv
127.443 275.877 127.306 276.079 127.136 276.255 cv
126.966 276.43 126.768 276.566 126.537 276.663 cv
126.307 276.76 126.06 276.809 125.794 276.809 cv
125.564 276.809 125.297 276.742 124.995 276.608 cv
124.232 276.307 123.403 276.155 122.507 276.155 cv
121.624 276.155 120.794 276.321 120.021 276.654 cv
119.247 276.987 118.572 277.44 117.997 278.015 cv
117.423 278.59 116.969 279.265 116.637 280.039 cv
116.304 280.813 116.138 281.642 116.138 282.525 cv
116.138 290.801 li
116.138 291.321 115.953 291.766 115.584 292.135 cv
115.215 292.504 114.77 292.688 114.25 292.688 cv
113.717 292.688 113.267 292.504 112.897 292.135 cv
112.528 291.766 112.344 291.321 112.344 290.801 cv
112.344 274.249 li
112.344 273.729 112.528 273.284 112.897 272.915 cv
113.267 272.546 113.717 272.361 114.25 272.361 cv
114.77 272.361 115.215 272.546 115.584 272.915 cv
115.953 273.284 116.138 273.729 116.138 274.249 cv
cp
f
146.79 280.638 mo
146.583 279.973 146.278 279.364 145.874 278.813 cv
145.466 278.264 144.995 277.791 144.457 277.398 cv
143.919 277.005 143.326 276.699 142.678 276.481 cv
142.032 276.264 141.362 276.155 140.673 276.155 cv
139.983 276.155 139.311 276.264 138.658 276.481 cv
138.005 276.699 137.407 277.005 136.861 277.398 cv
136.318 277.791 135.845 278.264 135.447 278.813 cv
135.047 279.364 134.75 279.973 134.556 280.638 cv
146.79 280.638 li
cp
145.973 286.972 mo
146.516 286.972 146.968 287.15 147.324 287.507 cv
147.681 287.864 147.861 288.314 147.861 288.859 cv
147.861 289.392 147.678 289.846 147.315 290.221 cv
145.44 291.866 143.226 292.688 140.673 292.688 cv
137.866 292.688 135.469 291.696 133.486 289.712 cv
131.502 287.728 130.51 285.332 130.51 282.525 cv
130.51 279.718 131.502 277.322 133.486 275.338 cv
135.469 273.354 137.866 272.361 140.673 272.361 cv
143.457 272.361 145.852 273.354 147.861 275.338 cv
148.852 276.318 149.595 277.41 150.091 278.614 cv
150.587 279.818 150.835 281.122 150.835 282.525 cv
150.835 283.069 150.652 283.521 150.283 283.877 cv
149.914 284.234 149.462 284.412 148.931 284.412 cv
134.556 284.412 li
134.762 285.078 135.065 285.687 135.464 286.236 cv
135.863 286.787 136.332 287.259 136.871 287.652 cv
137.41 288.046 138.002 288.351 138.649 288.568 cv
139.297 288.786 139.97 288.896 140.673 288.896 cv
141.472 288.896 142.203 288.774 142.869 288.532 cv
143.535 288.29 144.152 287.928 144.719 287.443 cv
145.083 287.142 145.501 286.983 145.973 286.972 cv
cp
f
171.432 292.688 mo
170.887 292.688 170.44 292.507 170.09 292.144 cv
169.738 291.781 169.556 291.34 169.544 290.819 cv
168.71 291.473 167.828 291.947 166.895 292.244 cv
165.964 292.54 164.953 292.688 163.865 292.688 cv
162.569 292.688 161.348 292.438 160.199 291.936 cv
159.048 291.434 158.044 290.753 157.186 289.894 cv
156.327 289.034 155.645 288.03 155.144 286.881 cv
154.641 285.731 154.39 284.51 154.39 283.215 cv
154.39 274.249 li
154.39 273.729 154.576 273.284 154.944 272.915 cv
155.314 272.546 155.764 272.361 156.297 272.361 cv
156.816 272.361 157.261 272.546 157.631 272.915 cv
157.999 273.284 158.183 273.729 158.183 274.249 cv
158.183 283.215 li
158.183 284.001 158.332 284.739 158.628 285.429 cv
158.924 286.118 159.331 286.721 159.844 287.234 cv
160.358 287.749 160.96 288.154 161.65 288.451 cv
162.34 288.747 163.078 288.896 163.865 288.896 cv
164.639 288.896 165.371 288.747 166.061 288.451 cv
166.75 288.154 167.356 287.746 167.875 287.226 cv
168.395 286.706 168.803 286.104 169.101 285.42 cv
169.396 284.736 169.544 284.001 169.544 283.215 cv
169.544 274.249 li
169.544 273.729 169.73 273.284 170.098 272.915 cv
170.468 272.546 170.918 272.361 171.452 272.361 cv
171.97 272.361 172.415 272.546 172.786 272.915 cv
173.153 273.284 173.337 273.729 173.337 274.249 cv
173.337 290.801 li
173.337 291.321 173.153 291.766 172.786 292.135 cv
172.415 292.504 171.965 292.688 171.432 292.688 cv
cp
f
180.578 274.249 mo
180.578 274.612 li
181.486 273.886 182.47 273.33 183.536 272.942 cv
184.601 272.556 185.738 272.361 186.949 272.361 cv
187.481 272.361 188.052 272.398 188.664 272.471 cv
189.273 272.543 189.836 272.673 190.351 272.86 cv
190.865 273.049 191.292 273.306 191.631 273.632 cv
191.969 273.959 192.139 274.383 192.139 274.902 cv
192.139 275.169 192.086 275.417 191.985 275.646 cv
191.881 275.877 191.745 276.079 191.577 276.255 cv
191.407 276.43 191.207 276.566 190.977 276.663 cv
190.748 276.76 190.499 276.809 190.233 276.809 cv
190.002 276.809 189.736 276.742 189.435 276.608 cv
188.672 276.307 187.843 276.155 186.949 276.155 cv
186.065 276.155 185.236 276.321 184.461 276.654 cv
183.687 276.987 183.012 277.44 182.437 278.015 cv
181.863 278.59 181.41 279.265 181.078 280.039 cv
180.744 280.813 180.578 281.642 180.578 282.525 cv
180.578 290.801 li
180.578 291.321 180.394 291.766 180.024 292.135 cv
179.656 292.504 179.21 292.688 178.69 292.688 cv
178.157 292.688 177.707 292.504 177.337 292.135 cv
176.969 291.766 176.785 291.321 176.785 290.801 cv
176.785 274.249 li
176.785 273.729 176.969 273.284 177.337 272.915 cv
177.707 272.546 178.157 272.361 178.69 272.361 cv
179.21 272.361 179.656 272.546 180.024 272.915 cv
180.394 273.284 180.578 273.729 180.578 274.249 cv
cp
f
198.652 283.015 mo
197.514 282.579 196.715 282.132 196.256 281.672 cv
196.273 281.672 li
195.355 280.74 194.894 279.646 194.894 278.387 cv
194.894 277.468 195.14 276.636 195.63 275.892 cv
196.119 275.147 196.757 274.516 197.544 273.995 cv
198.332 273.475 199.216 273.072 200.203 272.788 cv
201.19 272.504 202.177 272.361 203.17 272.361 cv
206.195 272.361 208.79 273.578 210.957 276.01 cv
211.21 276.324 211.337 276.705 211.337 277.153 cv
211.337 277.697 211.16 278.148 210.802 278.505 cv
210.445 278.862 209.994 279.04 209.451 279.04 cv
209.062 279.04 208.733 278.932 208.46 278.714 cv
208.189 278.496 207.925 278.26 207.67 278.006 cv
206.437 276.771 204.936 276.155 203.17 276.155 cv
201.427 276.155 200.037 276.688 198.996 277.752 cv
198.802 277.945 198.707 278.212 198.707 278.551 cv
198.707 278.89 198.863 279.119 199.177 279.24 cv
207.67 282.035 li
208.857 282.495 209.656 282.942 210.068 283.378 cv
210.048 283.378 li
210.968 284.31 211.427 285.405 211.427 286.663 cv
211.427 287.595 211.183 288.43 210.694 289.168 cv
210.203 289.905 209.565 290.538 208.778 291.064 cv
207.993 291.591 207.108 291.993 206.128 292.271 cv
205.148 292.55 204.162 292.688 203.17 292.688 cv
200.121 292.688 197.527 291.484 195.385 289.077 cv
195.119 288.726 194.986 288.333 194.986 287.897 cv
194.986 287.353 195.165 286.902 195.52 286.545 cv
195.877 286.188 196.328 286.01 196.874 286.01 cv
197.273 286.01 197.611 286.128 197.889 286.363 cv
198.167 286.6 198.42 286.826 198.652 287.044 cv
199.886 288.278 201.391 288.896 203.17 288.896 cv
204.9 288.896 206.292 288.351 207.344 287.262 cv
207.527 287.057 207.618 286.809 207.618 286.518 cv
207.618 286.18 207.453 285.943 207.127 285.81 cv
198.652 283.015 li
cp
f
232.249 330.647 mo
232.249 332.331 235.074 334.659 236.798 334.659 cv
237.421 334.659 237.878 334.451 237.878 333.682 cv
237.878 332.664 237.131 331.625 236.216 330.752 cv
235.407 329.941 234.804 329.317 233.619 329.317 cv
232.83 329.317 232.249 329.754 232.249 330.627 cv
232.249 330.647 li
cp
227.238 329.276 mo
227.135 329.484 226.865 329.567 226.533 329.567 cv
226.015 329.567 225.64 329.026 225.64 328.32 cv
225.64 327.635 226.097 327.281 226.594 327.281 cv
227.3 327.344 li
238.003 327.344 li
238.066 327.239 238.273 327.073 238.523 327.073 cv
239.168 327.073 239.396 327.468 239.396 328.341 cv
239.396 329.048 239.127 329.38 238.565 329.38 cv
238.357 329.38 238.169 329.38 238.087 329.276 cv
236.654 329.276 li
238.232 330.295 239.646 332.519 239.646 334.347 cv
239.646 335.573 238.815 336.633 237.194 336.633 cv
233.931 336.633 230.668 333.308 230.668 330.669 cv
230.668 330.087 230.771 329.65 231.021 329.276 cv
227.238 329.276 li
cp
f
231.624 319.483 mo
231.624 320.668 232.58 321.79 233.931 322.414 cv
233.287 318.735 232.974 318.216 232.683 318.216 cv
232.186 318.216 231.624 318.569 231.624 319.463 cv
231.624 319.483 li
cp
230.044 319.4 mo
230.044 317.052 231.791 316.366 232.602 316.366 cv
233.536 316.366 234.388 317.011 235.24 321.832 cv
235.407 322.788 li
235.738 322.892 236.113 322.934 236.529 322.934 cv
237.569 322.934 237.984 322.393 237.984 321.499 cv
237.984 320.065 237.153 318.86 236.591 318.485 cv
236.113 318.548 235.675 318.133 235.675 317.446 cv
235.675 316.678 236.175 316.512 236.591 316.512 cv
237.173 316.512 239.603 318.319 239.603 321.728 cv
239.603 323.494 238.856 324.846 236.695 324.846 cv
232.83 324.846 230.044 322.123 230.044 319.421 cv
230.044 319.4 li
cp
f
237.65 307.26 mo
237.798 307.134 238.073 306.986 238.452 306.986 cv
239.082 306.986 239.419 307.66 239.419 308.418 cv
239.398 309.239 239.125 309.64 238.493 309.64 cv
238.029 309.64 237.694 309.492 237.46 309.281 cv
233.65 309.281 li
233.418 309.513 233.017 309.64 232.681 309.64 cv
232.365 309.64 231.859 309.471 231.648 309.281 cv
228.511 309.281 li
228.449 309.45 227.965 309.702 227.585 309.702 cv
227.186 309.702 226.828 309.576 226.786 309.281 cv
226.09 309.323 225.755 308.587 225.755 307.955 cv
225.755 307.429 226.049 307.07 226.469 307.239 cv
225.774 302.417 li
225.733 302.101 225.544 301.933 225.544 301.638 cv
225.544 300.985 225.88 300.458 226.448 300.479 cv
227.416 300.479 227.732 300.796 227.732 301.616 cv
227.732 301.911 227.669 302.144 227.543 302.396 cv
228.26 307.26 li
231.585 307.26 li
230.933 302.754 li
230.786 302.585 230.661 302.29 230.661 301.849 cv
230.661 301.448 231.269 301.069 231.691 301.069 cv
232.598 301.069 232.871 301.385 232.871 302.08 cv
232.871 302.333 232.849 302.564 232.744 302.817 cv
233.375 307.26 li
237.65 307.26 li
cp
f
231.481 295.95 mo
230.786 292.665 229.732 289.97 228.216 289.97 cv
227.71 289.97 227.396 290.496 227.396 291.338 cv
227.396 292.518 227.691 294.16 228.533 295.95 cv
231.481 295.95 li
cp
238.261 298.203 mo
238.05 298.203 237.756 298.034 237.587 297.929 cv
229.458 297.929 li
229.502 297.992 229.502 298.034 229.502 298.119 cv
229.502 298.329 229.249 298.582 228.702 298.582 cv
227.984 298.582 227.648 298.287 227.521 297.929 cv
227.08 297.929 li
226.931 297.992 226.679 298.076 226.469 298.076 cv
225.861 298.076 225.482 297.487 225.482 296.876 cv
225.482 296.224 225.986 295.718 226.702 295.95 cv
226.912 295.95 li
226.112 294.16 225.733 292.476 225.733 290.791 cv
225.733 289.085 226.533 287.864 227.921 287.864 cv
230.048 287.864 231.775 290.223 232.511 294.497 cv
237.44 287.675 li
237.187 286.979 237.778 286.306 238.283 286.306 cv
239.103 286.306 239.525 286.958 239.525 287.569 cv
239.525 287.969 239.335 288.369 238.977 288.559 cv
233.566 295.95 li
237.671 295.95 li
237.798 295.887 238.073 295.761 238.324 295.761 cv
239.146 295.761 239.377 296.497 239.377 297.213 cv
239.377 297.908 238.83 298.203 238.283 298.203 cv
238.261 298.203 li
cp
f
232.618 277.627 mo
228.744 279.332 li
232.871 281.312 li
232.618 277.627 li
cp
234.533 282.133 mo
236.787 283.27 237.228 283.501 237.566 283.564 cv
237.861 283.606 238.219 283.586 238.493 283.586 cv
238.957 283.586 239.377 283.859 239.377 284.828 cv
239.377 285.607 238.915 285.923 238.408 285.923 cv
237.945 285.923 237.187 285.522 235.628 284.765 cv
228.427 281.101 li
227.627 280.659 227.102 280.448 226.679 280.364 cv
225.944 280.385 225.27 279.922 225.27 279.143 cv
225.27 278.427 225.711 278.048 226.069 278.048 cv
226.427 278.048 226.552 278.195 226.848 278.195 cv
227.502 278.195 230.912 276.342 232.07 275.837 cv
235.25 274.278 237.398 273.31 238.135 273.31 cv
238.915 273.31 239.377 273.794 239.377 274.552 cv
239.377 275.205 239.041 275.668 238.576 275.668 cv
238.24 275.668 238.007 275.542 237.819 275.542 cv
237.503 275.542 236.808 275.753 234.198 276.932 cv
234.533 282.133 li
cp
f
227.375 270.801 mo
227.207 270.905 226.953 270.969 226.743 270.969 cv
226.218 270.969 225.69 270.611 225.69 269.811 cv
225.69 268.927 225.964 268.674 226.49 268.674 cv
226.931 268.674 227.775 268.315 228.554 267.895 cv
229.607 267.305 231.144 266.126 232.344 264.988 cv
233.418 263.978 234.598 263.03 235.25 262.715 cv
235.25 262.673 li
232.533 262.735 229.796 262.735 226.974 262.735 cv
226.848 262.777 226.636 262.946 226.407 262.946 cv
225.711 262.946 225.46 262.44 225.46 261.936 cv
225.46 261.346 225.733 260.693 226.259 260.693 cv
226.595 260.693 226.786 260.798 226.931 260.861 cv
238.091 260.861 li
238.219 260.756 238.386 260.608 238.662 260.608 cv
239.187 260.608 239.377 260.903 239.377 261.767 cv
239.377 262.42 238.852 262.693 238.24 262.946 cv
237.144 263.451 235.103 264.988 234.029 265.999 cv
232.661 267.284 231.08 268.484 230.048 268.947 cv
230.048 268.989 li
232.576 268.947 235.187 268.927 237.798 268.927 cv
237.923 268.842 238.157 268.716 238.429 268.716 cv
239.061 268.716 239.377 269.031 239.377 269.747 cv
239.377 270.484 239.125 271.053 238.368 271.053 cv
238.177 271.053 237.903 270.905 237.798 270.801 cv
227.375 270.801 li
cp
f
225.46 251.636 mo
225.46 249.277 226.595 247.677 227.606 247.677 cv
228.323 247.677 228.723 248.14 228.723 248.793 cv
228.723 249.383 228.449 249.656 227.881 249.782 cv
227.502 249.846 227.186 250.562 227.186 251.53 cv
227.186 254.142 231.312 256.036 233.965 256.036 cv
236.661 256.036 237.882 254.668 237.882 253.362 cv
237.882 252.078 237.061 250.667 236.219 250.057 cv
235.671 250.014 235.017 249.824 235.017 248.94 cv
235.017 248.183 235.566 247.845 235.903 247.845 cv
236.24 247.845 236.619 247.93 237.208 248.435 cv
238.198 249.361 239.671 251.425 239.65 253.636 cv
239.65 256.226 237.778 258.079 233.84 258.079 cv
230.679 258.079 225.46 255.595 225.46 251.656 cv
225.46 251.636 li
cp
f
237.523 242.915 mo
237.103 237.103 li
236.936 236.935 236.808 236.703 236.808 236.429 cv
236.808 235.713 237.333 235.25 237.798 235.25 cv
238.703 235.25 238.871 235.84 238.871 236.955 cv
239.293 242.894 li
239.482 243.063 239.65 243.483 239.65 244.094 cv
239.65 244.684 239.293 245.21 238.576 245.21 cv
238.219 245.21 237.882 245.084 237.628 244.937 cv
233.691 244.937 li
233.46 245.188 233.124 245.315 232.723 245.315 cv
232.323 245.315 231.923 245.104 231.753 244.937 cv
228.385 244.937 li
228.216 245.252 227.9 245.378 227.565 245.378 cv
227.165 245.378 226.89 245.252 226.743 245.063 cv
226.658 245.146 226.533 245.168 226.407 245.168 cv
225.964 245.168 225.649 244.642 225.649 243.988 cv
225.649 243.294 225.986 242.915 226.427 242.915 cv
225.986 237.903 li
225.839 237.692 225.67 237.377 225.67 237.124 cv
225.67 236.324 226.134 235.924 226.636 235.924 cv
227.375 235.924 227.881 236.408 227.881 237.146 cv
227.881 237.419 227.816 237.629 227.71 237.861 cv
228.154 242.915 li
231.691 242.915 li
231.186 238.893 li
231.04 238.683 230.89 238.408 230.89 238.135 cv
230.89 237.439 231.44 236.977 231.986 236.977 cv
232.723 236.977 233.061 237.439 233.061 238.219 cv
233.061 238.388 232.996 238.556 232.912 238.703 cv
233.44 242.915 li
237.523 242.915 li
cp
f
3.84766 308.021 mo
3.84766 324.808 li
3.84766 325.691 4.01758 326.526 4.35645 327.313 cv
4.69434 328.1 5.1543 328.786 5.73535 329.372 cv
6.31641 329.96 7 330.425 7.78613 330.77 cv
8.57227 331.115 9.41309 331.287 10.3086 331.287 cv
11.2041 331.287 12.0449 331.118 12.832 330.779 cv
13.6182 330.44 14.3047 329.975 14.8916 329.382 cv
15.4785 328.789 15.9414 328.103 16.2803 327.321 cv
16.6182 326.541 16.7881 325.703 16.7881 324.808 cv
16.7881 308.021 li
16.7881 307.488 16.9756 307.034 17.3506 306.659 cv
17.7256 306.284 18.1797 306.097 18.7119 306.097 cv
19.2441 306.097 19.6982 306.284 20.0732 306.659 cv
20.4482 307.034 20.6357 307.488 20.6357 308.021 cv
20.6357 324.808 li
20.6357 325.752 20.5117 326.659 20.2637 327.53 cv
20.0156 328.401 19.668 329.222 19.2197 329.989 cv
18.7725 330.758 18.2334 331.457 17.6045 332.086 cv
16.9756 332.715 16.2773 333.257 15.5088 333.71 cv
14.7402 334.164 13.918 334.515 13.04 334.763 cv
12.1631 335.011 11.2529 335.135 10.3086 335.135 cv
7.45313 335.135 5.02734 334.125 3.03125 332.104 cv
1.01074 330.083 0 327.651 0 324.808 cv
0 308.021 li
0 307.488 0.1875 307.034 0.563477 306.659 cv
0.9375 306.284 1.3916 306.097 1.92383 306.097 cv
2.45605 306.097 2.91016 306.284 3.28516 306.659 cv
3.66016 307.034 3.84766 307.488 3.84766 308.021 cv
cp
f
23.4727 333.211 mo
23.4727 308.021 li
23.4727 307.754 23.5205 307.503 23.6182 307.268 cv
23.7148 307.031 23.8506 306.825 24.0264 306.65 cv
24.2012 306.475 24.4043 306.339 24.6338 306.241 cv
24.8643 306.145 25.1182 306.097 25.3965 306.097 cv
25.9648 306.097 26.4609 306.332 26.8848 306.805 cv
43.0732 327.621 li
43.0732 308.021 li
43.0732 307.488 43.2607 307.034 43.6357 306.659 cv
44.0107 306.284 44.4648 306.097 44.9971 306.097 cv
45.5293 306.097 45.9834 306.284 46.3584 306.659 cv
46.7334 307.034 46.9209 307.488 46.9209 308.021 cv
46.9209 333.211 li
46.9209 333.489 46.873 333.743 46.7754 333.974 cv
46.6787 334.203 46.543 334.406 46.3672 334.581 cv
46.1924 334.757 45.9863 334.893 45.75 334.989 cv
45.5146 335.087 45.2637 335.135 44.9971 335.135 cv
44.4287 335.135 43.9385 334.911 43.5273 334.463 cv
27.3203 313.646 li
27.3203 333.211 li
27.3203 333.743 27.1328 334.197 26.7578 334.572 cv
26.3828 334.947 25.9287 335.135 25.3965 335.135 cv
24.8643 335.135 24.4102 334.947 24.0352 334.572 cv
23.6602 334.197 23.4727 333.743 23.4727 333.211 cv
cp
f
54.9297 333.211 mo
54.9297 333.743 54.7422 334.197 54.3672 334.572 cv
53.9922 334.947 53.5381 335.135 53.0059 335.135 cv
52.4736 335.135 52.0195 334.947 51.6445 334.572 cv
51.2695 334.197 51.082 333.743 51.082 333.211 cv
51.082 308.021 li
51.082 307.488 51.2695 307.034 51.6445 306.659 cv
52.0195 306.284 52.4736 306.097 53.0059 306.097 cv
53.5381 306.097 53.9922 306.284 54.3672 306.659 cv
54.7422 307.034 54.9297 307.488 54.9297 308.021 cv
54.9297 333.211 li
cp
f
73.3369 309.944 mo
71.8369 309.944 70.4668 310.204 69.2266 310.725 cv
67.9863 311.245 66.8398 312.031 65.7871 313.084 cv
64.7344 314.137 63.9512 315.28 63.4375 316.514 cv
62.9229 317.748 62.666 319.115 62.666 320.615 cv
62.666 323.568 63.7061 326.085 65.7871 328.166 cv
67.8682 330.247 70.3848 331.287 73.3369 331.287 cv
76.2891 331.287 78.8057 330.247 80.8877 328.166 cv
82.9678 326.085 84.0088 323.568 84.0088 320.615 cv
84.0088 317.676 82.9678 315.165 80.8877 313.084 cv
78.7939 310.991 76.2773 309.944 73.3369 309.944 cv
cp
87.8564 320.615 mo
87.8564 324.62 86.4346 328.045 83.5918 330.888 cv
80.7598 333.719 77.3418 335.135 73.3369 335.135 cv
69.3203 335.135 65.8965 333.719 63.0654 330.888 cv
60.2334 328.057 58.8184 324.633 58.8184 320.615 cv
58.8184 316.611 60.2334 313.192 63.0654 310.361 cv
65.9082 307.519 69.332 306.097 73.3369 306.097 cv
77.3301 306.097 80.748 307.519 83.5918 310.361 cv
85.0186 311.789 86.0869 313.351 86.7949 315.044 cv
87.5029 316.738 87.8564 318.595 87.8564 320.615 cv
cp
f
90.9297 333.211 mo
90.9297 308.021 li
90.9297 307.754 90.9775 307.503 91.0752 307.268 cv
91.1719 307.031 91.3076 306.825 91.4834 306.65 cv
91.6582 306.475 91.8613 306.339 92.0908 306.241 cv
92.3213 306.145 92.5752 306.097 92.8535 306.097 cv
93.4219 306.097 93.918 306.332 94.3418 306.805 cv
110.53 327.621 li
110.53 308.021 li
110.53 307.488 110.718 307.034 111.093 306.659 cv
111.468 306.284 111.922 306.097 112.454 306.097 cv
112.986 306.097 113.44 306.284 113.815 306.659 cv
114.19 307.034 114.378 307.488 114.378 308.021 cv
114.378 333.211 li
114.378 333.489 114.33 333.743 114.232 333.974 cv
114.136 334.203 114 334.406 113.824 334.581 cv
113.649 334.757 113.443 334.893 113.207 334.989 cv
112.972 335.087 112.721 335.135 112.454 335.135 cv
111.886 335.135 111.396 334.911 110.984 334.463 cv
94.7773 313.646 li
94.7773 333.211 li
94.7773 333.743 94.5898 334.197 94.2148 334.572 cv
93.8398 334.947 93.3857 335.135 92.8535 335.135 cv
92.3213 335.135 91.8672 334.947 91.4922 334.572 cv
91.1172 334.197 90.9297 333.743 90.9297 333.211 cv
cp
f
122.386 333.211 mo
122.386 333.743 122.199 334.197 121.824 334.572 cv
121.449 334.947 120.995 335.135 120.462 335.135 cv
119.931 335.135 119.477 334.947 119.102 334.572 cv
118.727 334.197 118.539 333.743 118.539 333.211 cv
118.539 308.021 li
118.539 307.488 118.727 307.034 119.102 306.659 cv
119.477 306.284 119.931 306.097 120.462 306.097 cv
120.995 306.097 121.449 306.284 121.824 306.659 cv
122.199 307.034 122.386 307.488 122.386 308.021 cv
122.386 333.211 li
cp
f
129.96 318.982 mo
129.064 318.159 128.439 317.315 128.082 316.45 cv
127.723 315.586 127.545 314.669 127.545 313.701 cv
127.545 312.516 127.77 311.441 128.218 310.479 cv
128.665 309.518 129.326 308.662 130.197 307.911 cv
130.177 307.911 li
131.569 306.701 133.203 306.097 135.078 306.097 cv
135.682 306.097 136.289 306.172 136.894 306.323 cv
137.498 306.475 138.082 306.704 138.644 307.013 cv
139.207 307.321 139.733 307.706 140.223 308.165 cv
140.714 308.625 141.152 309.164 141.539 309.78 cv
141.719 310.096 141.811 310.44 141.811 310.815 cv
141.811 311.094 141.762 311.348 141.665 311.577 cv
141.569 311.808 141.432 312.01 141.256 312.186 cv
141.083 312.361 140.876 312.497 140.64 312.594 cv
140.406 312.69 140.153 312.739 139.887 312.739 cv
139.645 312.739 139.431 312.703 139.244 312.63 cv
139.056 312.558 138.886 312.455 138.736 312.321 cv
138.583 312.188 138.439 312.034 138.299 311.858 cv
138.16 311.684 138.012 311.48 137.855 311.251 cv
137.564 310.827 137.167 310.51 136.665 310.298 cv
136.164 310.086 135.623 309.98 135.042 309.98 cv
134.582 309.98 134.134 310.074 133.699 310.262 cv
133.262 310.449 132.876 310.706 132.536 311.033 cv
132.199 311.359 131.923 311.747 131.711 312.194 cv
131.499 312.643 131.394 313.126 131.394 313.646 cv
131.394 314.578 131.652 315.313 132.165 315.852 cv
132.678 316.39 133.565 316.841 134.824 317.204 cv
136.954 317.809 138.623 318.644 139.833 319.708 cv
141.042 320.773 141.866 321.819 142.302 322.848 cv
142.737 323.877 142.954 324.959 142.954 326.097 cv
142.954 328.928 141.907 331.227 139.815 332.993 cv
139.833 332.993 li
138.152 334.421 136.24 335.135 134.098 335.135 cv
133.384 335.135 132.67 335.047 131.957 334.872 cv
131.244 334.696 130.556 334.439 129.895 334.101 cv
129.237 333.762 128.62 333.338 128.045 332.83 cv
127.469 332.321 126.972 331.747 126.548 331.105 cv
126.294 330.779 126.167 330.392 126.167 329.944 cv
126.167 329.678 126.215 329.427 126.311 329.191 cv
126.41 328.955 126.544 328.749 126.719 328.574 cv
126.895 328.398 127.098 328.263 127.329 328.166 cv
127.557 328.069 127.811 328.021 128.09 328.021 cv
128.803 328.021 129.343 328.317 129.707 328.91 cv
130.214 329.696 130.848 330.289 131.612 330.688 cv
132.374 331.088 133.197 331.287 134.079 331.287 cv
134.769 331.287 135.419 331.151 136.031 330.879 cv
136.641 330.606 137.174 330.241 137.627 329.781 cv
138.082 329.321 138.44 328.78 138.708 328.156 cv
138.973 327.533 139.107 326.871 139.107 326.169 cv
139.107 325.504 138.983 324.878 138.736 324.291 cv
138.487 323.704 138.009 323.123 137.302 322.549 cv
136.593 321.974 135.472 321.457 133.935 320.997 cv
132.181 320.477 130.855 319.805 129.96 318.982 cv
cp
f
165.792 309.944 mo
158.623 309.944 li
158.623 333.211 li
158.623 333.743 158.435 334.197 158.06 334.572 cv
157.685 334.947 157.232 335.135 156.699 335.135 cv
156.165 335.135 155.711 334.947 155.336 334.572 cv
154.961 334.197 154.774 333.743 154.774 333.211 cv
154.774 309.944 li
147.607 309.944 li
147.074 309.944 146.62 309.757 146.245 309.382 cv
145.87 309.007 145.682 308.553 145.682 308.021 cv
145.682 307.488 145.87 307.034 146.245 306.659 cv
146.62 306.284 147.074 306.097 147.607 306.097 cv
165.792 306.097 li
166.324 306.097 166.777 306.284 167.152 306.659 cv
167.527 307.034 167.715 307.488 167.715 308.021 cv
167.715 308.553 167.527 309.007 167.152 309.382 cv
166.777 309.757 166.324 309.944 165.792 309.944 cv
cp
f
189.282 331.287 mo
189.814 331.287 190.269 331.475 190.644 331.85 cv
191.019 332.225 191.207 332.679 191.207 333.211 cv
191.207 333.743 191.019 334.197 190.644 334.572 cv
190.269 334.947 189.814 335.135 189.282 335.135 cv
172.494 335.135 li
172.215 335.135 171.961 335.087 171.732 334.989 cv
171.501 334.893 171.299 334.757 171.124 334.581 cv
170.949 334.406 170.811 334.203 170.715 333.974 cv
170.619 333.743 170.569 333.489 170.569 333.211 cv
170.569 308.021 li
170.569 307.754 170.619 307.503 170.715 307.268 cv
170.811 307.031 170.949 306.825 171.124 306.65 cv
171.299 306.475 171.501 306.339 171.732 306.241 cv
171.961 306.145 172.215 306.097 172.494 306.097 cv
189.282 306.097 li
189.814 306.097 190.269 306.284 190.644 306.659 cv
191.019 307.034 191.207 307.488 191.207 308.021 cv
191.207 308.553 191.019 309.007 190.644 309.382 cv
190.269 309.757 189.814 309.944 189.282 309.944 cv
174.417 309.944 li
174.417 318.691 li
185.089 318.691 li
185.623 318.691 186.076 318.88 186.451 319.255 cv
186.826 319.63 187.012 320.083 187.012 320.615 cv
187.012 321.148 186.826 321.602 186.451 321.977 cv
186.076 322.352 185.623 322.539 185.089 322.539 cv
174.417 322.539 li
174.417 331.287 li
189.282 331.287 li
cp
f
197.781 318.982 mo
196.884 318.159 196.259 317.315 195.902 316.45 cv
195.544 315.586 195.366 314.669 195.366 313.701 cv
195.366 312.516 195.59 311.441 196.039 310.479 cv
196.486 309.518 197.145 308.662 198.016 307.911 cv
197.998 307.911 li
199.39 306.701 201.023 306.097 202.898 306.097 cv
203.502 306.097 204.108 306.172 204.714 306.323 cv
205.318 306.475 205.902 306.704 206.464 307.013 cv
207.027 307.321 207.553 307.706 208.044 308.165 cv
208.535 308.625 208.972 309.164 209.358 309.78 cv
209.54 310.096 209.631 310.44 209.631 310.815 cv
209.631 311.094 209.583 311.348 209.486 311.577 cv
209.39 311.808 209.252 312.01 209.078 312.186 cv
208.903 312.361 208.697 312.497 208.46 312.594 cv
208.226 312.69 207.973 312.739 207.708 312.739 cv
207.465 312.739 207.251 312.703 207.064 312.63 cv
206.876 312.558 206.707 312.455 206.556 312.321 cv
206.403 312.188 206.259 312.034 206.12 311.858 cv
205.98 311.684 205.833 311.48 205.674 311.251 cv
205.384 310.827 204.987 310.51 204.486 310.298 cv
203.983 310.086 203.443 309.98 202.862 309.98 cv
202.402 309.98 201.954 310.074 201.519 310.262 cv
201.083 310.449 200.697 310.706 200.357 311.033 cv
200.019 311.359 199.744 311.747 199.532 312.194 cv
199.319 312.643 199.214 313.126 199.214 313.646 cv
199.214 314.578 199.472 315.313 199.986 315.852 cv
200.499 316.39 201.386 316.841 202.644 317.204 cv
204.774 317.809 206.443 318.644 207.653 319.708 cv
208.862 320.773 209.686 321.819 210.123 322.848 cv
210.557 323.877 210.774 324.959 210.774 326.097 cv
210.774 328.928 209.727 331.227 207.636 332.993 cv
207.653 332.993 li
205.972 334.421 204.06 335.135 201.919 335.135 cv
201.204 335.135 200.491 335.047 199.777 334.872 cv
199.064 334.696 198.376 334.439 197.715 334.101 cv
197.057 333.762 196.44 333.338 195.866 332.83 cv
195.29 332.321 194.792 331.747 194.369 331.105 cv
194.115 330.779 193.987 330.392 193.987 329.944 cv
193.987 329.678 194.036 329.427 194.131 329.191 cv
194.23 328.955 194.365 328.749 194.54 328.574 cv
194.715 328.398 194.919 328.263 195.149 328.166 cv
195.377 328.069 195.631 328.021 195.911 328.021 cv
196.624 328.021 197.164 328.317 197.527 328.91 cv
198.035 329.696 198.669 330.289 199.432 330.688 cv
200.194 331.088 201.016 331.287 201.899 331.287 cv
202.589 331.287 203.24 331.151 203.851 330.879 cv
204.461 330.606 204.995 330.241 205.449 329.781 cv
205.902 329.321 206.261 328.78 206.528 328.156 cv
206.794 327.533 206.927 326.871 206.927 326.169 cv
206.927 325.504 206.803 324.878 206.556 324.291 cv
206.307 323.704 205.829 323.123 205.123 322.549 cv
204.414 321.974 203.292 321.457 201.755 320.997 cv
200.001 320.477 198.674 319.805 197.781 318.982 cv
cp
f
227.607 89.1855 mo
220.73 90.5581 214.408 91.7871 208.491 92.9116 cv
208.496 92.918 208.517 92.936 208.517 92.9395 cv
207.162 95.7393 205.106 98.6025 202.951 100.765 cv
205.023 124.485 203.157 144.513 201.371 164.99 cv
182.506 174.133 162.378 182.533 139.715 187.979 cv
138.625 192.113 136.573 195.49 133.695 198.23 cv
133.541 198.25 133.385 198.264 133.226 198.289 cv
129.749 196.65 126.917 194.203 124.441 191.289 cv
101.473 193 82.8867 191.053 63.2178 188.4 cv
55.0576 169.663 47.1904 151.006 41.9199 128.923 cv
36.1641 128.157 31.5 125.982 28.0957 122.229 cv
28.0859 122.122 28.0771 122.015 28.0635 121.914 cv
30.3047 117.094 33.8076 113.232 39.2051 110.862 cv
37.5176 87.6582 38.7949 67.5303 40.874 47.4219 cv
58.8535 39.9492 76.6855 32.7178 96.8916 27.5078 cv
97.8442 23.2344 100.757 19.3145 103.571 16.4614 cv
101.904 6.00879 101.055 0 101.055 0 cv
50.1152 9.07129 11.4395 53.585 11.4395 107.132 cv
11.4395 167.231 60.1602 215.951 120.26 215.951 cv
180.361 215.951 229.08 167.231 229.08 107.132 cv
229.08 101.019 228.576 95.0225 227.607 89.1855 cv
cp
f
177.447 42.2002 mo
172.164 42.4668 177.782 41.2871 180.127 36.1299 cv
181.752 32.5547 181.101 32.0674 181.101 32.0674 cv
181.101 32.0674 180.615 30.2783 173.953 33.2051 cv
168.124 35.7627 165.015 41.166 165.015 41.166 cv
165.015 41.166 158.005 30.6211 143.378 38.1436 cv
137.586 41.123 132.515 46.4639 129.021 51.4365 cv
123.695 59.0186 122.036 65.7471 127.083 61.9629 cv
127.851 61.3867 128.404 60.542 129.021 59.5986 cv
130.422 57.458 132.148 54.8223 137.424 53.7354 cv
140.558 53.2656 142.826 53.9346 144.161 54.4414 cv
152.144 57.46 149.645 63.2939 148.236 64.7051 cv
146.746 66.7412 135.023 72.4102 131.262 78.6787 cv
127.502 84.9463 144.212 89.542 144.212 89.542 cv
144.212 89.542 143.906 60.29 162.182 66.9775 cv
179.316 73.2441 158.84 87.4541 158.84 87.4541 cv
170.903 87.4521 182.049 83.5068 190.332 77.959 cv
206.756 66.959 213.877 40.3623 177.447 42.2002 cv
cp
f
107.144 132.25 mo
107.707 130.315 108.622 128.538 109.444 126.577 cv
110.716 123.598 112.578 121.26 111.1 116.869 cv
109.646 117.043 108.188 117.226 106.731 117.394 cv
105.265 118.864 103.948 122.045 101.471 123.598 cv
97.5967 126.04 91.6885 123.939 91.1367 119.487 cv
82.2432 120.71 74.3594 121.905 66.292 123.678 cv
64.9531 124.927 63.5557 126.838 64.7314 128.939 cv
65.8838 130.988 69.5469 130.224 71.6338 129.666 cv
71.2568 135.058 68.7939 138.822 63.8047 140.622 cv
67.7832 152.693 72.7412 163.518 77.6475 174.4 cv
86.0322 174.723 95.0586 175.205 104.055 175.26 cv
101.894 167.56 104.865 161.67 110.995 159.502 cv
111.229 161.817 111.508 164.35 113.119 165.269 cv
115.517 166.633 117.873 164.256 118.449 162.228 cv
116.712 152.05 115.248 141.502 113.52 131.296 cv
111.229 131.404 109.02 132.297 107.144 132.25 cv
cp
f
98.877 98.7217 mo
101.446 99.835 103.924 102.816 105.583 102.965 cv
106.23 103.026 108.372 102.167 108.833 102.4 cv
108.659 100.998 108.493 99.6016 108.316 98.1904 cv
106.331 95.8281 100.907 94.1689 100.402 89.3496 cv
100.097 86.374 101.918 82.2041 105.663 81.876 cv
104.981 76.417 103.633 68.6758 102.574 63.2305 cv
102.177 61.2109 102.035 58.5918 101.344 57.21 cv
100.743 55.9609 98.6084 54.8057 97.2666 55.0273 cv
94.2607 55.5176 94.4609 59.8076 95.3311 62.3857 cv
89.4121 62.1494 85.793 58.9404 83.9307 53.4951 cv
83.6719 52.9258 84.1279 51.4404 83.2354 51.6768 cv
74.3594 54.7793 65.7646 58.0889 57.5352 61.6865 cv
56.5938 72.1807 56.04 83.1191 56.1387 94.0215 cv
61.374 94.3037 64.8154 96.8818 66.585 101.603 cv
63.792 101.851 60.751 102.648 60.4678 104.744 cv
60.1621 107.101 61.9111 108.161 63.5332 108.953 cv
72.1182 107.946 80.8789 106.315 88.918 105.348 cv
86.9209 98.9639 94.2832 96.7402 98.877 98.7217 cv
cp
f
166.885 114.237 mo
169.611 114.627 172.968 113.432 173.168 111.243 cv
173.357 109.062 171.335 107.255 169.643 107.095 cv
167.858 106.912 165.273 107.63 162.931 107.926 cv
156.598 108.698 149.762 109.988 144.917 110.94 cv
146.29 115.93 141.265 118.171 137.532 117.869 cv
132.13 117.421 131.002 111.976 125.553 114.606 cv
125.662 116.036 126.141 116.996 126.199 118.48 cv
127.623 119.978 128.863 121.522 130.253 123.061 cv
131.589 124.537 133.281 125.96 134.185 127.953 cv
131.919 128.154 129.911 128.564 127.81 128.907 cv
129.24 139.607 130.907 150.009 133.043 159.783 cv
134.185 161.409 136.944 162.697 138.74 160.979 cv
140.3 159.515 139.468 156.547 139.07 154.606 cv
145.951 154.828 150.398 159.118 150.751 167.114 cv
161.248 163.96 170.912 160.173 180.658 156.44 cv
182.144 144.859 183.003 133.191 183.448 121.389 cv
175.949 124.282 168.398 120.764 166.885 114.237 cv
cp
f
14.6743 224.169 mo
10.4028 226.64 li
10.0044 226.872 9.55713 226.922 9.06299 226.788 cv
8.55713 226.651 8.18311 226.371 7.94092 225.946 cv
7.69775 225.523 7.64404 225.057 7.77979 224.548 cv
7.90869 224.059 8.1626 223.696 8.53857 223.459 cv
12.8091 220.988 li
13.2622 220.733 13.7251 220.67 14.1958 220.798 cv
14.7017 220.935 15.0747 221.22 15.314 221.655 cv
15.5532 222.091 15.6069 222.557 15.4751 223.056 cv
15.3394 223.565 15.0718 223.936 14.6743 224.169 cv
cp
f
40.8052 261.453 mo
36.5356 263.924 li
36.1353 264.156 35.6899 264.206 35.1958 264.072 cv
34.6899 263.937 34.3149 263.656 34.0728 263.232 cv
33.8296 262.808 33.7759 262.341 33.9126 261.832 cv
34.0415 261.345 34.2944 260.98 34.6704 260.743 cv
38.9409 258.272 li
39.3931 258.018 39.856 257.955 40.3286 258.082 cv
40.8345 258.219 41.2075 258.504 41.4458 258.939 cv
41.686 259.375 41.7388 259.841 41.6069 260.34 cv
41.4712 260.851 41.2036 261.222 40.8052 261.453 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.0%%For: (Sandrine Galia) ()%%Title: (logo eeudf blanc.eps)%%CreationDate: 7/24/14 3:00 PM%AI9_DataStream%Gb",KM*ft,oC2JUH&)$bK`])rjU5`p:.cH4"aXu<C(^Ut\XK;*h'`'fF6ng51Qk4N%`%>sQ@rV6?&nGg1m7!eA/5r$Xa[T[CS'Wk%J#oPB5J:gB7bWOq="Pr1Yje`;&9`hJ16-3snD*OiY3T;+'7R.obJbeG`Z6#P'j?lO,Ad)I40;--mH.XG<i<R$>0--aa/)s&/@@Nu%TU5@.#/ZaQSEneleX-6S8_@0AF2LMPFY)7[mKR=_H<U4t_)on6]jD6ClTlhumPNjA(E^0-ioe4`f)op&lY-QnjEH*#&a'4glEg9E%+Dh)V<sP1A>*=Q"_FD-YoKk91`r->?@7j52ak/tq.XW(j^g1N;O`<LIV,qN[cIe)dBl857Mn(spHoJr+c]W.>W<p>k_V`to]0W:E%m'XFfEk)"SMO^S\Vfu8?1W1_d1QLRCC!Ki#0J,dY5Np_:cKf)E-V'W]nKibB<]-sG.nuj>%raE8nR9gHM/X/NcGCVRF0"0deQU5j%ZtH=-YTDoa8(`YZfP?8eUXgC#pF7u#N+"CWB\H-9_fXA!"$_$^\sISWeJ/_t->=Y-Ceo^i=JL:HK"XqHXO^W`[5lSjm.;c_C$#p"%jN;@aC=R!+>ncJ_(GV#1(]3*fs!>]>pg,UiWY'cWj`_q1L6:.PPT:a7KCCaN)U+]^K.stqoXp7nJZ1u_$_Y2rH0Ju#+6hRA*m,F@%Bil."FWC>EqtN%@-`CV8GK[k$QA&*d90OqmYdJ</3/HZUpm^:dQK'*Rj-3/(e+XHppCYH$J(WKL&^0n\$\-$sLm?:2<^)Qro6G_H%cQc2aKMP5ea2-?'&j@t6A/iXqjB(msH^%=2,s=bfJ6rlra+Re3$cbX[Q-XD;p_@df7/.M;9f!sIigB3cre;Z7Y=M71PGF-^_QPq:%r/OSn'D<kf;tc8S3%k,d32I8)BRPt`3QH.UjXf@lfi!i8E\D^)]ZK#mF'9g*OT,k"a+n#aP$C:5CACQ+(k+t+*$;;eS/']ma+n$l%2]SAnJ,CcV7gOQ4/0#a\Q)c=07*_k"++#7N5gDrMB[%fPEn1gqc5Y#d*4b,O3L>-8IO/Q/08W!p&-k]qP)5sOeoK:2.?4qR,*nI3%*1r`7fbV=H%ZW0L5a"jQ,A0dF+JkQ<Qt1oH%69c<,%Z>tK%<oH]Au`4]'NMD)fe\(6=Z4l,8Tr)WQY#+\bmg8Q^TA"=g#<*)bH_K%r^lpFZsC+3/WdD1RRQf^ahF!WP5@fLY]V3YV!68Vdk"#TJ/ls1@d@\cLf`T&qNZ/69?%D1&&1c<aOEH'PY\%BnfR&cpZT6eQWgV1%$&QC>J$(;OO1reeSgT$^4R1["s0>f',l0.nj`9qdke$bZ=st(1,l0.n'oVYWke$b*k^V$Pj4`Hn\ZYLIqFuEonX2Mcm8BX2o/Yc2%=IGdr2f#O:Y+2PH@^Cr`=8nG&2)&_/P#$goY224'ch,QC$$c2n>K.T@pZ%Sl^kN+&>^kt7GiBb4fDG&N]@6&SGFGG3e7,l?3XO8*%*K7t_dX*?K_b+hr^%_fG[5t^5J<A7Kn!Tj"?Fl<V@0M:E:-."kGL+`.X]?HU5^Wcu><;ZaSi"?l`5I0c9NQ#-Vu:K=8-?V&;+LLL%ml[/ALWsRX["lLgP<!9HTShXUeM)E/`4N<f5Tb7-:"1$nhJ:8?PE%4g2d3oKW?,<kl.*AYg:)O:nbq`*+[SuOh(W+tWADn05,d(K%YjUoM=sZJ,PmDfFhnb*"pC6YB#F8@P6mDCVI")p]>7&gE8)pCFYB:f26N8$F'S3D7<<uG>,"BRE;mH-]XLHo#,d)VlLV:(AQrB,(%?Xn>">u,7\.N!fUI]XEU\5oB\l6;d4!(H+bf`d8tW*'0BW<^\@P8<Z8OmIj2C\ogKeK<&/+]biDO?+rE^8$\hL@3&F"qr%:d]9EM%=DseV2.M]V_3i`f0<BeGq>2g%/V!ecY1K+lrtX%6"h'Z,":f.@REef2+&\RWE&U5EI<)0#aY.oc\)`e?&hdB6Zc#I*YlsL/:s9_s%`GEpTH:>=,'^[(t>",d=MFO:=-pjSg0B<JnJm\"F"h3D(liJhB"gbuO7_Y*?jpM_ljmq*;TD.nohT=MtT""9&T&kr:.9F_.Ed<I.%Z8k/4jkQAiZZA6Ajie^f)6%F$>Kdkgq.pO-(dI=th5lgJZTN#7bq.$VI`X8>"[DJ=r%%tpT'uN9Du8>!I+)`BiK_'M=7GcecHCOJ%kG:;mF$/4;T&l@]o*i+h(>XS3GB7ZQoj&);/'#&'mTQdX1=pJ;:=1LMGphcc*T-B,(ZJ0DiK!#e%WdSn?*]B3_9Udq4)=`%B=kSS%JK)'MgU*Acn.IDF!^o75T&i01\-oj\%7-W*:!U7WQ)p][Yjti?b$)O@V(C5=/DK.q!Ljk2%'sI[c%;?BF(X"q:![oUa+S][Zll)R%VSPm+a9jKEE\,C]jtW2_b\!AJb_0*J8/\Xn#-<N@1LS'.(pi0<^mG/0%?+SbUl=r_ENTC!JTV@T8-9PLLT-!f(aR^-1&7;fWdfe:%\Up,^P0W+iCL/3h-46h9+L"9XZm`@2\1"p:]I:KB^aR&J`$iVRa=,1ZbTP4+&^?5#X?j'h6FLr%^/;aE`_jla+mCE@..(814N]cY%4ame_q^!Ec71h*6`@$uR<Bt+\FheO/*pA8-oYM3OJ_IqoL0-c89VEp10nd9*K[(9chS:Kbe0cnK-n!Lm.o])h4RmFAa&*p_ICT,U%l=8g$-,-Y:a,#4c-2@S8fM$PpW!Gp6-jp9VEBne3d%W();]\D/oLcgu>%WApER6`O[*Jh+b^qb8`V>@?.;OI*R\6iHCSsFC>u4u@%<#IG((eFbj]p&W@"Dp(`lT&WCW#F:h&*uS_A12_jdUK@)pg_+O"[g/c3I*P0`p^g(jMW#Q@+nui@4I\4=:6GoVqch,^npP>dcA?j%6@sh?#]#8IC5Nbg.9L=h/A3Q%!C\1_"9b'e+=%1;8B;Fd'Zq36(s3c>*6K>F+NbnNUn8:Z.Ha[5Xq[D#qP\nBKCE;I%iNSSVN[[F%(?h_,qW`[hqOkS`R"YTt?\r4"BnDLh:j*).h?2lcJe>dU/\mH?V?,hq">dm1>W=1:)]mXm/D-(IbY8Zd#O5]*9X$>n/<0gu`rd!>%"]L*F;LfW6E<D/a$-%jTd/pWZk0!i_QK>XkLfQei8'*[)d[=M5!!d>4"#eL.>6os%XC<4dTIAsB!/#!;iC#^bQr+[DW<YmMM_"5V%;kP7%0nBO2?=4Rc0Q[QNfTA0IfOl;-1^JkupO^ajS8;\SqLme$k`YG0pn@b`#bqsC,#e2h.&/KZKH:k]8/K7n)+(Q)Zr+?8'Z`4*%36F3Q3Qel[MEb5em5^l#;W<VEmND0NpF,hcq^DC_VZRV5<PV<X/b!=h/p%-%!VN-7,Y%&%C'El+C'Nr-Ba<o.C'a*\d#sVI%gAXV%73QJF?'nH49.17KN?bNYe/ViJPFU3rJhT>1VCAlB_CeDKZ@pbkb2`hd-5DD;MNk+`9VPK;;D"SI.:G_`X^5uNMlTrh,thr(,8DHr%;Mlcr@NOXTUE#/3+p/trGJ_4kNC>@UG#hdM['e?98p`'?0%jKDFij&$bF?r"\"J_!h#)a)<q\IiJY`f&$TqgL;lK:47[VE(2T!<8%(PZbq=::W;0Yh4JV=Df'bH(!4V/<B5m&dY&d`ua-E2p"&q@qIM`\S<D#`E7#_e8f)K3$V>+%L]pn\HAO.C$Ws$9>n_=:`o,0gd]a%apZ>4$0fNg=[X,n.7#t6KWLiRTY+AU<Gl@r3'q^Z12IV^P8?Q=@YB?o$XlAAElDeI6E%ET":="<Vbg9%paCfs+@@FuC+*o4&/\K)%S0PsCb`NH";i$hb"HZ%rBF$8V5VK=gbd_,ZIRZ+`ft,I8?>;3MD5OV-.;:\/,j_K)='<h9m3M!hp6.&+V4pt(7>2aV.8q^UWALO$%TLtD_$HHkR<tKP_+Im4B=]\t??<>c]Bk;Q^8?++t/JCc\&gk(9>^B]nhOJQX=lK!9@=hcnL)gjAE:K'r%\fASK&oYY&:R6)(.AgG%'P,iK!friW6*e@Fj+mWEqBLTfPd'?CiVI''53C4INI6]KPD]B\fk4,>+?RfW[baN0[*SJ&Y$j:N<P7CtbSr@F.rP/#"8"J<!Qaj0%==SSFMTS'C6Z/eB1BUenD`[_'g.6gSpu-,10t8%)48(,3"'/*b*]Y*7':uW:ftA"gdEmsEoE%-e\?YM.3/PgT"9ips!0<_E,c,!B%q<4TGbJ4]*e;*<X)MfEXMad4kC4*;MWaa=tKqt=W<HF\/ROG299JlKPF!#Rn&"D"OCS$X3'9X;08EN@IH-pG71n.!^QPRj.RhGa?%;e!Id3T%LI+5"7(n.UM6J"p-:09g:%Z<[#XV5\rN&Gu94gnhRU,j1<.Pob2p<Lt1`>Wj0N3e.1[9g`Ar$0q!nV!=^/_38_K%+f"K%]4Wg*\?Eh<cI]ZMin*A_j&Z6[T'#:noS643\glY,%TGlj+hfHVkq`/p7!ScELu/X6]d\Ee;\8<mia8@)$NE?UMtJTVFYL=`9*qa5%Ds97>*!$_"1/S0+-Z,=j$QQY>Q!g7+gbN,#dE8+P*!`4(jY>8@(IPE8!jAK=5nYrsZp[u=`q)J='Vl^7/2P1l7ui_cNJ#2RMF"uu%*;L`U`qY;Kk`9.^Ph2cR)DgGb=<+^&ojgi\_^s![Y]:/l]o;&,8VPlYK>lS'Bm`NZn2?_pWsNR0EH,7n_t)oh!o&HB,"]EmLthuM%_fc>aNZc]&j8$,o:UM,HMmXN:04rkresGVG0:i_.&2rDXgjh4@4pU'*^nr\pN*n1=nZ8/u0B69F4Usk3b@@I[ar$R8#`7!F[I))=%^q(GmWBoV_LhD*>$8](/KuBF>PH_RN%eV*e$1$WhcS6mPMRj^;B+3+tF$iY_\!Sa#i)p7_l3p@-k5/kVJ_[3_Ri0\lS"^NpNe*^Z%D4!MH<\tcuMDZAVG_gUlY/"+;b_$Hj(]8mrhGnuB`*e40b0W-01$qGh#7MH.&t0[,@tH3*(LWOojVTD`*8`.2Q4:lb@LWRo(0:Re%*bN1fs4i]NJ1I<9jTm'3LFX*,2&cXT[;2YZ8^ZBPG$9'$K1oIs]I:W(E_5_0GT<M91s&5,niR_Tgk,H&oE2/Q0r@7u#Xh.^*,@PE%(2k*_EQ2XW/**&oSf4FMeK$1M,[GHE+j@6":)'WH"2R5bbEXTX)NFj;)NI@l-O_C@:<CAWPAS6Gf1@LkI%A`H-<rN&:bJsYOM-!O%Y94k9TQ1/ZF'+I1*!_B\*G;^5H>$R3FBfVl3#TVPj;<RQ[98q,R^.d3In-_`$q=:,*,@VG(2nPr6CE'33b')F6#og!\=Xc'UiAs:%RM-OH43[43=M4%*h+!%a)j.Z6?OL9G\9]ZXEOen_LpW:Q"Y.PX0Gg;i;+N^uEZ?X]'H).d.`uEBDf!Ntq5;)H:HfBB8;PRNlXhqd%KN30*"Me`c"NaIUrdXZhWh12cW5ls-,+;j2%*gUL,g0oCK@-.@W.1kNDkgn9X;JH0"?%ZA(aO,.=;,DG:f,L^gM!u+SU!P2*".56%TZ._C3*7Y%_LVq_!aM[//d.[7g:RDi*!f,@mK!IlZn90g&+X+#j-V4F/<:HML$?1GC<es2<b)$QVbY3)0^rtOidc*ie\%=6\ciZR%F9$t9JX1[dK#G'I*!1E*Et(Rk8%5*,"Meb,_bsm3\V+bOMHehc-q%N"mO<T*"6`AZ%Rc`/OrQ.tP#VX2)9*Xtid,(J!9e(2eu4E+%4P:_G%9r@;3Y!`(-B^1g3B=82TXK2^DJe"p'[U<dRMau?O`UbodsP;iX`1OUWIUp9$KsK,jj8':^ioD9!p:1%^O&AaFVW891blED%SOrtI`=0WVjiep1jo@^K"_%sCrPQ4V\iF;'C'qMY]+PO<P,?uaE#aFZ@5>5sgpH1Q0R]^9\[EOq^/`$ICcT3u"FP)#&0iM*oSKj*%\?(Xm`EjBN"PO`W\Oqg"#=\\Z1e\Mk"!W'Eh>tG><1r\/<7<%o>a0Tc?ATG:L!ia"/DK,eA5.c9j`/h;C"`pXqkgEEkbKL*(Q>l!%AAe(FTelbV-)/@1:I.,2RVJic1MZ=9HUf?Kq+>*:%skHZ?eeU+5S&7oUTp9%!cl1ZXFc+e`-N<UnRr'p];Fn=9Q@nrY=P=)q.^@$%a-AnS_eeHK!Lj2u^t_t#A%(hU\ipOe.t14IpCmqZ4dn'/XfW,BP*<tTQ6to+p*RklTVJ+Ga!OL^/T(H>@9,YBFVFr+e4D?l8H?_2%%"QNBB`t$,RcE.ABFugR>*jeOTOhM)Wi_3=kAV&%?g*9gTd,I"?or*@!:4Z+d08KK's;=."iNb5"S>qs0Jm''^phD+Ga=R^f>\)!%iHeTdO[*g]e.jU<,QM5L/[Zs[#(SCGh?X/&,TGi"K4tCYk:7$1RP04'O/qMWN`m8r4,>q,dk(kcY_ZK#PQO2oG<(Z++9Jq*0F)!H%1]beJ6_NS%aKMuNO[,PN[+pDXF`WoZXZ"Tq!78&'RP![S"Q\W]4f3o=1u'h8?k$J#&HF%+.1DpR6E]b):cZu-?tC%]+Ifg&DGYAV%SW.?)70<5KeBC6YOd;An=_.C`*6f,tP6)%E\X()iCl9RYQ-KkjOnn\kXpJ4E9A42b7)0m"I4hJ-jms<fZFQ#L9d97@"t*Z>F9_L%%d_@59QeC*C8;Zjj!4K;ZH4#CFO\gk(*!LjuAs1_*OtXa23$36,?JL1E%PosChlo3]K./m7#g"oG*5e0G>-=d7Z;=.=!H=>?E<,7.%ljUS?2)Kqp3Q_%'CFBL>Rg->7Zh4sp)HstB(RG/V)foCT^bL7pUpqhVWU@R:W^$R$<DC?'WA11c+OJX^$R6UA(lZD!4MELeSi%?,%#r>70LNmm+,QQ-.VEbe=@)@$qY&/iN-6\[eS0ZD0.Ls4D$aOJh*Nj@tYqhad)>>9TP<q"ZBN52NHueW,\3j34dD-CIZ&&V&b3/k:%OGQ9;BBqE"j+1Ui<pFAOdS>'!juOd^S1t*)*\b-*4Z*654?LQM"M1,#7Kc'kkSYGP0T:L;JELsA)K^rO(qFk1:#`srZkJE7a$GnT%R_tp?7Nf$OEBr.jd.CQPFDOYoP&USU1c;`P#a8sl!L\UlQ]BCd"G1,\$ug=@7+O7eTCgh;Y"R`)C!"^2Hh)QB!\.er!Y-GJ@AD)2%5Tbo,!pD>7O=mCd)G%[QJAGuG6pMZ6"I^Y^[\Qb&+F#4g$+A#7!H&ik$7O=++9W5_f;0X8)3A%@!DoMip#IY15r21P9*!?.akDX[%OTJ]%F_,:+JN1u!'\H<gK]gD2"U3EV[$<i8*;HlJ&>ZktDer2e&&;1jS>@Gs!@1\7R)_&bf-(44[4%\Bo4<!d=$U`TS;':8"MpBk%)PU\=hp>4Xk+B)aJ7/A(RT\>!a0HlQSS-(DI1[\R9Lf838CJsbE&`R0!9PUsjs'@_+H+ofhrb-$U)n]WOWqS_J,pX?\JD^5(qA'A%gr,=R#XJ0AJ>Sb8KPHS4U&?SoYXgVd?]6DCS<=F;1,].R,2epNnU+!mN*NV@`)0::-VY2[21-#Z7jj6Z-Ha'>[1/aID;SF])\/dk%D:9agD,[p)Coh4im>jX%<BT]ETl=]DciFdNU9l,\.d?\-*\fVU,bS^C#=gsM3NWXFTT@gmO9d9#J=,%<M$TFRGUD*Ra9e*a6SLGu%E=$!.,tJ<Nk!tUX@><2H*XbIMD#830P!Id]V@j<7$#lN\Z-+RB5d1`>\ZTfNfJ0bh!]a:,>TK!nA`,9f/Rj($lZ'$tNbK*.Ve'(d%-O=g2^#W?1!UNIIiOXEt6S?\0fecq;,aD;[,RN*a0gai"QGCU5l/FbW!YErjk@,\`Rldl#dT?)U!.(g2;cetn",uG<dV`,:,(L-F%m-m]I_DQEhV_ubbSlAIC8SK^g^_7naR1/B)e7p?n]ECR^9gG$PBF&d[aPejKS[gX+];adZ!('<:OIJ"^J1%B];X/ZJ/Kg-PG4&Kg%=$`LU/Y&`X'=X77;jCZ0?rV%Y+dj;N3#Ro"Xmcq.]amS&4$!uk%tp#AM.7LC!5?=3H=F<0^jHIs-rBse2[QEo':b#][38O"#m&]K%>uFM]Oad)`GKHSi(sf;C)sLaI/.u)YJXEV=5XahZR]Cuc5V32W9*nu?fna$8!c=4kEp:Xk!<rbQAjcNd(ca&8(1dj[Um+%5P7m6J%iSk+h:aF0qXopeG[[g+g.050*K,DMcVP<@;28Q&@RKJFC4Y2CY*&&u;QDnh?KAm6+MG#':?@>>4(s/mG67XQ.!pFW@&06tSjg[>U%6FE']^]A[:i>-V`!L+7M]IK6+-'5,E*;::U9`RL@RMsM\#a]>"-q4Ibr_@KAd2_)5.]8./)/Qif!+;tH::*r[j8mi],J@$gnlRG[%Rk1;VFdc_HcROI*n*9Dl,Qb,=0e;?M!4J_^OlcXB3+@f9'e,`iNCnQ+a=%0&@M!<CkXKO7"P1F@lH'YE#)1&DMVJ7]NX3uuE_SJ"%4/H/C4?/R&#`l$tdM57_9-Zj?ZtOK-bI*0/mB(a_G<l?:%bUreVqdS0LE"47!pCL9A]qkj!2I,gVpZ(U3uDPX8r1?f"Bm^+L=He<%oILUbgN4YA3]6P(-&^^9CehL+5sV]_3\63I)BCK6VM_BLM6&Ai!"%/kJ^?,GJ2'51T\/&Kp>=IqR:N=s0IOZE:Q_t7:.ehm4:V]B%C,,kS)@j;tb@d8oUO<E(3Y?><(Da/NFeud:Yb"75.WurBNh`B`TK:4/Ak%CtT,Y'$ks.HkLJc_i#U8pGm:d8F5f%$d'`X'7:'.CU%aCV>@&od@tV5qBUD&:!d(]\Tt(!m$`-LpeG9`S3i$b/0hK&ESj(_]?Z/R;_]-+8DFbFlWY99+;J5'!hnAr%uE*U[H081[(@BorBn%Kn@KoSg90o!kC%A7#1m$-6$B&Tj;,rg=5_m3VNrf-Ec,8"X)@].'jXRb!8qq9E]`KT:gI@L9B!H\RQb5^-QL!To]C=g2OQ"'bP,B%Ji!$Q#\5unkAl2P&n#D,BXTW.5bNs"]2EUnD$&-D(md>YOoQ85%36#'ksepuO+bt.TPH8;oU_KRL.+ZS:L`-H!?FdB\_-Hc5guN,%7\jDtejV])n/*d<Mg5YC6n+(q-P>0sVaTD6jCU@23i3qu7N$7]2_e!u4eh7&2W:*jRW+I;"LJS@"kj<I\CtHhSr@UgBY-sM%o'k4%Fg@_.1rF^_oO=AV'f[N]kjg#:4L#n1#elgL"B+C+PqE'`FBtX,pb_(4p'?un-icPOUBJsj+?/?+L'W>&,J)%,10Y\3Xu;@BkeuUa%*5RmC^k>3,/pbaI!ctcQ)q,$KiM?Aqdo2X6F>61M6?%s==%U3X,0Enk?3$tsX26\b!0SB<J9$qT"45ZsEEq(j,qq5^LI,AOX6^$.%1KBfQ)Ba"+_G!pu"Knq&KoPuC&l[G"8_8*LN$/4W"PU/WYr'G!!?*S*KHaea/nmAG$%O28-`<jD>>o?lW9#aN9iVn,U*1'K$<M3_%AF+sP<,i.3aX<`k;=_uBl"^>7EC\K6LZ`b3A#c=.JC+pA.pmg$7N>5uLq#A;L5*Kch,W"FLd7cN-<N163)"6k7]M?`eQ!ha`Vde/%UJ1`giQLY:$51:F%&.MtHF$A72PeN0gI,p39*,Uj]6Ld#,(<#g0YHg=`g&P@@o6D_C/IC7F_Q3W0l=e8ec$SdUb\hN+=+1eAPA0/%e1R'1'"gJP["N1n6VjLF:#(@I#(0]cF@\ShI5H_ZHib_7HH8M^#!AIB8l'uIL.+_3E\,[uR09Yp)A?%L$?sJb$jebUgZ*&387F?O%KneC#AH]BF23fe^H8g`%QN6cp8JETX2pmn9:5i6\1mt1pl<9]i^s[S&>jYukWh-XH9P-U^^s[eEa!(T3hAod<'P`9;'G[X:=S&?d%h1_e*';1]u:E(,\&VuZVV+2l0AQ4-o$:Y/'>m+S\$m1%*D\-p!B<?\*ad]8n:V<R?8IEBBYHe5!8sadu$>;r:V6jg:%6uFE3@%C6%Eddk;$AnoK4%*'oPR>LRbV2O[Q`X';.Cp-_V)L$MFV8A.&eD7+`.@AU9]B/0JfEW5QGWhZ$50*2H%:Ft99u-bP,lQqRL?E4P'ka@%Jcp/c!Q%<j'fZQ]*TaP"4Ma<d(1m@Ke=G!qN<D$uhC*/2#i[Zqg)Sdlh]@cjlg*]-\0n7FNYIPqdm@eRN@.9<$]//%M2C[;+@d>S%0aOf#?UV?V_6XDN+-[^aV"5FZM3+n6K?Vf="<ialH7k)q&h&',oApVdgL>J>'Y=@t<N#f*/p!Gj!uZANRk#W3&@gTDOE>W*@-_bD%_)cl#.U<j]=[O@*l,_@*EorOf)iN\9Ylk*74Bcj3rM:(9RMdL0hK3F=/h%\!Y86pQ9"pCc/cuK0-3B=ZEE*lF>_>@6]Vhi][Q^#s%'6,.fKna?0!0!XfH0c5q*^gYuhdH&C-4ii:*EVA"J8I8,!Hti/`_YUY\B_u)%HUC(0-6s`,*b./QWJ9sbN&,G"BtXET-_c6$6ZhM%WJ!g`4cHD^R:>Pi![2QZOo^tjaL@RI7I)AVqmp_\>;ADYr7IB'8g%-k#%T&1VfR-h<<C-HM^.Q('p(>t\.hmd&1ncD3H7<2d:a\g%/&^IkPhAO&'L>!R.RR8%/;T9kB/kd'OPOki)\'+`,2cTt7mntPk!YJBcdZcNmG?@$YJbSY:alEbRBH]::"@^hIfU5dnC50)\]R8m%!Z2rOG#`"/5XrSiYJgLXL(<M@Cfs`JpJkr\Xp7d8NThFjk)@/6Yq<,/\iO@uCN3TE3F(:a5YQg#R&+Qn!/-$R,B;bP#*PCNh*+Ds%Bb-lE$SNkh[%ed^h@Z+bc_<_aRPhLp/:1iPs%ONEQT['OEYnZe;1s&/TK&9k`=chTafDD>"b<a.5Zk09MQ_[MFQ1AlA]+Zge\+Ho%ciSh@EFi%08>l6F.@[-];EG1Ue^lgCk;o&^WN-J=\4(%0H$!#CCgio#&o=ch!NPs7Fco`)4d/PbW;m"-ZI&+VFAh[kr.&:c9O5V=%%UT:Vbm:i_]#83;K4EX0-lKsR<_oG[6p6<kd+#n<KtCF#N`)^9\'3J7$WfbM*32sGN'Sm$&\(f8FB!5cE5g,#;YUNrpE?8Z':]r0%l$WghLRps35nn_l&1j4P7Wo%ToCPn"[7Q!eGuXX9"9sD;W7C8B)?L(pF?iM4L^lJE+s@"J*H[+j+j@#I\Lu'u"cEkSa[7XhAYLSF%**nX/n._DLj2]=W$HOX]VQ@YOS64s4l5Z))jeb>&GtRBj`A5.hMa.t@RT]%(/08l^+u>Ct=D8k2:BDcU'@fZ+Y4jHW4J=*Q-IY`8%1PfdF1:),F$jijGAmB7[+g*lI($2\+oZ?GdL_Fb>D>Ms["r6]82#2F&jucZr(Ns#(?rP_"A/JuKogh,(+G#JH"+Z(M@t7X![-(<j%&]?PK6%hpjfIHN'5U'SRcEJ9Xab(<g"@jQo;4EH+!1!j]$7rRs@_&G]<2UmFFCfmA*@t4n381ef7,&nC?r:^+e$0a0.SmK"*E6#E%D!OpbS.]lCqH?rO*Lg:'!)f13l!h;-80plR&nlXgjLD5d!)OY"<l#U>0d84SR$)rA]0g&ndm=8`WY[bT9Y8p_Ug"SFl6ChVDXJ.7%B@FCnhplPRgn:-8^?K;4^-2bf@/U:\5"*nB5t=V3"Ob#k3ajWIq"d1=ijGl'dGZp?b<c9NHWHrt9P'J/03@EM>2)@H>BE_8<11l9%*(chPVeE:u[d9uT)h9!]BC-_=Erbi<S&WIIoYU-_+O-<63)+L_:%suj;f7-fd+6gf*/B9g);X`Me1ELK<hHQNeGd&@a%C4>'WqF&%3'[TTg0#1i7[Nqh"g,UdUcTNY<N]CDGI`P1SY6X.__h[Z^<!!+-BJ>!%a0dCQkl(7A=C)OK,ejAa<rI`$L!iqe+Y'gqV$eYgJIHL%due[74!\:B4`A>T8cX$>]#,i2<[EcbcC'T--'D-:b\0Mo&V+^"a#],rQH=J(;B60Lmhc:S=,K&6ith]k>A,?)F>Ct<3)h_HB%.l6%^lM'R"QJa:e09^T>gc;"]!C9ac(gb],,nR-LGW)^,F"To4)ZUm,,5>t5Sr:u!Ft]$mg;n@$Du7KbCu%WGaa/"EAt>5AHb!BJR:4=%MK,:)D[/7pV2^1&NqU;$AEdoYJ:@P)q)(l_'_1,$)<mmb`as1AlF\Xrq5<__FMiaRWts9EaE!*=4,RNWo)KX`78bW5BCbDC"PQ%6%Gq>9!aHQ$ld4$235F<eU8'/1iP:@n4_X";S-3Ir@RGP6p<Cn3f/c]0Mhp\A.8T`*:IUh#hCEDlU!AKsJE^Nr5:ek+4CSl4.e)bXL%n'YVfK[GJ%8Ia/!0o('4M_=S!'15HbaJ<:(kq^d0^=cpp<khlW9/1ii"7(9u#bd\UWiDJu2`a6VKgC?/ZAE>cWiRc*S1Xh`-Rq+(%K`e34isHpm3t4kt$!(m\/_NCCQYpcJW-ZGUPr6Y=W&c)^>kg]e(C!SSHn]i4)1bJQpf4Zalhs(K%qfRWUTH`f?C;5Pj`[c0&#P/i%<h<:+A#!9`B%)kFcr7?W^gt/H]<-gF?C39_co*RhUJ.<3__#AZHSc+F(DgG%AeJBT5Jpc>RjO:V$CMnJ)[c7W-eiUjaLL(^!AGO6%_Tak#N"N#2OA'Rmimtg'W#:Le]/XP5.^4VHOT\Rha(1@GWfAa"C9Z]n!hF)!q_q2dCR,];C_EZIgN9a<Z$]!,;?N`\'*lp.'V;CF%WB5->b`&M2)0.k/Tjh=Dg[SZrd@Xs.U3O\"2:mWo45^K@>U9]BhA8G]l`2nl>N&u,9]CT%69,#dLL`NQm`^cj*[I,51?&ldh]iG+%LP^DL)_fr7&4!HcF21c7ViM)m2E,G(?,#n,i\Zh_O;u2X7qdciblflee;iMQlg'9`p]-8#$OMSJ5"@,=qQV9>Y$M3f&I_oI=tP#=%$t&EfC7q=+,J$RcjPc*(!crKSgX,*c$q$A?R6:C#JXefZ5jZ"UTp&WV/h.2NS\nkkQ'+C7$kiC"FM4ju1uQfA&=?OcKLd(qPm=qk%Q*;N#FH$^F4t-_XeVtDAT)`EM_^hDGdCea+I^'RP9O<+.kMW=u9;3krkGrY79W"P03hC8RcA7C^l?L$;F26<@D$9,M[+./s8_5<#%@L#rj0VH$Q9]!BZG7cBHqU+U=Hq.M?O^M62jTcoh"BjVdTNtiGGTa2m8C60l(>W`Adn6E,ndLPkJJ5;bDd3#gVY6O*$C.bGZfp6J%dlVPCB!KjWY0Sp")?g:$[GCHIFX+IL`H7e?J/qX"`IZ-X\,`>:KFj$&*3n-?7(6RoC6mS:@*p8CVG@N)k[G&4SFf`rK'1[<009!L%e39eC"fB]OV@J=g+MH*SM563d)dGHi7ea='B^^I?=7JDD#;LXN"+YLUSji*5^cS*i71*W]\d@`'m;bQ0hcId&C>&tN@X#9MT";Kg%Knk6?`C##-JN@[^k\IhKFR@bC(II]XD$dpN,G<5H#W/oN_[:qtdQLtbo04F,P*_9>%M9=F+kLXO0FdEL<V.i!Wku"a&$3ni6`@j/%;e^dcW\\:B^7le.H/VBC2"XEA**44$1%^A.*(OAF1A$uT!N%!kd'l[[83XmGkZ&h8VerDR>k1l=.[rA-4ebVXcI?Wb`:5\dRg-!G%I[c)pRS;MJ*[;/.s1ltn[<Qg$pKRlf6&^&:N+[0tXM;-jp];IY[*-h*0`^S*NA7j2Z7=_H6a\@1eRHMPHD!>p1J@0oYUs-,@/=oN%%FMRL(<SMaqgtPD0.@!c=)VWD9iK3^a1\#,%DK5@]["TWPn-Pe]hV-Z)-:+5Vm:todm\CfHk`GHDiKP_clgtLPj#/(qq.<LWYEiY%=&h^Ma@k+R4^*k05`HPd6"$2)NKbQB!jFl+m+YJhp2#0L<:@.;J`sa)PoHG!DKN`'JIW\YN,=YEf@kLLMo%h1qD=R8Q1^g_d*O>7%7Nc?(HANAg>q1kM-EPiC$*hr*JQ.E?MRhS*)PLA9*O=<sM!AM<JR*]bf<o>!bI-RgOk?F7<EhnF88n$[@"!?dmV60;*c5<4!Otu2%nsV@,b1,Aaif%?6k`@'U!q_=Vb>n3cFG.$]9:,>tY!GS$oN!<f08/<THJDU4'PhsA^nXh=i]^(h^l2B:kl?qqA_2q1n6mrQc8_hp%;p,!4%8EDLih^]Wgd.dr;%ADipph,Dn`@j$iCK=Z9<8CU1siPm-k't>n^r!ied1oI(#.+n!md`<(rt%C!+4X-E]h&65KHi-^)0T"%1SdXL0Q[a-[XESk_P=S5+B\)BLb_8A4:t$<F7ibQ/6T)lct`o7.YcEK:OH`)5*/6P=)`<T14F'UaZ?dB0AcAtLcWp`48"bp&I-_m%iC$R0GOS":hB9$ufBC2eL,+<C.c:W><ZY$>a8K2U#dDs_%_N#8B3lt,%/K,Vc$$'e#;W89rF:.:[J"LIr3B<3n]*tud]9dE60H9g%%lVjoIl-FbGdIfoF_W<&?J&OUYGBaTSPCkl;)ti1X.?JOccu+9:9ta"__8\Fm1>mA1;d3r9!>pGeg^Y`"M2ja6.G?h]e=BO_qNdh%mqQZd>p:Hp08.%pc"$U`<pcG**g4D>jWdA]Sj*jKjc?A^a,e1!pi-DraR1$\lg=<%QmEbKXU:HIN!+-Lq+t6B?c,JhfBP;q^g!sa%N;uBl3YeM#:j_$:CGjIN-,GD7`D$"%SWeLcCf\EKdj(>/S/:JR#"Fl"4Ir_2Y9u:.K`::3$m_Z@a)hr9_bql[eq\rRDK(>6rULPh%8Vbpa2te`7i-Uhr6/t[gq7rH$_d9HH\],X[j6I'=UKW(t!=lJ.@Y$-L#eOOgisgF\Ee[)(F)j.Y=007Q>Dl\V)C^ZX4iI<\_KOSs%G:MQp-YT.(.`mH'_5M6Z:tP4RNMP)74$g(#8N`TC_2W/'^=?o+]!YiWV>2b]&AcPtIBOC&e+CXBgRH2;c*P+J*64"KH[MFPrD-sN%Vk!g>i;1VtXZOl'VEWm1>_AHhF>'oHRAYE'FDmc=c-s@O\i3FZ<,0?i@CjKs>Iq:Yhi`A*FTQQPqM[)ZJ`+<@pKqQ_s'I-n&hqZ/%AifAgDHh.GGX+T7'1P#A+hoRlGh8u0<,;Hn_Fj#N'Tn9idVXh2X0m9#95H.l0db^nFkZ#\HL'q<$tXIgY3(p10:eT?l#f"-@l?8X%5G@t2bIo]AbpGM?35t#rJpQBtli(YYU3ebC,$Y"cK=\d@HJ/gT1Sj3CFV!mc\]:<WqiuCo;fBF6>N.(j?q0_&E]/,1';+fcmu!,8%E5!k!o-V>cFlkdULo0$V-[.sW^L)D9>Z"u#l;iL_o'f@^s8&jk`&h6"o:XbFl\An3X@uM0(iB&k#C2DU6h4jp3SNuBr(s*<D:aD4%fEdt[h4QnucDV<TWPi"d1Q`\(::t5Z]hW`aGadH(nj$X+?':>I:O;(l2Xk5)&W<9E#N18aK4h7MXj/PeO'/`3-],1DRB[6Y7l9ni%+h=/5EpJfHo'Z4OL%'F@5_^W,^#P)al#b-`-Og#K>`1bIea&Eh(ogC'8tU91NT>^(aM32a[JkOBiu/^j?m'e^B-I^4nY`kEf4u[n%DHf%3FX1:`'7=drnkuR-rq-Y_GWaN*o#+A_hE]W!RFneKPtJg=^]&1;Cf'XK^O0kj=u-Si=b(1-Q(VI:"\@XX71F_AaHAXCf]l?.%0?"Kc0&U-<?Tun5-qY21#?e1[HF<2TN))CBTp-g9ef)Aa?1eK4K7::6$_"VPs8"5fdut>CDV\`gj<L,iK]ol*6`])A0[,NS?FTM[%9]ahGL.OS'Bt%F_=Q1bg@(60$E%H"&H@?iG>Y/g^*9Lmn`2u*2PC,bsDnp;=EL>M@N"QBEoA_Ohq/Mc@n3cg-0Or\sVXgKdG8qt*%Lo0%BhVR9HCjm@9(@5>gefBN;5,,$c%eJ^7s3YhRWS[ZCS^T\7W7n$KH:)JX)g9LnSA?'ui=ha]S$0\Y[L3&j4"FoN&cOirDQ*0[%IrAh?kI?%\*t_iLGd;p3U0qYXgf3k@nr14'k>o<QG5eY7\Q,-GW]C+&<\<k"k>lG;e`KnLb,njPe*>3\[CJku!L":B>1Xe^T3J\5%73d^K&(9SUD/Rb`(2`as>,gBDb>"S4q-X%?^Y(>WM$O&F[%B9YRj;b/r\(<Hik`skk'pWQR!fABlIH)JRZY@r28S/^S+8eU28Mh\%rm,KL1hq&`+P3V>I_Wi!cYanM1](go:?pHE+(Y(?1/9U%Bg9dc/*dE21h\_;RhgY'')2![ktY?OkV&aVMKrm_)[L>8JXFO2h%mUV%n]NP^Fs+oEgZfk>BZt)VXW8.h<H?hFf0k7[G/JH+DmcUG@S#f4oq6?1Od;Y@4/gYT5Lth<"ED;>8abn:ll/m#&e8u;FQrLS"Pr[B%gA3s^S(-ce(MsB582/FX9mP*,*IkE/K:6^9g9#6EdG"i&`SOU1Vl0LS0Dh1Q,<+ScVVT&DVSjkP9sefQEuJ#p_o^b21=0]\0<lu-%c*s.t?I2BK;'YJ*GDK/m-X4<92SXWQ^Rs,@T>Rhl()]5A:#M^T,91SZ9*KFRqlP/6+L;]MU>X@$UHcS,UW3>qK5qU>4!UiE0,#(i%@kDThX[-Xpb%a$8-;G$N&&JO;PpXgR[+B/MQ$tm[m.D%DKP)Uj]1jGHo%.^+JenB"\!l7YEPuP.km\nof85-Vd>%7+G9/F9ico/Y%0$V;1s64Le:g)b&]JN@QP!!Q%bDPCGZ!Pm#$dME-dq0<Z[GH@/].OM_4c;".c$\fY_6#gqQoJKa\E9Z9C`nNp^$4Fn243obYc1rk%CX.1C#K!Bb+NZM@i[,@(kgXqANNeaSlfZ!'mQ5oDi&U3(F4/$rG1W/;j%R#L9Q$flY&i;bC[O6%MsHn(3qPWs+$$#d^S(h%`OA/5%kO*Hsf&FGS@"ngC[f4h-J\O$dX2=h-.\9F[E'40TV0[O\^Kil]_"lk?rTWEXgq#]d[gc%Fr7T0EZg3g%XD'WZ9`NAFEBe/.dc$(U%P$8A^^VN<V(B<=HD8(ID$U^if.mBh3Q1f+oIGS=/f(mk")G?TY9`*R!<p-[,\7lV,`ElLV%.8#&o)H@JS,VfqM6i.T[qbN0I+)mM%'&RJp(#/46G&Q)7Lh2`VW0mnF2^*20:;]i+f"#q"U&Wsgc-CcY0/uNe&$o*Z1t.:?#K59P9ND?:BQJ6uip&HQ#;]mbDOm#'gpE4C%hiP23\X_KKS?`)/F-aG;,:4Vf_0bcDSY4Y!:%4JpVFTL*G?KX7NH*ZJ?M^)`@`ZlKf$g57c0HP%AfAV0\SStYT,WL;a`W'X>0bH/%:;XdUF[#\P!\1g']O1O\X</fR^bPj&2TX_$T<S.AmfYDoG2`L-Z?e2jGTLWT989kg2HnuO)d!s<2-t$:7d;q:c9_F'i5[_@2W.5T%6"_BS.e/#eXf]NO3XO+Zn:V/G#0t;p%F[j()nm5)pjWBpL@6)N+E>*WVbb>2nmg%'=0Hr+)ti2\')J.<(ebT`n>)fc.[>IX?Os;d%@p/`C<3[c/E2C'N90TpZ:p95oY58UWZ*?_,Ieh%t]!U,<;;X#1s%-:1YgkBKAg_EHKB+D:K5.gFX'Olhj5\StDBO#(L8VHA"E4<m%aU!N*@02?"CN2`+;:)C%Jsjd=kC;GEH.m[fJ)Tlt*S$\[^$=i>#8J^ShV.]?hRYcJD0h37]Y6VT#%>B`j"W&"iKbL9rYZA5m<2q;%*i>tB14Kh`r&maFpFo>"6YC%ij/:]$Hn0IT#3K.3s)]c:ZG5icNE);?<q98.Rr9U6:<S#8H+oRAn*)'7-C`#p7(PD95/)Tague!6%gcQ&ZQP/K9a7J]Y?T5@fp@36jLZdF4oBkT6p@5n)R@)ChisG`.e>uc*8cR)dPT,>2Zt"Kas&s="MQ[Z>M>uB$8A"+,U/_-6Q>`G@%0-Ao/Y[28HSofA[K7E64??DYQh/9+R-<5-IX:p?5%<.*]"sfSDZe!.j>,r_<2EG8hUX][>B8NI+Au]kE]G``4`nb;cDA#`(0?MI3%Eq>ILA/=#p]S.'t=_mYVfDHAF\?lkI0,HMonX.0Sr%_-k-e@:sl90ii8ANA])K4mt9L1"XAS%HG8E>9[DlM#Sl01+VC0:%9NEX]g%+7bt*aU:!O%<#XhHdYbd>dbMe36c5!K7u8*s5nHnH/3(=\!aP5NN1FJ\rA3!M"8g'DDSKNbj.1Y]$7m*1U#QWB\fPgErT?``*co)%RMVZHMMFQag<Q`qA'O<:UAU"Rf<eW3k3pW`2PX*Pp%F$lFg\p9ZNua9M4Am-n<7bqRVmJ6r%/@Vrn`UpDeYTR2e1PG14O5^gir`B%hg+PE47uO7kHm=t8L'd?pRUo":<e4MNJlBCGMX+m3BQ!m'>*)rqkb]Ki.a;-(%7VQlik)V[smnR_u,3e)^@#+RN5%Cg'K7BT`25s%93u=qN>'SGp%5<BlBh:*BsWuM,TkF@mp&om41Fsb_rXSO1R][W2_9)<YcQ*lO6!4S#$Xgl8_[jlYm6TUqZJ:[i_==KJCJ#2euN&^%.3<uh"_&S(l4XSFTZo$5L"ghLF950"mBdeRLEhoDVeQ1=AP2mgR9hCh%+;_<U!-;rc;0XAgurJ##ss[J@FAr22a9ts/VcptPHrS5%^N7i,K:^<8k2!.%1,_Fe46=TCr1qtpWNrj;Ch;C(81GeGiUo^mA+DqL^V4#._3f\T<@9biY-<EOLfVd],J'bj*#m-E;a-B*'rmb%%8nE4,O'9e+X',8qY<kHTl\7^?(S$3"aU=#`G:dF)BQG,"'RU9qY'\F0M>>>;Dbu-kVl/@TQb.s/FIQTWP$!@:ak^(l-N%!:JL$:-%Wdifsg@#@HR3@:)A"pI%1>-Nmp;&i\lbB&f:^QI]ISB<%*/QhtS#eFEd\]S@3K*?BqR*MCR[r5EeM`B);Ej2V1c$HqbB,,[X6([;%q(qPCrk-&aAA;-6?a-0C6Nb6;Prg9*Y19o"H1UEdBeot&oj[m<MDOXci)X0cT3i)@C*<,kJb.'9o?2[ups.R7PpbIB\;ds"Ve%ab%o/l\&YSR6Z"7sDts2#A(s5M\Kr3GH!HA;5%O."'o&t`R&TCBA,i2RGk-^)&D;5i6VpH(V(EI1K-b`:HVH(/dmPC[FNQ![J^S:Lj3%B4k/0SM=o/[:9EDFtc#JLo1,E9(J*<pPG,c]#J9!]U@A/k&l[J8],FS?,N)^25W8MT%>i38X$gA;V+H'OEk,AlJ1g?Xtbp%HsYEl%f/9G6Y$p,&]#Fk_RZ4nuD0]R/D0fKAI_XD&25aI;7?,mc-u/D6Y7sVd4gXWaD&h)Cb:JX3EQ__LS2a64^VtJ'@;<Zg3<(@Wlhh3G%j&2;73-7BA$(U]UeGRbN4Q2bWI.N#0T()]&$")]EEh;dFFM`6+s-1t!9_f<naIUS70CePo);dR:RqI-?N,Ne`o8IU."t%Lf(:$$G%3%d+i3qG_#NKE1eXl_g/&2-4PQ/Gnl<bo\sUgCJE%IrZO8)pCF:G%mtJ,`m;4BtJrkq)c4me9[fI#R](b/ef[1OPcP1:Cn:b=`fD%\U\<dqul4Ji0WWr_cHj:T'#:noS643\r)^^;QHD*h2KN/2spI5Q/Tq^2[5tYS$=M+>t-761Q7e3EI#Ru/Q76GADbTjNo^\%4XX`d%2O@g,B0=r?Y5h3ZL1q4k1pq92;V)jaY(boT<?kujlMYA&?Fa;Vrta!JX/F:;/KDZ#*N*5Ar:JuHqVBnWT>jbU$%f"Yp-JPm:@eH$%W8$VDU.7hC(64CH>-?DU%q$0B_+?fFmanI:?P\[H;0)FMa%e93,WI'P,-d:4nM;r^aX?uY5()0"iBO+qe^d<Zc?9!>oCQqI%*l^b%HEU6NJ\V%a>!C.8om6"!Snh/i7kjeIoR8seV<rB:\#(if9)"c.e8n#^9!<g_-eqV7)q:<l9BhCG'?2oFjM*h096c1WBr9j%#!^a,%H[P@UqYVfi#Gs$2:ehc'!!8C6h*gj5<>^7Vk%e]-T_>Rci<t#gAm-.+Irtb*HihM5id4_<WO3Pef'c?'$`M<Z[b5Dm9ob!&nW-3I%=&HfK\O79M_RMrCWiKZgq/[B]=sB2qm7#=P'["S.7Ye[ME\V:'"?kjuDQOQ?VUN*^YA@[*TBghEKtB)W!Ph+1H3[lT"aX.eLD!>+%7lmWo()YSdF?8YcH8.mDr"8Q.%Oo*"+*;g=`fbs.[!ME/Y@LnF+6;1hQLBXgW;.b;?GUs%eZAI[]h@"<2uGTM*LHB\k=PQ'fA3\+%4`'OdA[McBro7#16uLnNs4U=T5PGhN,.1JL,HUO""n=kF"q2Ej]uEVkS-I/]MiHNZZP7a8MFE[upk\[*m"UHj$Ct3ZI<Zf4>JDhJ%Stgj.@8:;8qpAqLQjIME&8`:m!*6%OHl*B5NbZ9([1^DkDV@CY'@5l;l:j!+2K3^K#(TP[3Yudp9".a8hi3S1'2GSK#hZ/F@1E=a%>936o@jf/WK#nB-it`eJg>%IJbOcb^^3SLc)9E`jgHSf-DP\u^Mt?U)P^g.9J)+F[!;(C+n%VVMId^4ZDB@@ImCK`q_]!QgIUhUY%M3ipqAJ$R%M_QJ$?3l[gGk]pbGsA6_OPU9jp.kg&r%*:V#hsk/eUa7U'/%;:DJB09g98Fa!E0gl.kr/6i6)n7JqPj50Rt1NqIboK%looouZ.5'$6,+:a_P/Dr5e[FEW*]'[JnFo]MqA@5nP8_/?!tD"$Y%F;OKP?fTW/:#o8`pXqj86Ts,S>,H3leKY6)nR<UYtX_"/-I%5VF3L=<:o]@!R@V+I5a^P:/>`@'=Pib9#mZ5_C(h%$:`<D\<H2f?=nk)9lgnZ"YVNJc7EJ*60+]ism3Bp/iU$3$[",k1#T9W\J3_%`Jdu8^+u!Bp;K#aPZ\*:X)EXH]CG^d7(5X?CHTq9hK^*g9oJ*l1c^,Ao/e^p(mZ"r=KMjed0L0:-]W6a#OqYr*Q(6<e!=?MGZ*<j%`&-jp\1GX),aF!t(;mD:YrJ$`EQaBn_htBqG'lFuLTs]i4F9m]`Gj'&<PYl."%$YLBXnmAm+=^"*lm>V]eX=8"YN<FgnqgQ85.#&%:2C\_X[8$[T0o(Z*Qa"'7NNP#N+;#QluIe"A!^t14eml<2a4(,"a=?D/RlPSnS;hS]E*J\GGuDKH#RRtBe,51WqD5\h+5`UQt?_?%pVcf>`a$c>.oC@8&3DN\rr25b'7_T+f5&XGs+6=Z9XCQPfliZ.]5=?bB-7Yo>j@J1MC,lkh"`(<pf`:]+usMri+clKT4$5DaD>nN%\cEFMbQj]ahg]c'6Dt$0ph=GmMYqjXOo1G]O)$'/aPok6`Ie(2l"ZSLldWK_nEqM/BAe#Sq+73`f^)/-Y6>qSb`k@gb:-n(''O)D%7%c2a:*`QnG:d)qX:MF,DQF@c_7`qmVKN!F4sIaL8'RmCn)ndL6UAm@[D-aagDc1#.*!>7S-8CIh\SR6s"Cf@1/oQdO"]rkNM+Xu%oG\@M'S9YA`II_ieG\!RG8NL`J<7/'10/8!IY>rmL2b&bBtt$JCJ'@jYMW*Al<*:h6H$Rp$+jV!rDN#(5r[2GiFnjMm^n=H$G#d%%himgOk[1VW(N"qdgRj*YJ'dO'Ih+TrND"HRoO]-%,.r9IDOopc47M!`c;(^r]PM@?4u)_2jW_A*1n*?S0`NH8r7Q(\eAT`kQ=+MO%*2$b=SZX&A*;a)HrdQm@=7&d:*%)YS%C[1<#l_643_P@Er]RNd,O,_21_-_;n+KqES$cf,SK+eV""_Hb.g6Y\.ZXP>?6!;KqM/G"%b&,MRmcj1=m#>pc%D)49A_(_'AN:XK13Fo@ZE`[6,1eGeF?/D/a(8G'`j#trh72[7aL/q6(IW._<&c;lg;Wn5OXf5[?rel"ca^,r%>rS8q8VZisVMCr@XtC[58ZN(>5rh'pm<*/Vi\9Q'UDdu*"n#aM4aC45>V*F*rsrH$VHISc]q>_kcp-X0s+c!WX/]Vs''Y8s&"dQH%BmQ)JF^+O3(T'uIK<L#Z'3._.Zk](dn^G*YpH3j8FF.Gop89l#R6CnUJ8ut3M^IMYXaVpOenOg3at">3`:s,A2BZ7!hQ^q@f&nX`%FO99C[";%1/cPNiRK<FF94eU7f*Ro%G0n(K*`rKFVRs6#_h9;]3anD_q[V`A[`QqS?A<16(qg\B`k]!lRK5=N&>D_Gq&ZDo_EWA2%@^Xbp:29H*n&Op&NE3X561_0"S;$5+<h#Cmf]H@`K=`.'X$`&s#eCg>4E]D\@;u_@[;JYj"?Y.W/Yg<[#67qJ:L-M7FsijJpKCa2%7SiFJl#tD`40[FuIQ_j`QsDb,ni;ao=-YsKZ<-u)k:BmK^PDL0Bf=D;\gl@0$#b5&4)HNKG->d[WRok>!bP\e^aboVYLg,]FfO&^%@CdsadWA"PD]Ed.emDmtOWY0BG/S4"ILdqlOJn?C\#[F:b<G-F%`A.LTEinDDH29LQ=RSdq)G"CEIibHZVuZi`ZH:2RYAH'UUA`_%L*;;+cT2KYS=a]-U:!PDRUWGM<<Q`059/T1Q>u$E=<6$fK@!n$qi.eE^s1oFk1-aY`0W>FrrQ2Xn_+pBn[\G5&(k<I]o>*#W22ed%WXSK\X\:VsQ7hSI?8\MZ1G/JVUEjD4Z>X/KLAN%!51md7'/>BVVhF^s0%odjP%]\"9VPlY@tR.6XV-Un)iGlofaaH].'=04OV9H:%HOssi%(HLrWZDLV"+hnfLuWW)oh74GK(Y^sqG:>(`N.*j1PHnS&kUfaWss;YD^K(r>tn!tQJ-EgVUM;"@_:I<e/I8G13El"P@=/g%b,<pqHSoC_8pS)uk8]O56[EU47o:dmqg1uLc1GbXo-(K'3W7YmJN<,KcC2R7,W6E8/FA9$l*!NlS_!(7!kb1Q;X62lp=6)SV_]5I%NaPrRSP5m1`:J!d/6p"@@VWf0;@b5n=5\8%R8sQP^bldZLo4XckT""FJIH#p*tkJ/AeD:Li34901Zo)7^0f/iqlFe"$,nctAGRMh%8-OlO1J&NfZ6#V$<4q.GN,_aVW1_RPZ=='&93H1cK%-6eX_Z9EYq&u/TSghX,j9?RQs>1J;\iD"Rpu(7!O=Tq$#jBD+oulB9K8B5%2hK=DGED+naI;Dt\1t-"?k4-aOYo.9p+k0E]5u\@?DY1!D?aT)YQipaQaiLcl\>LU'2XI*KK/*9m7_0F\;3[`*9LB:1B_sF$:TO;%33O+Va_:TmMOeL[4/fi&?&:hATY0$m]]Vm36b,[_n`)+R(Ep55k7e;_ST+'YdTg&6/`J0;Y3_oJhDh0tMi<8.c-*?N-"T1UFBWJ2%+Fo&CW`F'2`k7"8Qp;@0>iBZ-m*fPF2B5QQd@!BJ;,Tqq9%!/<n2AjO@H_g(Ds3]smlpeBq$q"AMUdC`/L4NOia(N$,Z;6\q/M+A%$Cj_pHe">^:9R^MKr7R<I@&6N?\'HGlZFhT6frA.bL1tO/BM"aDZ>AZAWF6)omp#W3/j%>joebS^Lh^+i-h>8Cahbfc)YjL$nZAD%)bG7.mHo0q%6J"m$3ShEjs`&\m^NN/m,C86iA0.jY?_`#!^`qn\KY>k#i."c/eG%2SJNY7p,,7rC)*'.]&0S71'n"DBJugs(1lPO%=P"F"0^Fjk0'6A(%l2;UhY'7dFOM<JG7OAqb]LA,C9F%\_*9PXP?XcJL^!b;`#<SK401;^<JHBi=B`fZ@QLOD9Nkd[/hIALNO[pQ%jbc["-sMW^.pS:)O'`cep>?s;i;F#)7^VSPXUSE)o*Wg&BH=;jSSm'm=7WQ5`9]_PL#]'0H0\uG!peLW)jegcfQi\u6dp;)"S"3_%,"qfedd_4UfrCQd=q1#Y%i+<AW&9d8/]\K$OW+C)-uAVNV//VD%mDnaM_e1CrSEbd=`uJVc^qMbO?-IMb[X7"QKtdV1,Y8FStlKV%c?=NK[lP=:*O9$]D3Jmd9[rMs'Z,fiJ>qXR-hn9Jd:K_f$.`\&<Nf7Z0H&3I=C,u=a4JnW9llgD)HbP5"la/W"-JVP$"O54lI$Zs%TpiH]Au4?S0oJh6Jgn3WdpOBU_OIs-Lp9m4[B,qMa9IXsl,iZ-/fB5+]9n&HXd/5,%4c%RL1[M1-><d!R`Q;-3E$\;`fm&s%Xs)%%/!J=Wj*-3'?)a8[dQ4i,G_;/eU\8Fk)70`\%-Ib.I<8JbIFW/Q4N3)H3[dNp]Y6u`Kg/on2skDJ5/(1f;"#c<`O9rUaTR(JfWLCj%6J1\UA5P:b]FG6BeB]GX,$X._AW$;B`VlGC2#dKh*_:d.^=1Vf@8g1g64q.9+822gdotiQN(,kB8msO0rg.iSTqb<X25YZTnBZ2F%;V&M]gYHfH0`A]8LBjBbs8!6!pJ8H."7`Lt8bdA5e]59al$B9iX[43qcuZ6P8?<0'eXu)0")k1ArbtfK9,k7m0YL@_YXdU_#CnPc%9"Ggj'W&S;+7:rnU<:3%?(BCE@A"^8"%cTNW-**-m/Y-?!&_HCctsHel#a=/$tPN(C$;tQWO8o^<G@'h4R^53X4OG!,4uY;j]_7"%M#^0&SF,qqE^_]cIsH/_B7Qt+d-u*On+nIrlI6`a=T,lFp$1r<X3D+mLI%t^jV#bm3FqA&IPgG4o#MLj%7fU[`X)oaSPl764kO3C%">+o"ffQu\8\-,-G]!CWe+U?lMI@LDW]o%Zd+EU@W_SR8T\*ZS6[RGnRan'P29EqRk2L^sQ_GOSB@fdN4EruG*E,SW#lOSSnDm:q%r*:IQZ9^8t`c'n&emp8*hN.CUFtDPi'*&XY5@Kd%`/<5e4J;o%jFam'Vc9Gd*YMdm,"(_0p?jD/c.+48boZ"kG!*AJikY%,J%GC4%_t)sE`t(+\G:V"A#CEM^Xj2+MI/U-lkBZ=;b2U<d/]`&&40P7kSU9[,YIC.jnu(g8Nt6HD3rOq?.[n!+!os3M@<;la$YM!0rN2(*%R7CJN/+)b*pP$/D>1hOWhrt^#o3UkOfrO\p-4^XY[Du&mKhUXffgo3+l>P%A>:;))]C34UKs.+hr;GnQ[a?RKZTErUoAq@F]mcrr%n%[+qXZq3&=t#mZcVMOn]C5Tom[I9"5%]lHR5^IV)TQ(^['b0VqR!Zebqt^o.gu=(icauO[3-fsoED=-iUkT'2cnn:^KWqISbM^<%mX$iG*FBj%.]iPbC\-f.[uq6*gs(=4qqQdq*dfL)<-Rck<kY^2Z\PUURZ`GM6+*=gn@pS.=,IaieRJNJ+)bt-(T[kb\X+gRQFHDq%?^L=ls3[#hcgREC<%>]fr`!)SSsI]6ccfK!geR89QhB(qkLEgciT\81cLT#)[X@l.)tLbN[IO1M8hE"ADa&#LS!Abgji=tPCMr1m%j-o;:F\f,UVm=4+0@lPg==HB$^4C!>+,92fbG_SqnnS9-0ACof\@N=8lL'*gNo7D;_H)+uoA86]MJm]I?$8CkpR\njf&u/>2q8H)%k/k;4K'\]`!Y":LoB75JaTq"2o;[Z=oH\XcjK'iYHrDU9m*iZ(_HO2>TQFiBI0Y+=nA/a'7A-FlN0Ck8>l;84UpR+Mg3d+P+jom3%`@mCAq4"nsUAN5<Ie';E@MYQ,4]Z[]52P(nIXV#pXJBGFkj@JJeI*M]SneNo71?E>`s7D7EWNN8j9iq:Wkj0Ljj&59CF+=,pps]i%?$l+D(^(B<kF@afYPe?QGH\?"q:pGXoW\%+leA?1Zd_=%s)rK8-hG#MI:#*KbAVG!?$<DNq"j\D?i0,iD4EL"c:[o]7gpa6aVWPl%W4&H"]YeZI(YQLmUDKcD;Y>a6)k(Fhqloq1G37?Gdl5*%3M7a[(Mmq.p$QFQT(i)V6Q;KIfK@MI]^+>r;MUo*Hhgu_U%l@5E+XRP%Hs/3r+1EdE!h3OT9*LE;7k;cnQN)5TXTiDr^9FsU;KAA#GPbj8?nChnH=#IR*^=:(@Q'S-)dc3qV_9f.A+Sot\TIlCVIX4V3h62#%+-mZa[$U@HcG;qh\XY*;OpVQc>73%,@Bk\&\ck^VGQ:+C\!0*=06Z02b3O\]qqc]^]E\8Zl>Hl?hq]ofY+5:IQGgND?fY,nfq[Bg%10BnkIN_elm:%'E!],S?rL8-@8lIPUF.;WY8ks<>['X2t-l)+Ck44`'0<;(+BO!6kb%[hWYhbhU](\Z2S.'c<AjpfF=SpNqPl'18%2KJKQRo]7Hr7ucDnR>''BGX`R0?qpt<VJlSi:Qpj1jf#u;ObWDk_g\u]Ncm;p"$.[KZ@mS[/RMIYl2\1PBBhg484aV4P\cl\6-f\%i14,G)1CUo1Z!N[%_pe[Hj])OIU8u(5CD,Kgj@Y2CpmFYYbfSe[Ot(rqgPejna1mrXFj$kA7#*HCi[5=3Z\+1oBP#Pm#cRTJI-f&%aPVK/q^qj0U9Gr9p0RA4Q]CC"?M:UQ^K*HW.PAR\hgR&ffXZ(%T<=;%pWB<f+MA>h`JRm9kI!h':Z!dSFq7=i<m4()r_$9pD*2A[%B8nLLn>u/u4FZ1B09(`kY2/OeR:#B`B%b=9hA7TAo"ccBV;0dRC-d5'^K>qk+IQRX=ZOl+dLj6[5%P6.9TY@CAM4s&W'8A8cD-*F%B(:nF=)A+<+HTcgS1P[1q[sp70-VQh._W&n.;g@O)Fc>grp$(`/7\O:OOWV>`R</R6*,^uUWnBngjE-@R0%pJHpu;QQZ6P)J,!84%&<$mPKb*pebbC@QWaCmKAj0CSTk.'6>dG!1WJDLM,!(u?%58m/c;)YKCdKe[2Qs\f"_P,.;Q)'LpTlEW=b!Cl*'@2!,R,OhNoj)Y%'tdZ%;_.qofZR:<R!A;c4OFkarf4%'Sr/Z1?6gjY)2Y>*1tK!0$R)Q*]XP)Q8!q?-M23@2W%VVcn<"Q1Co%B&G,-ujIuG]?=gZQ8%)@^^p/."a:od?V7XL-RRIjSZojTK?QD?[82_)9RQ':XYgd\Td6e;CYkFbS$KNEL4Q0XNP6`ahMa*#jeoW%]"/Pa6UB9/LjUH";1k%.gMna87.+9RDokRM6KbW1\9g'=YZqS,?ifWQsPrc]gnAbUXb;p#,Df?#NC$Y_9g%,o+4W-1qnH*.u3:,-WSKeH7J&#1=634Aou%I%N!@-gKMS(`\SA^Bb>sf(b7ONsb_lt*BhKS1RE&GP?2bH9QDnFaUpSR%`3-`94F,1YB)T-K(CMsDjdj)e:2fZ4Z-pDM@I!F!GeVF-%'d*7lmrGTq)YXV$43fcUCCa%6j/"j#)#??ES?4D,'nJNdQ7CFH@;KF-8;^hfpWb8M9="!9qb_T$(_\KZTM3Cl\`5Ajcs4`VX.:U[%91A=-=Yq7Fj*eJ&jj;3I93.uWmf)A=5VL-jXZ$b,[u8E_>LdB\%N]Ns4bYGd?4X?egCKq-$dTpP\Nc>&X-!8>b-QYH5;k7>OI.);%)]EEQkffS_Q;e,3'b:L@$\K]S#Q$O\f%cpKhKcK9H')7d3*AIi0c)9UFZS]hq>0O6V]tm*lrqFIb'cZa3GJ2>`&<o'pD6JV3m/De%m</30D:Bs94)#-MF4e[^UiTF#BkXdtZ@NaP$^h0HE>S(PnD2l;h`]qtL%T3@ieq&o.&%d)7:X8R;ng!R\\3DH-Dc)s4>A`9'uE^Y%`<c2[Ds4T\R"&M8Sp`0&a>jbs7$^T$i#Ch-m=ut^Z"^g2$&pZkfqJq=*7Jf5)Z*.T?S>Y4'mLP_'t,b26:dAJD2Jb?3*h$g)I?04%CH$FJXj_[">B:.LCUmXJr'Pp)fWj6cULZkM:k`q5pDc8C;-82>lmY&A[:2:Dq=^)"g3R/:(]BPGU\s,I%;'D+'RGHJP#9KX0V300%_'CmVSGN%%[JKjZ_!&1IcZ6[j1YBk9XtES!b.tT9pmh"9?EEDs>1fHpJTYsn*eggp(Hb_H(o`rD\Q^"+I_-!9Issm\eiK,Qp9KJ.%eZYgoio?'0p%j\%M]XJDf02<'m$hGOg!PFNn1Wd`/nTA$9]qg_,@\CSDY#"FO*d2(5MZ"`4d/,l3M>suUH<EfT0GKM="6-*?d&\g%iC/u0$_CQO5L7$shqC#UIVZTTXhh')LMqjeW<[@V>&obMeb)slVbhjJZLMZeH^'$Y\eofT>@&qrH2!99I_3)fIdKe/[.n+BQ<M(X%Ir7A%I`is#<b.c;9g4#uHZiLmAK0+?4t)rjn8Oo1po@1c[g'6!7LCp@K_cYZJ_+W)ZdlqacD*%Tp58_!=T+5a10j4gQ&j7j.MSYf%SZ=hb+!NS#.^WTIT:;m>6Y,6R]DCJOcR/r:ER69i5B9LD(U_s\c@+PqF2-=j_Y<iEdC6tra]amn,!\-iRiLj/ecnaY]:iTrYMBrb%,TZj;h9FKdYer(.<h/8ok1t;c>5E*N(GA"eXffWjU!`fJs%^qWdIP?;(T6*,T>&=%8KT(U4_N2M5PX_e#NY-V'DL8hDn/tq[Ib;o%ZN7Em=Z<FA_ZtnDK=.&?UA-Uee\-`20a?9gPA7(!=L(1c[uLgA]<>6n:7n)ID6:QYH^d/JS3>$+T?`a3To*q?cK=+eB@ZH<YYfn.%./UuIUPFmq.n?"7K<V-[F?]+6(:J_I3\A!hEPumulX=!&2i`hBNZQt?/03Vpn/2urCQEZ8]O/`"<*)@memEm>LcIG"/a%#NR9)HO%$<CL3G.:BP6$q-8jIb74LcoEgmPDQ)jiG&kon,,-!e&1_SXl<^XkoUsR/-[.R%[)FM9#S>ju"R\pA6L1.!#@,cdgY8XC9?C#-3M;%f$nLQE:Ih+g[!`fG*I[uPp5"]>-?@OBf:ksC[^"FZCuGenhh!6c"4fGcgInO?YjT?g9LEL8OS#=BkubXl[9nag)=6!IhAJes7=g=%F6CH\[V$WF&D0i<g%/shT_N*kX:A"f7Afi?38Dh$S;rl/4$r!j]<h$.CsY1<STiiaQh`Qk.YfLfc5&#t/H!,s-M+,XYjQF`e'hC\%Qq=cq2HT@S$ep"EDpZAtK;.ok+q)IfGI.JS991)dcPUgu-2o&"!I]7boO;V-8\4sLCr7d;YFN7dEGIW0mXbq&B3T9"Ge9M0hrU[r%9,A\):f*;eaZJC)QY3K@h;u]'hacYY#QGuP4Nb87_&9bXmB>1ZDf`NX,X>>sIDCQobr,3df],Gi=r89\$M+JdI"ArJoF0L2";eV`%IR20LCj#'gMg%%_+D2c^8?E)^eFRY]:VJ\SScA'%f!hQBE+"8>p9WUIq^eU]W31#NGL>/O-pFqGe,T2s[:&?Kf\TSPHN-G#Zb83\%a/Ob?%h9\*2HP@^>k--)hJ3p64?pN(p@ojkLF'rf[91W?IsCN=He:RJX$FpTAJ?Y[-S/@!>.r;+l"(Ck>AMnTs3/[TAj.cD(.qpL%O85`i^0a1V>S4CYamrm51&JY>>FU[,N^3<1HHuK$CCC-nDnuJNe1[3AKVE'cloj"36gO<]q;Q&]?9]rO%pG$TZhD\aM:f]c9E=0"%Cd'?hk;J[p02s&J1`eXNn"!RWI.l#l.K=M-M0)T"6)^&GLkR+i:mPMn?/s0/g3NI2>VCo]PT,%39?l'u2!eZ%4acb3E1/@F*-$<&%(fl,sZL2"/m:W&7ZMXAHH\G8'hsQKtZFcJejN$#,`$g0A^$O^kr:=arfqWJ^bu1C-=r=0<_jYn*M@YNVhQ2iD99lt^hlN;Sb+"Jq%]_HSZPnmT-=<-/C2K1nA^'[?Z<qL0`/me3PRk$uiB7'O^<2$p-f\(Oo+&e#B+l*!C2uDmfg)JgD\q_FA9.ef@jg>/L2-tqi:((:=%Zuu*;h,"GClEjoj6<C"[_'MQsY:T2d[BKZDb8Z^"3m[5*]iFcF+B#eGog&Bjfh;9M@<p*"kBHEAAPB>5$4="^(S0-(ckkWf.2@'a%GZR<69A>0iX4b6u\TLU9D$fs&?f*M!hqRWF]LZB8'-ulW?s;`t,VA&VT""=;mM>5->_R4n:+R(40rk/i(#-ItQ@E'0^LUR3H]OJb%FPlrtmO#:4Gk'>4DjW#e>cZ[bhc/P^Tp1T'CCX%7;r;WQSO&:+osVIq4=ma@>("'\7[X48E;`'I=*G1@L5bFdVU]tl.X3:P"BPQ0%+*NC6U=Q*Vg1A*]j*YA9+ZQmI&kLq]*N`RH*SbUQ1Y$p'0:]cA*iuQ:DK]L:Kd/p-0b\fmA/CQrXU0R-k&0m3AZM6&SNU^W]jUF$%YZU/I4U-J]gatWq>`)`=@Ht;ebqR0kW`A6,lVDHGmm#&]K<2_3=+j%IS$/p>&56uue]/&P)fCml#=XS`l7f3@Q47os>@i/To_nnc%k%Qo(:q,=sQ8V?n42F#JaPE\:GJU=^T>:6_g4Nl2<G'^#`meOaKIq><I!bLu:rrqYKh&PYb51P3oc\[(oK_TEA;&<G%7_3V#BGe%%p[6FqHQ=pHO1$r1)df+R7^n]`\s;ep#ER+-#Kr17`@=RC;>+kcN.8EhAa4,$ecPCYM7!$H;fU?-YpfG3Y&o=2B,&sue]Q;9bKhR7%d[*c.F$.>2&Bc=@+fbS0?LFQWn7r`n%+8q-j?J91*;nBYN]M;=5ShSfMke^qV=!Fi)&dr2_S-VO]9@Ht614'j-dT5^NZYs],tTi3%YV)%/[$P4C>3kVBcc_*.JVqQq$iYO=*GrRcNa@>O/Up'D`Q2sc1I#d6p#:(mdL2a9&&hu+H+dQj)_ljkm$k&PHallNZuGm2kl[<0%Ds)i'6RMk*J$iMUoJMgO6MC*qJ.meCRDl`6rdCL$4aB8`[e&K@pF:OIamj8tES[D`\E\756_=^`\R&VGm";A=lJk$`Ireq>n&;'2%GQb&O!q`]Ue6f#0l_h;=_e^iM\el6jLs"ls`DY[U]bqDY])VeEHdAjnRO(f*([rLH61V7$5REU=+c.TqMP(e-7In%YrGmDb>H-)C%]k@%lZd(VXP+(5JWiIXm<OM8SEok9crZ`!.m)f*nOWU1TjCXf:!@Mi5/),Qe&ZaI:IVo^uZTj#?5>3`srI"-^A+o&[O#6S)Ju%kB%4*`f6X'nQ-K=FVfp>s?7`9'\@s'BZm^RT^U^YG?,2_peMq#0WFNWN=RF/LiTdU7'@E.Wok,TdrJri>Pf40QU2^9'N"s*SuJ`gqZ1%p'*GI>I9j#Hu%@b9s9`PqTIMKbPdtBCTG7-`p^84O!>d0]cZEY]CWXIG;1l32pk!7F0`@MH$WL27dFERaC-pna!"OnEIL*XYre.f%bY55>#H..d#mA)oqu=.$o)]$<#TV^!_"!3=FfJ\;=nmQO6>]q1R0[?K!B:JboF[^@]>nAYhsipqR;YFgs1>hSiK&o)ZL!&-'(%8B%K]Y9IpAkMX&ESZf0OI]U2FN\&2P`1jF(Qm#RXtT_3Ub5=lqW2qq\\>-K';=T6E#AneGl6b?A-Mj*`psCjBI,\X`XXiHb-#&"U=c\%q)'oBDD.$obtktm)BYAMqX\`<C@>Xr1AgArr:KYP@q=_9iFlbFpLJ\_cJ&f@q8LfS)Eo3FRlZKLJd7BhnbSkkH2m2.\=/*hBU[Np%?d=)U]V1][o;f?KI^M'jIXf,>Gkl+JG43\u:B%J^D86"qfY%"s^#-=aqrk/3gcU"o\bKq0Rh#kL58bae4.KHCRskb*23Y'%nq%cg%1ERioT[9Y5E.@oIi>i=^qq@O#Nd)FRAe3SWj87cXc(F1UpZF`"]PkBps6Mn]KYFdjRAI$JkHo3^Qh<S&q1ic:b3iU6#CgXiKs+;(%h*KBT5OY0aQ4LQlIYekIIqb,WqIOIR<0+o#B$fW5cIR79TJ&e^miVJtqsm#`r3L&n=I;"!%ZQrd+!tTDk:-[qIna6CS8OQ%)P*IE%S)3dTl(Ff@hn`,."3#2^CouRV]+=3BK-npa%usu0WZ(N1\+T+JYo/cmV"LrrF"7p-0,l:8#X8.S,*>/%-70)`%:;6srD%tH/RE>)%H[6$`r&K#.LVllpmV:c\[(*_+"+s'%/Yr%#j_!VIn_a;m7l.*;A01I(rlap'pD&<uIS9Z7,[or1&$J0P<J,/k`bmu2hNY5:jlkdC%7/HhqCs`'WYQ"=HjRT4pAV5;uq8SR8'Lm(dFmS>jrJU54UXRQGk3)-@V(3SBI!@CFBE%j,fq9I8[Uu0*.b:%NS%/=*Z<slbOnnm0%gOh4#FLhXhLRZc9l,q("%%?%)Bj4\T1L3//5u6Yj$\Kcrbs1ZBd#G@rS'FVjY'A2e)faQ(6fS]PgNO1mT4`oc%9jfoGP_;_je+,R%cIZB&%/O\\4'K.?TL"^[$4,LV459R[2>^K:kgB4sMon?[cF2W3Q48_A5PhbL]q7:+8eF2>I.h[SoC@6/3p?I<IoAAkn^dWh?Q+$"%]O\-+hYZ&HV.*9J1VS83qPnYa&'L<gAV1%[`aR3>?Tik:5k%q;IGTH4<BfX'rm1U>emD1=%f6"+ECb_VHtcmPotelDPH$o-^%9.R%QfWkfY>!c%HM+LC(_fH5@5n1T9.CLCD3'(so9qf*`TZ?JHYA`6T0@X[E6t#=6aQgZ`RL6PlZ5%Nhk)RY(YAM+qX'XYqBqmf8=J_u%mTrS>"qsXng[:_oqhLe^T&H>`Al'=5(dt\bEqV';KL&Z\>$0b::!SAD:N"Alco^f5F+8cHrVX1p`^0(Cn]ZpY`A]IX$p3@h$BP.r%[/'Va(j,AK39^>0jXD'hiNV:DFSg<*r:ru(1gE4^2JGu-L"H1fdmJNYkl:t]=qJ?559E%64F@Tj"teX+rmg,Fj-fH,AbiO1)=Z_9%j6#$adbgZL7UCDEcXn4KI[sU30-1UpQ2M%OYW4d#^,i]_^Qrl,m7T/12TL4C]nL8l[t!3`;-*DV^\`-Qo6+C6<U]q\j(%4)I8%i!%If4Y)AcKZf@E#F206U[:H1k)6l]1^bBY6>]'0fLpSt,8O/3Q^,r4;L[?m0q_=8H^@pX*'*1mfl2=OS5<HTB^SC\%DuimYnF`NLpB%hlj`kYYt6rA$!4%rF,'lpM.\!gU$'Yah+nM?[#jorjOj%:6kjjpD,%FIh1]]1DRZsr-'/FbQelt?JjS_rOL(nIm*aXOM&8oj)7RE%p3HLuVXE$=cgT^@ITZ1,`C[9n3h("f@I38iDt@sjs/Q"_+5Z0f'E>`e/cBhi_r:@aP9YFtA\[*Z0:j6qNJB$>PEYcgU\4@hp%A=C%l8ARp_M%>aSR4U?I%FFnrUoF@_W:@abE9"#CCA/?pVj,rPn2=[k3JkuWL(*Jik$K`[?PTjrC>Ydg\uN'VG4D(bVZXXMim7p(]MMB%qV)N*ZgYYZ?$ZGJh8nZTW@.Vq!SX/],BGs0TF7=g8bo]h`LB(GS"g]:c\t!$S,JfVF7eOMN#f3eI_=1J5+DScGW>pGhWP0247b)^%]H7S0((]QGfGV<+7I\a3&D@)QCGp>ga56g#jh<lo1j)h^kih/q\]R4Oc.-@>@aO0R=@rP0([#C4B@,*\D$Jf7M5pm;g:BN!K;+"L%*]Dc%G*b=^WBn#m\d8:O%iQIJg#tS(H#!lcrV?%tAl'?+`S]]=1Md*.88YitK1;c:eUrm"rq)^Zkmg@p6cG^+9nMbO=Z,D3je/Q3%Dg;_UCF+t9E_t7UNiUMgCBeA;_HlKnkCm47B0k.BiTX^T&UR=2CUMoHG#^O!'eMrM(Ir5I]72mA1N%1?>dNRY?f*CNN\5]B4#sWn%o<?9b&-#g#rU2Te7U]>ipoXM(JE,Hgq9Q?Z\SoPRKQ^o`qpmr,#L@ra:4-6/H!e3iKo%G;/DX'MIol7\_=4Ms^TQ/.nNY@l!7M*1%Q[!jb5+gF)l.,elYu/SJ(q-o\ZnZIs#<8L+\&FJ@2*Q86Vjb\I[I40om(J7ra6>fZ%$%#)1Y^M3=J&a-%(@ek>'Spc5(GkiUZ?`i%VX`l_<);eQ0WDpRnEt4\rknMAIgu'[8-Koa/N3R-q:$;HoUiV$9jY->AUgU\[_AGTH\M*aMj*h>*AmX00#)nFgM-\"GD0AM*^Uc\%>p7Gc`H6H;e_e-DUOTM6Y)q22ZhN"g4u?Sug^UR%*triGFXbM\Q,]1c=Z??!fYhr7R'4C(]V4E#0n9#G*q)J`OB#[OVmHD\XCpR0%mFE=DYMNhR6fT22j3*1lnbHTdG7g,cE,4XI-tT6QEoV!9Z0cpp\'O&`51r]_(>Nc""hdjS[]<3c<9;QFYnoLHY*S3B0h1ihZd,Lu%c=a(j,2Ukhq6=(f9k2JKVOl8:b1Z"Cm&_cb3\74]_ebjF2]N=&O.er((rlI.e^a&(>1u$L,ID-6Ec6d0YqZ!Y8kL1?U7&D;H)=;K%CQ2+I3\0Y+:7^Et?+LG^MWaD:[!>a5gpK@h7*-77\l$FQc>LksIq5b\J)t3\)31#"-Yc9AL>m]9$^)18KJkGPGPt.fR/_:bZWNS2%;=_S0`QWqG@.e%/VL4N4X-4i5=E.!(];28ffkk.ji9TG#[_0%$le+UQlsO;/683Q1)')oY^?'B89.UO3GIbJ<ZD[,uVt./)PJ8)O%O"=PnI)d\tUMXP<R849W%`\D=XD1?XEq\he@&6IC9_SBuU92`0lsM3+Y5\FVCJbfr9(&U`mh6KVmH6>`?FR79G"9/i3HsK4=V]2*%^IY-M%00ljVsP.-/k>4GA)c/S646gi:?Pm"FW6Ca7ebWAR4J+/EB]FV*B8hNd$F:.TA,Xrp!@rAJmGN0C_n\n5#14cmGRTbl:r.M%1>h6&mc<F!\A=/,in\+B^=`b$&`'_r4'MsAFkm<<CKYs;9VLaaeC^XA-=1+)X=9E0V%XZD1QeDLfb7+A*IBXUAKugS2,u-#<_q#9%mVHpXdaTme-\g^J!aUu([9_ONl]9j2:uToKbr<:>?*KBI!s3)eB]YJ5`k.[=Nsn;&R!%KhHT`JU!:,!gXhA)P^?('dh=`6=WepB@%8#%Tann0qN]^>"m5!Su9#=DI0+AXS5"3[&)^<S3tr4gk?%tF5Y#(6u(hSJm*\jsE]lk(`SOVRVAXBV0*HsM+N*,stKrgTf(<d/3F%d[T4sYO[d^o-JpY4P"s>Q25icLEmjD5Y"*fUUZ%Op5RJW'd\(m-@mcrlaf$:o9TiY2_ALL#PZ72)t3(Nc\J4a$D0`B"hf2]iM.@W%i2$h%o"1hQ@OfblUR^4circ:Of)Tuor&$)Q>C=oi1q9PBL*h8M._Sb[V-W-mNRq"(AIfOdTCn"%V2t.oWpc`EBu1AJDKf>?(qR.X%=+YDMDuf'4V^MXoT_!lT&c.d].spqYLWd`u@>tF"[AWYfK$`h?!Sm*Nidr]LH:(AQBAl[fW2n9V&Na]NE_,N%XH0odDJF43NSf7d%SK,%%GO81s9?Fu&qnA[fkPJLmbq6E!Fo>=mfmK@^_DKj#hhmtMrUT#,iaXK7IF9V4=rWT:h=5XUa#,-SR#SWiVgeJ+J^hkGd:[Cf%jDOhY;XR]]IS"2?%:N=)e@?YHM1"s!BMp$j:cAf)O'E5U4ZcthY#UfPeTZC@9#Si`R]*UCc_9kaqcn3Lkn9#"gc\0.nrUZ?(]['Q%pf"i-Y-5[.FB3hSUL[r\)^Oc$k[.7l!u'X,[,83>>fP0;3;^bPF0m^["ng>/7lqd9h(//>??p\%ia"\gcP-*_<I2+ISIKr)<Edbp%eR?"KU30+saoiQs9@JTfY.B/p2.E^`hH(WDormFb43O"mp:tmmAtcPKQn4g,8iD$BgO8]]nM(!1\;Q*]qc6NIjC"i+L[!Ge;3C0Z%2R!tI:Z!<,e4ZbffR!/GZ(L<F;lPqHhBl'3?$cJ'ahh3N?+A>P6U1F\6_n@=,RaLUps?nC+M]fUlRWL=ZT@5YV(?^>$g=[1T?A/>%d+)7u;X?dF0!/##p7WT,hW[I>@:)q!6^`C1f#uEba*qbp_tLB4EL;[3h4Pj(=HJ4R&jC)ATo@D4qpJD&'!D509GSOLBa7G%0T8V0%!9WsNdN!C+8Z/l-`r_6S%N8mf9ipjqkcE?dXJ+lF=)fUk6<dd^@dMush48(o=_SJ=e3)p]DGT4>TRZ=ec\Di[h`74032Q15b*6/k%GSL?[UI6Z(<f3_GIr_An\pS1$UfBgc<SRDK`E;sd<7X$6@#;(Yr+U'geI?e.K<FX"U;biQY&80^ZcCcfg_"%=r5hqt"7Ao.,s1(p%D*+dp1"I97D1Z\W+tu>`BO\]qUtWA5gDhgtOi7Q9'F#$S0,`*=bqf*</01/Wp"p?n`\g9KZFTS4%(`/&_;rtNc_,'q)!Wi2Y'gKp%>He"gd'_2mCR6X*9b(J+$p$=OYkK-Kp).s>j+GIICS*moa;4,&LTZ%0h9bq)Ep24icr"o*!-7;W\"i;f!T_V8c_.VXE;ekE[EkKZ%IB7K"SK!YqSRH\GVJWf%JZm?%>.Ns68l_J>KBN!"!k/t!-Yqd9=^#1)OgPG?4%+bQp[eNY%_@KCYJ0$YR&H$%lO$Fi=Z3CEB%&W$%_.IFA;;=7I2P&+d]fskP4(ljh?XKSWH)Zeq_IZL*.91"EG&W)AR8RhC*-t,e9U`$&CJJNEA*q5.FI,8C748G6rMj7e0,oPSS)`/K%dU]*?QI])Zf24IIPMP"baR1%#9"sr`0ilD6jjuCZ/#d$a>>Lq80"1u%[(4er:",,7#^3&N)-H<NfpNe2"ZG\tN-f'@=g6"@1*:<&%XGbJip)sp3d6$F=0PoFhc,q<\Y#7q>O0<F.@qXPFZg9=!d`76JZd+TKR8u8gpT:_(U>BdhraaQ9rFK,>'WY&u#PRDe]fOP8*aefm%"h!CW^2I"@(u$cH`bAGDR^Vjur2*pqD,faT%m3Oc3X/o/?*4(Ka#_2TGEKr?YC3O(B3jTgFj,]A-3biQ=#rG>2]0[m2]pS<.G]+.%8sMRpG1OKEkmCqN=!:j&;E.j`(ip_4l$Z3te)SkD5p,F?JG?\20nE2^HDTN)9tjkp>?#`Q(f"Z)j#`n5e)>C5/s"O:@YX.bHS)DV%2TB&lNJM!8FS'iC?!nROWRYH^Y@a[_E+5`fosdAk2^?j2:N_P!kHj%`*S"5M"gY="L/h<K'0=i]0&,bdT'0o:p%6>`o>>.WeK\FF%b)5;>TshKq.b!Qf2f=Nh;b:[qD%ku&\5%09<7qcRUlW?V`p:2fZp%NIVoQoja0g>ah8E-F8_(dYnJ9.k!L7(pMZc(P``5d5OH5@b%CgD<sg.Ws^:5ZI&YcHrLknK[p,:Te?P_uk1QMi`Q"cl>:QJZkil0<M(QMmB%rhJ!"eF:QC42)2:_tBLJ4>Q>/"9-S6s%=m4aI)1O%qIsX!HXoaS"nT?4",-'TC<9$6/O-EXO%b8"*tcsNd_9=6%cA\57EP4s,Z^L?'$V4&7ln\Mf27iPG6X1n\:!YPNu4g*BWr:jB/!($%>$>(iX=KG!UnKA8FWVl1O>"()[6bZjVN2HY(TObE46>"8(X#o!Tt4/]?E\c`SWRo/1PImqLer+tFce/CP3[he_8sqL$=W6#Rqs1/%`I`!+@suZhjMPt"9F&%Oht_6)e0"!?+0I^5HI2J,I7:*ccA1]sTfSio39&&.T>44tE2=:8/)p_Yc%df=6`KCd_</Y#e/cNR#+Q3*%UIr<%o&6ZuYs\?lS.A\1McF$JTI6Sf$bA[=fOfI3WZ;aU-o"u/>LnXfCl+>=mHbqhT3dRPW+I;ca*u`2#1pTJ`I806F#UGQqAAnS%DiR!TdV:_-a1uo]BZFs1@`<S)3W!ZS@EDLjVQdI(`,Q9\If60,dq^'D;>ZDAr@@N?ZhMutVh0t0*lEuDdiQq/$edSuHN;+UoQDA-%J>o/aa0;0.9)\C%%..BZ&GB8mLARsa:G8oK<>fD.S[g%Y3`SPR]5"=rLb"uEpok=\;3c$3:g4g:*sRjiH?M6_N)]"WE#GWfG6>oW%oge%.A>EOjm`r90V-ZV@o[=W6[.;1N<>FaXRo8jWgPjYYAY<n(\3-pT%S3(`WSIar@7?`@ak;ti\1lTE,O5*4,SdJFNt!o\%e[)e%&O#P+HUrjkg6]XQ_Y*$"XIT^MSR'oa.U8YOdJ<b@,SdK3X"a$B\17M\:&>@[B,t#LW1Viln];6%kcQ+W;'.k?=@"f<3)f8*p9b-@%30:C$[h*g,3m?]<>@b7Ub69gDIB>52lO'OakQ5Al[J8tP;/.@8(T(/q+tW1rM0KRBclp.B=%^b1oqMaIdiY32V!B*]h]JuE5HZn'%m_:<E0>:Zjit%-QXj4]WYl="Sc-cCYbgF&AS$+USr+kTu>#)/9St'YH%jmT3f3'IHGH^+(IUA9)[^U)9@U[+`h'B"2[qG/*%rD!*%P6/2"YkI=g.bX3b1@#?Uk4@><f[7%Z'n[jZn58T!<QT,!1@/nrl9XrCmE.`b;=0uU\QDdJL0YtUm2un?6/<5/H>6Uo>"j+W#;Z<[%A_9FMD)1HI2_Q)7K6j"K0+TN:`V9/IUV6?(<QT.Am?6;FP3P?B%\J/+K=8G52no<=pS)EL[r'L(\+@=S:uGh&)onH9Y)[M<!qe3l%c0f:lEP>JcE6To?j7?/bl$]+/GZCNZR>%-N%3moBc)4E9&N*V;7#=07CDV'L1$#dA_#dg#.JJj9]gdNN^!rXm6<0"o*rTh\9"ZJ4%Wd7QY*TBZFa*D@aF^QlEQ+\DD>#V9$QfPaM_R1(@lT#pTAn]uc:e0<#lYHBR>_fi'!BhW.\\<rFheL0rG+;IN[g$Rl]gaEH;bO7e%pZ(P2Q^^bCo#nmUlTIMbaj]!m2I3M8R-q9Eb3T,gKc<uL?!/dcH$u'/ZK]MZJgKTVcYU1u>e3*S+1o&&Y)KaV3Ld1%Q==b)J?nF^%]'<B@V!Dj.18DRT7.)CkY3_b"P*H-lVCTid/)6'l+IfOXcf3N0)alSiRBPFKYCjupCK'D2JD#$U\TD`UkTI1qb(M\?r]mgSb,/.>%CtsLu?.o2dNH_4jf#X^=gV;0MW4oS%>.a(pVJm(!FOdta+LC=D_H>.;FKJhW/[[lWe+JU'm]u*"/?GOrB@E,g5e5DIc)*#W?teKO%FChp-/MZaCB@E.-dM8n9rj1k3d`:.4O[3O,Q0$F/j\,X,FCiO4?HX6X2I2;9XoW(^Q0$H%H&o.Y")rO+rLOG5_Y[e,4/`uR'?!?I%GV=?3UL)qYD/R2D`Lu+h/"9F@m@pNQlIothp$gK$AQsp\23s,Fiid,G(A14+rQul=<+\:[:TAP0[9,_sfB'T<Vm7akFN<\cq=Jh"%<#/$PNl/6?doG5QlXY%H(/`30oCX&(,a<sb\+.[F;QT_g].S-Tb+H4clWht=ah*&bY+!8@WGt.-pR/WOR9]Ctl"\`OD]bT&&)Hoh%TJoYsZ$qm@C-6Q=a.rF,qr`DX4c4(t\uV$q[+=Z54-f]o9cS,K="%<;Sp=AFk-!uSh<k\&cXM1YYZC=1k7AqAg;7CX\NI>_[:1k@%5'?4*Gp6OLk6a9!kDmLP%j7";A*iY\XUN,4+HF$9Bo&-e+@0O"Q*.kG-.dENMg/cJ51.2hV4]?B%97Q.KB[-1*Ze9/7RJ1*/fO"g%OO6lp25?j+"?%?,f0+L%1*<Fj^'^Q?.a*ARNH`uMD^*N4P,P"%:E]=.i8%D$_OVp`W3ad+[;B5X0.,98'#iGDq>PcH]p,[,'bEH2%HgFABX4I*OZ_1?0\0\a:;>K,"F9.XahKs+77%gtH<K*RT=RhNN%[M?N%/"UAWdC5%ncnf>+j.rYASf)qWD$jdk3P>1WV+V7kKLs_%e,?9[CTUToHb->VI_*_cXE_dcV*o=,X"(iIf]>I_K`faeOeKr;?IZZc>7qf#mQ+sWe3&J6]l7WT/'Hh[lff7p]PuL"]@G`ME7[Pu%V`4#JOnlLN1SC**3ZOdG0BEWg0<+5r]<548>2$S70<*5aP?kqBfAXEpfiB1qk83RO<].o?Q%:3(8[q6toiaSbp1![,6S@_%rP[EJ%dE>FS5n,'gaa>'n@dViS=a#/$Ffr6HDS91a2'S]c!@66*0.P>J]e.gGTBa",G%ck8'='BQksJPJm3O.Vf"Dgs3]0uZ$r?`nCK^,?%<>Us@e:8H/9]u-R>K`:@*RgBZ1;`=EmFK!N)X\u$#@go7nt_S@\kWmeq0g)&n(k.b7*iG99_qKB<lP:[I:(6d]2B%t,ILB-NN&4Q%\CR#t.#'_(>,-^$WMp`+<[rh<GL:8flfuTqb"<,>2=%e>HY#ZK#ICAsN=BC!pdSbS%V4q+e2c3?%au'*dID7NmG!6k5PKEu5U*C4%eoPJaG1sCA<$CS<?&ksG^#&\Lq-;Tt.a@<pmJ_Rf+6O?OGK]78d.mIXc-pn&+#iUh?>V(YhQ3h;^9+N>cL5-XkL$CE4QCqIl%sV`%n.+4CmGC]Nq/A^]R%3lLbsQ]1$O8R=3VdVM0>?gT-/lhXVT3&(gt4aB:"ZJkrHfC;r'"IJW42S?orr8ZTlGO:c-?qP%f3Th1O!oN%25lujG5nd#o3hAHM@\N3-bl*'.WYPY-S&-Em[q5iV+Go^0gbBQ(Y@6-F+lH`_WuO98jB`,r4<FY+)E\+n)iH<b!DXYYC:o')YC%G%;"a6\[WcsoM-t73n'b=VT\6dFG[YU=6Q4I;aNs'`aopp8P(^BmZMWbN?<"@s=DKef=gM.idF83+'/A068sE(nE&XEg[_2Rgek`qV%-LKN@:!R^#\\]k/cYr*gO0t1rT@VhFKqO0UUcKgdY3qN6"/=&9\dF.j8o-gX2PAEs:[=9s<NZk@L*u4nU)8J_A*_9DB)/gj?"d6-%"L)@sakjAP3^m^S*,I3Q\g\2'YH^7Vh1TTfRZ^=4-0M*_dd'D;O[$B^.U]ZV\BFKl-;J?1kL1=gla!S2:!;Ykl)aPaApG_)4a-L0%U[Ied)]pW]N>kF=\..6l!G*L(fbhLV%kR+LJ,e/fN<.OGKKV!#ZL5$$FcW-U@dN<u+H"NT%Ue+?Z&VimG#fW[<Q@=)#TC5^DMhT'%(Sf7KCTbih/q^&ffuQ&+_)7e"S!>^LI%*sqq)Sa`]@Fm'b$9+CZ$+I9:h9n[J7,F!eV0_];JCu;heFAU]1XEm*]q-);EL$-9<lcn%g"ifPX?%eKN]1!5WAX]e@e$J(c9VnVgn%D:S5LH.J1eSi:$!qU\Z/C.ltcWk4H#'8pN$E]LA-[Zh!_;Mq&8jFZYS<;f(&:fDD9Z3%I@p@o$jMQnE0(op.Q_E;(N.b5c$AP"$a=LY?nnCfLBOk#VPgGo;:S+U[,Y=MJ@PKiB)reBY:9e(MGW[`$a>$h8'ASJO'-u:;Q7#W%>N9+lG,V#Lob_2PAcXqsdO#4'--*"u*W<XLBA(?hA-#_,an:o5mONQH/ZU@7:L-3-f@>dq4[7*P^6\H,HBbVWX"a<=q)Z:32Mam!%fLDGL%%\pjjeJ<`mU!]piDI<E0APJ-j_O`Wo"Z=.X8@?W+-5tQ?3Qiu1HMS(eGaHieDQ3cr<?+<$K(Lq81)s(C.%[gY+N>5@U`7H%dC,n?qR-&)Q/l'?oWDPP.LWHVoi`<7po[tNY>D&AhW;@u'g!\EqGl(#lLnMu>*Rh:]70,l6S-P`?gmjAaQ+8T]7-9l<TVNVntjZV%rRrp,p&3%ihXt[aWaAOTJ<[_4f7$$I&ZX[%lW:YlmAl]Mn?--qLpMtBcn9M,VB8eb+'DcS?gmj!(NacB1Os]Jg:uq)AHf*VGQ$6b%\eS)h?,,],(,]Z0p$;K<^&d<-f72DUI4qu)"*iG$rIp+DdG<EdIdIe]9/9ClHIo@u6:JTQ=*U:0kBHl._r0l_rD]:bcflnLY$ZNf%2H5cD]tWf6H;C;9#e#omJ(LlP^pTYogAAL2:B";;X*uXCY'PKIY<;s;Mer@+ldtj3*?uj@ia'=m\&2Laa4Efr&,/6$rpq2R?hN_K%S"ome^\1aIe^:h]^$F9VPNSJ1rnmBas/OsaZI1eQB+0b1k$>aqpW^Z*JmR@-C]CDA+7J`B&Z!hB4heXgl0)4I#4`gB7pEPoonM%A%rOR93YJ=TCHe5GIftr$b:M1+/q6$>:YL6MNHHAeF?HoIFYqFr,CT$<bh1<7(OE^X-On[T*?,(]2YPl3$VgGE=2L9<1qK3Tq<V!;"%n&b(q<BoYpAG]E,l^XkrYPPZ+En8dQIMI6(e:8;`f&OAkm/rn_HqHQ9lW9>m(NmSsrLBd>aa0kjms"`AZR^BNf?[l1/[,$D'0U$D%ldq^PL2&bp42't3?89qgM1*,(f01A/8EBd,okXT-?\ptte%:(rPT\Oc#4\j'>offWGQ$<f/ACE$2S6DUGQ$5'LCRIW[GUXm0-!AY%_Q1gKMg/o)D5PNtTf(i):ff+dbQ#emgp^P#FGj:ISD+;*]4m0,4r2DWF`22i43)g@g3.`RA(D0B:muo,J]_eAG;4[T1VuU.5>=;#%bfrrM2Ss&iVA_<6mdGd`=!Q0YmgnUE`YY5%+*Q[GEAI.Tlh12#e&B9!<L-E6IiA2D3qE,eC?3q-g\K7G0?M)`d>)B#j+%%K2(,PU%h9HIh-V)FnoCUB'k0K;W?h]$:>TMr%hV%VYq]l,akJtuR_r#s)\)qn,hOe^\9qIu\btS([)ZR9rI5(9Pa6h*kQ,idlUWJAiqf$@^%o]GFNIbYn>oj[2ro@s/1HtISCl#,k!M._>9htm<Mo"r5ao]N@4O^N>3n'$].d>GEt/MDC=mlkQ6>L.3\]WM.G?ha<0Qfme/IP"8V%9[)p1ike22drO\j@qIIMqh/0/6>:Ap`r#E+ro*%0B6Yp#Y=][qljMpA/j2>"J)#G%gg#67prto%amTL1XPUWB8(M$33r3t]#(#k=%b.hJ*jMTj"9\ETpV,(G;A(/cE:CbCM(OoN,&!"*T9RK!L]bokWGEWo8*"(GB[P=+,TDo.,0sg[0](pYijSnmdTO^aSHjcZ[s5#n7%C\I;o3r[b$XeIj"rmk)U1a@Eb4=mBD6fTg`2ZG@GrI'09p1c\eFnf_Fem"Qaj6QZ/q8\h?<otL<^Y$aXGGd>_XIeisgjaWq:9SBK%T6Katan.Wr3ESG8g#)s-pFAm@+"$MbP;DO2j%i&&S!2U1?i(dL(1+0B^6nY7S,R8PqfA*No-]%MK(JBuZekW!h&K&a0oV*Z_ll@J%0&HL4Q]FWUe?.a$cR-^ao&etGMZ*b6Xl*DtoC9[+!T7A#]n8ONk4m9K%p-+0YAijibHIDu;kJ6G+(&&tY.SG.gr$dKGbR=F=mt6L%rPQ#@_qOnId(''hf)Fpds/pibfK]:=r1SW0X<6TE?N3nflqPl"rN55G"i6"!m`ekY\%X]5l/m'\&%;of_WF9H`-WQ&/m\A/8Me4J%"7H'WbP6eVi,FF>J=_.6lXRno_`>th`dhkPnYMVj#5@^@=UX^pNs`u*hmW:D:[.T-a%nl:/Dg<hk03bkd@Uu!I5ag6##iX\GD!/E%%3EKX)U#eOn'UpMCd.N'jb<GXbU-)MR)udK_2^,"T?ui8P/r:Cf!FN(cTcc$3HP*"p*Ej&NqQeUT>+1m)4UJI1a803qC-Z3IFERg%[I`@p=$pZ;eC4.V$3_M&U']D[(K!9l^iUX!IsgY4!>l^cf"^UmHl1H7*XD8>Vb^ZU!<a??([!Bu&7qAs5J)/%DQs7k4q0$hIX]6E%b#q$9I&:#^m4o[Yh)FXq(C0ieUm)V(DsHW?;;c\8YQ3^TU'1R9HUHt?7Q#I@#7#UaJ\*WCJ"Ag]YOaOhmn^A(WFlk**;brloHq87%$%Ji$6d-==a.nIe7[rR9p'%r+-"*L>nI_Sqqg0[BX+U$j1XmMe$_L$3-GUkOKO-Y4:!q(O5<JCN*maJCIG"-]oE4R+kUD"9.D:Hr%0!,^5RKQjlGZf:Ldd)03^>)k'cENPIhd63VkLFd8]6Jh;.ZLkPVJr#Jks8jq:<"R=D]MVcYgYi2$TDp68r9[kPXIiqiu9eWD:([\%YrMb*l!sA<Z?J/EcPr9E0RNoq:k\`*rJ[i]5mL@j@JS"0iq:u@_sQI8ddd,i`Z;gB7$Zoe8L8",k8D(@-WZ"oIgk19,#>mXqf:S9%ES0!aPLIMEo518b+\k#;*d7lLna'Q^!bD]5ip?@Iri8==N.F2tRb(BgZIpH6167Xn9PE9nj.h<R[:UlgnQ"+"=@D;^qi?2n]Gu9F%"p>QUR0!X@Sq$<7()0JkYr&,?lOQKXq3a:_+.e=(o_3UV;*(=Ve%Tc=$1fM9g[!dUD2I:VVPW:gC9h2Q3FQNDg02k$qs`#r:[KRE%d@H[_^%JJi*W1$%<BMni.8=M&S11G'0k8(cFU-3EcM=F*51SOUSRPRW`0tnF@brr?C]qHnrOK-E:6a>a8#52e2ZiHN'Mcs?%UNDT%eK(/V#HHWL9,FM8r=K._%F]B;pSE!J'j[?ef3O-fQXUbt%t-(jf2JAqdL%-grFZi^/!/`+q-A8-Va'8?#?Q6BV]SW+pPEkUnReT&%a7bEjGN)7#pS3&5CMTm9h:$<9:o@rpZ;/a4.=L&*(-ZroZ?>fcq>KU+q=F'2Z_7%fj+Gf"kKh=ukKdLrKsgi(Ei+55lhl$RkPTVe%FE[NH_>3\`1X4Bu:QB@@l1Ei#pZ^/*rTD46cg3kL0:dr)?9&\0r,qI;m.-2nQ-4[&<%dX2=J.4agQS"21ujl\@;4Y*4g&>6lEm/X%`FodL_`N$i`]E.uii2-kX!d(@]$-!PU9u2mRC4L8^F!*<?Tn<QB"^?%C*gIdYr:`&X5mM[$^p!t6[rdK=LRY&'M[kLIeLKO:+iIe%(8f=e[TU)H1.sh?NRL\>`,]ojrNt63hZTRD^9"7TR\'>KT_aa<[R]1XR5)3=M/:2gg70r`!<S=5?#;I^7HrU]pJ>Lm$-2U,31jEq%!VS\DD-oEfd_WcR$oXN-s.j$P*5%ll[lij^A6n/efq:eg^^9L_K=;nZ-m/H[*WJ7\DStR[+B`CXVT'NQb!:8I3sh[`q(H:*e,>#[%'!>hTp>YA\e;q"Eal`Tfhs=KXX(N^(5s=8Rg^AYLPnA-8G+Q8sF?288B=GpQkr(P.>Zc>qr;=Oc[9r1DmAkH7rd@&;cbY'5rA=IA%XIjDY^U4(ZC-qf4n+:14<c?dt.(Kd`I4jE?d6EPS$E!T*(SgFjMalbLM9\<n)KiQLf$>cVe]ZQ,>EnKo6UD\4X3K+sZ3aD"R._&.%KKr<3bbtX<"a9I_BOh&9keV>Q(!Wp(;7V$Mp-`Bl)P,1$FXfBpfG[%'"M#Y&0X6r=aQ[aL?bH..e=l%;A'#[3=cA[Fa!!HtjfoKR%oMWo%%Y8l-IR#CioVeM)Jdh8([IIIh0Ut`j5,bVAqF(a(n_s&blJL!=S,VdAR^`:Yjc'L>p3h"Npg0O`?u'acX`&-4(n>SArP,2&%b_q(-kP<#0T#JV=DkI#8h='8$rqZHKnEeM[U%qcnIK0*"pRBG)X/gGGs52l5c*sV:X+-2J$cDS>Nn.OOcJnMtD`?RWL+,\UrgI"/%.*k.l2luS?^;.d3<nDi^>CX)R]j89Qs5BM$=X6d$^f7hWLgJW@6fTCI97L9.9^R8P7qR8LL7c3ZBT1.t/KBbom[gM@b^$f$kaeWJ%G8&PApm><9Ho^qDo-XDIHJ]+e2H1cb(,*M$hKuT7P<UU0gFkcJ2K(cKml0[\5'g2hNZ=5#I9Jetc+MJ%bR9m=]JU17R<oZta*DTa%N3-^t,;\6>%S(+@7pk1Xhr)9C7e2Is$2C4!O%hgTRf>GeR=5*H"$^!U/RlB+gg]D`8Zr)Mgd4<g8?VuLg_q(a8?VuLgd9Vg,Ir,`%>JPsHat5(sB1oE-M;6Mr;j+2Fger$D1'(<&ZA-@(d:4P<7:pKpruXla@_5.Ze^DTF41SG3n-/0\@K6f')$$1TA-&M8@.s#3>8Y0)%_?'5>m?-)$Q1ZU20NM]a9T-[g3<4I9QMHCXr6sp^*o0G`M`Z#/T;%AuRRHTMT%W_Uc&H*iP@KZNs4)U#kUP>Y@L_D=`#\d_s#Ic,%Lc[8W=;goccMFrg//<UW[*AV7H#0]1r&qYG6b^lcm)?u6ZFC1m]"K-GnWX"2&'$L6q@f4D.>oeI)-U46;,c>>'o@8'2bMm&o1EIM%4mgPd*OU?3oe'Z[*QZH==s5U+)!^IQ/QLN[n/*WXD2J*D:[NI^a)sp.N,<s!g\Ji1k%rr-[qqu#?5jc-S:&[YOPo)jV2K#5WtB3`%\lO9qS*>MHnG`FKgog/K#*\jsk]d,lB-ZH;A*_VFNjAHIGtSsSo2Z\,k/ip-*8GQC;+dVO2ue6hG_<@b,`j=H:Bc)p7khg4l2CPK%rI6WC=\luqBTDa+*\H4U.:HB=j<@).?MLe?#q)_n;1C1L*9rf[?#rpW*m4Jqo^1/".WG75F*q,>4eKffm'^`]6fUVu*,<<u#=k;*%BC>ES\oNMAm^MuL(*EEo)_E]_4;J]#7<7^4KY4\1>qGd%:9Ju3^/,h,jpE-]DH;$/VKZL2!8#d^^qR1H78%T+\'&^m32i^"5Kc#m%QnRh,k&BWGVJ#M@Ef@P>Lo/HkAWM#H@t.659USi7D@)%o<K@r=%dr-)CL>Bd_s#\FWYl06FD%uai@q,+o`+`a*F>gpPq/EXT+"ar%rR^\BCY+/+p1OB#=9eQmMpbjRs(Qb%DKH_W[!u4O;(DC@gk9Aj/M\:s>kKb"P%9I$/`UqV?+&Y)<kQNJlG*`jiQ^.]6[cI)Y=60R%m6*Q$lWfpZKtFZ!lZ1gqqjqZMke$:(qsJh)97!FaR(%RT>r-^%^3s5"H8j*8lh8<sf(%gt^0J.Nos]B>qHABP5o^o(h\D3;T^B9a%Ul@O0on2Yn\+o.FZkN(Nq/Za[HRMM)\$:$@f^.rW3DrrWDf^iHnV?^ViP,4.d<6qoIQKZhDQt&Nb@dW,@k$neF]CO](ZBpnB-AUh%>$cKJ:#WR^IiCVM?QFOkd9PRS4`Y)-m'XF/juOLi)3_*\b4au@!VR@(*B"^nYoZ+NN*QmPDghVPrHrb[2"l:Vj7`XtQb;o!rS#9C%l'G5/f=T,<;I<0VWI1(sHhG964R+$Nod+MR!W'P.4GEh+Pm7,:@`!$P?QoGBKmq#+9)StG2ufBm>NE-HImW]&=4:tG=jAIj(lDrl%;=7"<bD2&benVB@c5U3mUCmu%B%D+[c3NZVT4[;Sl-hIZPXB)CT6WED2q7+)8iV4[=nV<#%g*pb,u$\e.Zhc2d_&G]QGm\Dk3D\:%1hAe-F*nC!-[&:Y^;S$)]YEf4.Km=2O3oFH]/4&H?l\dWkH9\UGkcb]6XX](]BFY&hfmgT1c.B+OJAksVd!sKT<DT"r;EgEnUIb1%L\tT[T*PDfLSNfNNp6RX%Y,Cic-)g&[>VeD:KPI(e8Y$:d.mG7X8Bs1hqoK)hu(*rs1cGZ#WgXU*ku#'?5T!JkKs"Cn0H5u4,;tf%gD"t4c=)ar6f.;_q#AJ9)1%JG9g?JOq_4M36_;L+IfI1P`uFfoIfT=00Y-#u:S5>Zn+c/%TdX\%@2]R#"^0?rr%&c#*fBNCTB)+<%"%X&X0gak(fGch;Ece]$,g<oKptJX328W>#8n2N<O>ubBO>I$rq(n"^JA2[mg'H+T)R_[u)_(Di&!]#"%t=C6A5+If6n,TCPD1A0%afr0.#(.?srC.Ra^&^)''W58L5QD(`,6@RBJ.OA,V<9i-E;\'uA?fka"^s:tO<fj^,P]$7O=6A@^)r%+=m/9T0.mda(`W9BWg4S*%!W_6%N7(2^7>TUs:ln.)RLg+M+[\A^PQfIe26[57)>b;QfRX'PK434j5eIZjBBG;#NASs:T"E3'_*&0>m]ma]KQ.Wm,m1s/r.I9J%]E!m]a5ASq)d2J%(5;jQVErFQ-2RZr(cNBl>D8.=`\I@i+Q"`%<j8GicjFCK#Nt$cO[Wh@pY:ZHJu0j7OeH1$Pb5u+J.QOZF:uBp%Cl/E^*!0\R@g.kI%t05-PE>%LbShU$)VZO>+Fp@$0pZ%JV?KVF7M#\OiZMu(&ab2QbL=tM?r>^869ejKjSM,-1+s51RO'fB"F$2?%+j:O&-&jV#;MHHG'\\YIiC?J`h\fOZk39,#;r$l[+LB+HJc&HbW&6+#28`I,jp@2c3,G]m+?"*Obf5WODLY<H?utPPd.B%Je-$8"%&gmCCm+!u1;ND?j^_5;#Qr]N,%5.rI!(cIs5!r^eGT7BmpE3mHk/HS($>1RV6QS6QQK^XicboE[0OV=tLn/1`mgH&4o*LL,p/=0R%Ia5h3s%&?<GsiDKP=f;l!Q+5Sr\?a!bp;hH>$NjYJM&0U:e;"b`,R#Y4;g9'Eno=bG!1jA?<IW!*KC6s4JJG+,^XfG5uQX9?9f^P%^n@kNfTPJ*-n0[V@Z?]u:Pe7Gl<1s?_[oY<V@@kcL08Dr9L3'#,cW'#'qctu,4<KI!oH<i?p4,07.r2WqLBIY3(s%kpL4=P859?h%-RnTghDGb:K9IG@9gVudR+"5#-^;Rs*\fj/"b%";/5H6\88_!1=@WZ?JY.YAiI[m+QaC0$$)9o&o)LjDd`AaKkH7aUKQ_r[16Idd%kC/(PP5;^MnMtP]J9[2098Q"XcW1[pGG4"D$1Jtn57.7?+`s$p*[h;Ak;Vs&IE/GiVgb..:INFB0dEE:J0Z:Z<CBh24=s@eUrOA>%8hO?snd,kRR4jrN=hc(*Jl*(,+CejpTKX#oJ5S-,UkFVDpiHW=PjltL,R*uFIn,GU+?SH](eW@%+NOtWUH?R[fIWPr)@-=gQA7Ra%Sd_-O'Ni_dSh;]4^f#!N#oSX3//l7N$O7Mf*RM,LEe%l><`p7B5aY$"GX4-9J:.lrSNor6L,Lhq!.:U:<41-.NkIhh?kEW/JBpZ3%d"I(6XeB,g15ka/=C9.VR'=.7_Pn#uKU$idMZqsk,ReKnEShn5_bf:3h__NkD3',E*]>X)_f0J/:dTpkEmo`iXYD@_%n(Do@pllm%@\Pu,<#L3T?CWI@!N$8:UWS[-!E968b(d]U0d&Nc'c3OD0Mh(r@(pUt\\k8J@7gjd8Yr@',hBVF!%j3p':<SRX;>m='gYFR"U5*?%lO0>G)>=,fEou;a-t&Iq3QsEj!_'p-nd:3+Mc`%F*BsT`k<N\s^("5LPg?ki;p'c(NMdM'CK@*@B>C(>M6h`<(8jQ&ML7Sr%B,,1%VhUD]?o-bDg-*?>a-lCVO+\*,ZSXM9<mj<WL*C]kE0&+I;ksMRI%4K&$3_paYiuG:@5pI`rB<MmSc_36IBb04%*qQfj7-2d8E#rt%W!2:KJBpg8Uc*C::sqX?)A)TI1;FOm0JP3j"%U9SB1Xj_`8`!UrB`obJJcC?_*l52Ss5$iiu&GIAu.o.RCEmeAp$Sa".m/Uca%;N%Tm3f,"lFs8K%(gfpJBrt8lG6^CD2^ab7C#R%FT%!J81^G%T#\"5pEfR4lN>Bm($Xs;opTE6i^?'(7"b<S9R9gm@D4-!NG.'.psB+%O?-ZmRY0l+JL8i.MQD)+<%=)MV.HHDIs?C_CkIo85ii#;TI@$P3DA)K7B2+a#]/-i0R6*aK8t_&a?W<h84Q$-%kM<0+@2=:[R;90%,FEZnpe%g]]p-XXkMq,V5"!VKZGRKq"&>=/7+iXg)nPNEWXoQBbQGikX32+s04jOgJf(dOYacu?kpSn$'$dWt%OHSHe'sRJOWWO2%dM#-=mfS0dnkd9dOj@\Q,bW@W!0%1[Gb+u@^(!,#kU-sZX@>6BI5jB%@taGX/4,2A?mC+3=98R)\X425)rU_sPFi^DJ\f"OSeA96%<(V@3;$`=S\[%b]3dG[0_]VPT"Wm;i$kZ$(ckJg=5^agc&Xf;G1"AaU;Q9R6jJS\KfbFmf\'BTI#+LX7#XD+iL-nkte`f(;4f'iR%1N0X54YO'@8!HT(e)5c?(LRGCMT-)`bt0TKfB5S@M`t&k-dTjT%o+GkDchcj8d&rMbSlM=%?-DddUDpWOg2(j/F4'R,X=V/+g).*%MT6,0J;UmpP6nGr@[m0MWcZ$`d)tIa#_7:/W0](QeHTt1P$HQ9Gc9kQTf\hNL20*mf(/s)L@Et-7$bn9C)BW!)Rd7EXZ:Dk"Oea@%=9t:^JbA'@>4'uFH,?.4CD7=(a'_6AZgaf;Zg_^!2<^C;3W$f(B\c;?^Tak'=-e?)!117)JRF09aC^l!&EKK8%@Bp`C'L,tM4YD/%Naa`+_9>FQ.ps9Q2&up16mr$tflGZ`MAF6gPq^OTFo][P"mOkD!J)=.7Km1i"gL3P!%E+nD@i7Kbe[kmr2BZ2<glD,a!B-N@;>ut%O3L?LH#.)o`Mcq+QF2&7Q:0;+d]G>UNC;>G[oEFA2+CS">:oGbh0a;Cr;aO@WBq"5/#3RY#W"i70EUhs'!,[OW6TkMUW<d1BgP#i%bY(O;"P8aap'*dRSgR,JR35n`!)k(2WHUH)9fI)XpaNd!S5q*8:dY92OJpq>18K0B&?'8-*:c?"cp]/>PJh]NJm@P?85UO5@QqB)%KaHfkTb%>b^*5<h9u3b2?L!AK#Xeh:;#j'W-:]@P2$?3Q$O;X6&;@@s!c#g<;[)gH21qP]UC![s$K`L_,4WtRkhVCT_i-`%^`d0$%(.=8j!A?p*6N;>24Xd"O$@BqH._9Z61uP3Vb!Qi;]>>qVI6m?F&1fgZ+q<"_YUM2?jip+g)CdDHG_Qe9;Dp#3$UQ_5e-B]A3sa8<%7O;W*\(+9&q%PZAJ-Z4`[*TG((*siTLD1OPOjbke<(kfU"*CH?rl(pk5X,q+O]Mhl/EkW8j]8+N&;l6:ge%h['?@@GLWIZ'^.C'h%5iR>Pc6WSt;(+\O0A0u9*)&93=;_<V=W%uO=W'DbINJ=q=3H`R]!kNBoOHLunBhln@uF[p`6W6`LEFAij!;$:_:VFbVQ0i\?'16r%l4fYc-$\cSB)r449aqK/fNHZ-U-.qn@;>uj2"XIXiM't$KTKN+&QO/M[Rek<1@6nJ9lCs3p8E:Qo^'d+W[5#-DMtRUjUnS-Qkeg5%&!3j4E/`m"<Ib@t]gPh<+2(EWB#'M%ger[b6$skGB&e`'0dD8T&7$ciqi3_D+^(2nntcEI]`O?KG33Gs366]557QUCbXT.2^dWd,%&:9VD-N"/!j<V#_g^'-Z<d5&776Y%J=RI7q"PoW0Sap+^@1(S6/GCIM^@9#W(l'I[8Fg,<PXh-N4"r4IFm^fRncG38['.9(CAARf%m'Q5t/4!3q=fFi$J<8,(Z3[RScZ*K_4g5-M"6(iJqdS?+:b0FcQs,lR5\)Sd.%r<g"`_iS&:cJliK^;<.<*_"R4DCL3?lQH)'i?M%&?SgHT>il1;<ZcX#X[reJri+407iQN5eG0eSo<[%is/DJd@^MI()mgZ2a^"qZ%,OM)B7Fh5qq:VJ>ODC#g?+PkXPC%60$."].u#N%dlU!=oHR0-kg@t5",2i\=!o=$=N87]L/B;kYX]*E63k-#lu<j[5_6Lb!Y?oT57Nm.7,o0r."ZKc[`RpSTWE5WmmVZZYNt4sC)"`?%;V5rAA=f5km,aXs<g8=?$kh'sU'rs3'6XCE((r%CQ^Ue0j`5AF6,6Jk;um,$$#sA6TIp\?n0mBJ6FK:j$VA)9G#d0r*"W:HY8esJ%fN7"O@Vpn=Q6L@81Vk8`o5)>k%ktS=_c\MG!mZ(Sn_-=k5RPt.0Ta8Q\k^+H$Nu#I-lsnS8Ogc'(+ng&g9"I+`p0Q76"$<HC5U[s%9236.%0B$q_7bo#MaO5$4:U(3m9;B7)\QBq3%Mc`9.tB'$@%N[V'D`;L`CYXC*P=+9<6FU/K?"^pm`?1dJ9BggLLeeg<OVJHe`_V%'%gW-q<*;3cp9>J9GfiV.'Q6A$BS9onj6,9"<EH`M*Cbm'`jE9W'?s;QD^GWKg'6a#g-V!/!7.@,Fpb00bi#e;S7ibc>^@7nkkTP%Ysq%;UQ+B1%H+39L=jN[6rH4U"]tgok(Sie*HXP1KiY7Aj#qXX@#=YlnqTi5aW6_/Td!VlRM1BepiqF(eq@?b"SmW(foWrO^\%;Q%Q@PQf3X8t.B$*u+5o'ar=>*$k1j^NX=Bajfqaip&GT@[u_Ls.C3<k/'20kk/<'[4Z)5'lLDual.-uFbm2jGS`ZmM/F&0$N<R4C`6%H-Tt$XYWYf@7Q2a!#*@Pf^1pKnU/CUJCeG5Z96[9LgH4ZC3HffILo[5ciBi?=YN-4dtQm#YD/,]<DkLCnOR/;:m-["MGSTYhD02V%da!BoM1YlY8<aXM/r("&B!Li:P+hY"C2^(LGlf1u#jBhU!T^!fK_.c`!!5SS>sbDB0BG,&,,Stu[kAM6qURD.;48t[_l\HuprY,2%?"$!VkIVr?N)VZMAoJN<4OWg3'*<`)&^*3u4rWW,%2CoZC'N*JMF8Q[OG8kuG_4X'B."jCacL1g[K,]'_^>"F3?UcK(=3W&!@mY*%hS^C4P7[8ggil>LY*N"A,jB2,[@M$M2KR3(BgH.p4/";k?8'@(A(mTT)(=C%*YfDNOt('e(m0p6'Q,$/M&W+!M-</UaI*XI\S#M`%R>#7mg3gh]H*JY@>,6ma'HnJG00blg+Ajhq+CV5X=<L+*L'N[9#B,ULZ%F1V@o1=b!2bCaJCGtNK]Qdd2?J^q97:?>82a<nJS>EA%`J3Sl&K?P2?no.6ZW)Xgpul_81S:NW<0S[[KE7GfWTa'n.=cJ4]L4/$aq:J[dbGWsR\piFJgc11MWFkr!ZV5Os+uW%njjq%Roa0H%U^;_hqK/!f$&S4ji,*:l37O>WMB>sMQj7k?iiq0"6LU77,URXr:DDh[IDuA<RW@27\aMcp9Nnfu,Qk'S5p:R=Er"2bP;M8p4YIDl%d&/N1-1"PNW.Mf-&*;M!$P=[F8Bsc^q0F=?!@3V'Jah,Z*B_e';?AXC5)Y^_JB5%W4!KWei_R6AO`mCSj/3`\(s;1Ho"!j!=HJBr%RV-%S#S&Vdp8&A\f2JbXCR&LI/FAWfLKuPN.LDM`*%'m97&DPn-F-l7SH5+r^'[HLq[<VHEN$`9O`.k)3+/YD"3_DM6D>1`4bZS&%DC/&S/p*Z['_H)m5NC+g-=JP"(ip>\J=Ana-m*n[9-]6u\p+U=Hj.-7[H=FtCsr#UoIl]*TJ-u:#b"Rf@'HU>1/:^T#STr&n0?23%.dDmsY'AJ58ZX2YX]T73c<M^TX>mc3%ja%rp1'tr,S2!CUT8.J#a$OO85hcoaE7JGh(aOVL9\!U?]Fi2!5$@<G"i`9K';LTn5ht7%7U:]cjq@?\>(qr47Iiik%nhj9,dW4lLS@am*X+4Bko4+88Q8I')M&'CQ*F#k5p:1JlCO5@<_^u<NZdmO&Vqu.AsGum!.>6epX;NJ%Obq=*-k2DZ5]IicOEnRh/o5LJ(<M=k-:l;5AVN/-?7+b#a^krU"='(XZD]P[&XP<%$"IDZWYNHM\Gr(Zr1sK6Wk3SK7:&g$GUq7a%ncL!@ph\f%2a\YWFgsC_nkc8T2D4(K#D>K:,cbHg]`V.KRh!f+;uW"`1ntJ-"%8#\/.oWGSu$?OK%X7XJY+ds7!]S<-GkEr-m7jl%`iFp-KcHKd'%UG1R0_#7nQ(_n1[m2Ds3)oVV@*u#V@=5(-MJer6ulf.OIdD!%9j.5/Wp3-Ho(7Z%cYh?-G[72,]aSq!Y:$MkYQ!T%`Pd;iZkjC?>7c(oQu1j%"=aQuP03SC04s/$X\L.k9<uP=)$c]A'JH?6S+:#lUDeo^R@Nh0=pn/IhHHi)#7qn"3_[/=h1JaHAd>D'%rEQa/DG120ic?CnAq5(SR1c=T`'e"%"X9>UM$^b`G'8`Vdfp[0=[3iFHcr-O>aD<E+[dbog51YO+:fbiciCu:-8DD5LiX1p@\.?W%B&KqlDU*92+tSdl%jl/p`A#PN%jp[9S;X^O4IC\d-nS&:0G,R*?0/p34MX8r$Sr>1-3=i]Kp<#Z\(MR<'Ae>69SX(8$PUfMTZ3=k%,'%*93V[dYY^Huq1BT`s`7^k'"`0aS.0h1tO=76NJVcWi:?Jnc1[lWJG*herQ32_@%5@cS4L3+#&I0YRi`pJHEaZ>]-KW"\?h00N%[dd];f1M=_S/c#E,5&m!c\V)D][on:)EUe7,Pg=1jKg#24Ee5r,Rtg7*l<:h&ds<hIu'BBc]u)#Oq7)^bm`8U5@?:m\/]K-a?VM\%Ts\)oKqpk+Ps:MfH$J9ekB:c7+mdN6K+]?h[W@_Ubtm[0+BciLoK&+\=o<&W+H8lLb.O+l1)mQE?m:jm`#F6).Z0a5dYH/Y02&b+%F^G>=`W8]?\JYMuVD8m#L8t;*_]h3O_dmY:WhPIWD/Kt?@'jZi'7h2d$C/.>"F/i['o`Rm?ph<3B`l?06r5@FNgQ<g^G7(A\VWR_%Ks8+ECCn`iR@CS34Hn,'0fK]3CYoAbRu!pm%E./e1$d%8VhUS.!@@q)7oAD\J=1hZ/P884K-3nrdNsi,`ZoKW@@Tk6%LfX$K?/Zk%Ha5'Iq%+rl2.^VK.*k7LUM+Mu+Dku,5dE;I2g.iN[>>I*OYt]:!e!kl.B2m2SAC4u@eu0$M',\VD/0g:77:OmK/I9kSW9dG"SmKt%mK^!T_3i_1SQM?e1578]Rg9?=_8b13@0+e3:pCrOin)uM.2H="`aT[IdqQ^=muq#4I\8`Q"Cg^i0fBU\`@BRCD,!'/M)t.E)I8HW%RP'\<9`uma;J](%9'*>j;q#'b2Dl)5MXcM%M)urb9P%r_.+L8F@VZU<S^YU0,Vi>#RUg.7HP.;I9@JK+6dpXDSOq<HAob.IFs_gX%-l!b'$r*7HS2Oql+pbP-#ui9>P>4fMOq63n7"chJ8kUL('1j?A<1!kmRX"bY9LZq*V2=i,Gq.aBe;bXSIG@nT+Je?BMD6S8L(fD,%/Zk,\L]T-)-8@s@cm70hIWR;$&X4,j#WKs3.9"]LOfaH_b5X<,-4]:<b4lQQ'7mDjqJ9p[&'k;s)\A3!euA9o_fmfu/T>N(>\B-H%,EbecJmrnu).O>2T[q8YA8EGEHYFZ,6cPuLS;ak4aGk%@PE'8iX#*r4-*nt&4i>0TbU%"X\P0.m#_\<jlW.grU`[!e@Vd5Zh04[[%l%6k+FFdt=;K&:6Mm5k'aFS?NfIW0.7W>,MUm0Od&A2@K;@ki-1^m@f16TNti,(stK$l@c&kAaH@PCl\>1"?65QYJW!("RMb?[[,%dnQ>9_h\q5YuXX4];Mb#@R^L`1Wc_-5*sjEA%J2;QH&tt/u4D4"_glG+^P!q:lGl7AEF.?/B6nAp#R]hgm^jo4i1YB#I-n^7S(J>%N]nc9dB#.H&</F*/X%XZkd$52$ZY>A?_>?C>X]ljb[1&S#L4kG+Ws2/&L#*m/Vlm!L'8Em+&KnZ",kM<V`I<J>p&;K"F8.mG3XtJ%M6Jf>$)Q7*&C>8=ZXST@YpXglP41als.&[02%.JaQs0h+E]?"?0A4R^%1(-2VHrX)6Kkj]mA:)81F0)29gd>IVMU'47(lWb(f-]E%:ecbYj<ubdN2Qf?&\AUkYXQuJ6h28"eJ$g_)2e,MP%6I:@j2]N_/"?$5QX!I7F2B.3P\LH]Ml_:2D"#qO="OF;rEN@96,,*Bc+hK%`XIYZbbbLn.,_l3R$\J#`b8/%)!m4`!^giS?5t+;l4Fe"].P(*#1FML*Jq)$`q%(eU9Sr(B^haCfZ_ta`bO)dCK>6%Y@'7`'OU`A%_Z($_7)*cbr.T@Y)O!rV4]6k%888q`+M^Nh]G0<LO8=!Vqaq0OM0tSd+O`$L-&H3c#[*u+!<Q!k3s?#=(P@_,KK3VZV\1,$Jk@b;%fS##IVj/&SLEX&WpD)hE_k@]0fu\t%P34^HXYqU+1W>%;l3I!e=STK26_GVnq-LQfV!g.(&B<(`&i:@,\4fM=n.n^cnP)N@07qD=%O61#rR;&OOk3oOBZ6r'qbdooB-3G'V7tCgg05V8>2k377d>4b(.49egBScOJ!AYkhY(X1#OM!`*Aj^SI3g8AX0KLr!.b-e",I3.P%5*laQ9%jPWS5C:04<?]_:Qa?Z$=+_tQoUO92MALXeF:7jjX$M*nhEHWa+/t&j7+Do*q(@1:G>NZ!apmA8SR<Y_Pr>GDZXr2?CqSB%V)=#nbup(L==?iGc`skg!hgUK,Yh:M'sR?R=$7]ee%MgA2H&Z^6X4mlGHfINb`kh83$33!J=2U2:,"qe=,9hMaNk_n2\_KY7u,-O%+tdP'`4iGg\g`@%J.qJ@q%sr59\NN4ItJf%!D+%pe$B2[_F,-ol6jQXlc^CZEuTtr>B@[V]RY$Ve\!WY!])7TiW>YQY7Z:K?*H\N%%?:M6e$8BJJ&gXM0ZXGp#5`',,7)B+Z'[j#(6@-O!L_2&2WY1X73V^T]9SDH&/$;mTN"3d98VR/cI#.>9QO>PGrLPBQ"hR!'hI).%)@O=!OGOaMlsu@dZj3Q.7&_Gs'.Dd<Em49`6%/k_!OEcZ7+;lB`'=X"O>1R9(s3B_aXeWi5uNH&)C&DhVB8Gk$)<S)0T#DNBc!^9%9%.!pB-8aaMWRE>:C`Sb4jG?N.r[e]:/8N8T\;KQ]`of(]<DPsD%$[NR4s*[M>HEn`8l617-K9D!FeX\?tk;Q"Wg8e?SkRdg2eCD%/,Z4F7XX^mc6=SdHVgh-gQROAV9(9="dcnp-/EMN4:3/fH9^k*P1j7eLP\C!pRFio3HH<pamH&Gb*1qoOJ8:q#$P?K7mYV'$cEn#%-KU=XFB="Ko$&jt2=q#k*&dl-&!L*2&]>ZnNQ9>s.p+e4ZR7`I>qZsr:2E9WS&Dd1+Wmm%@P>0s!6Q*O;W#k(0V^;GK%)1MPVUBr%LscEBOCk%A:il`=1SkL^K,SmJRN1PoB(ejF>AH&&!Fc9Z6>!\o'.ODWh,Aheq1[c]'e>)LHWgFs6k]mka]fmo8-;h\hK4;5(f1PV%$$^k,crl\`b?%F>c@c8?bUEfsNj[_)FJ+<4m_Ytha3*a,M<)$H*Q=Jb=p#tCZI##++^$u*(=Lb7maaj`oY2^qf+ub!b!-5t%MJ$U%V+B8kRE$`dK\K%^!6Q*I&8*dA.&#i-OP*JJCJBVlC8@;W:CIjN-K4`A4WOn>;WoEYPdOse.fDUU)79RZm6jcEER:X,ONM$b$jBbK%KLE-%)4!\+Zik0kN5HHV^1q\Q,jPuq90b"e;Q]Rhq5!n>,s_iP$D<+^>DNZ_C6sY45hF2a2M1Q)gi9Z+8lSnD7&^TZb7uA45XA%6%N"jeWRQZlU@1S4S`fD<jC<0g=V'`!O%hK7Fe=(bcDXdRM@?q0c;TcJf(^iQ>Zt26e2'NDQC!,Z$-olCeYT?3eJ.YG/Nn%H=&F3.3%T\=^m1V>=_So"Zh1!%r,!kt)-Q[l_$O6rbfq.<b\=;$i0R3Uf4`9G0I&8W@*ZOu>=l.n*bYiVf!W[H`L8O1egT`Lc^o`PYYWM16f%KC3b5V)_A:0`o-7NYin()L_6\$9&a('nQLuRL23j2a['FdDs80&-6bT>0[>8Br=T%=M7Qg;G\2FD[d!,C2R]LP6u0hDa:U'rm1Xt%'[t=/^/,[WEbA(,;_:tc*:&/X3fd0/e-Za4)-CXM)T50UN*,H]hQ5QBI]ZJl0'M!A)^oK8fi)A9+beAj_U1XUV6/<6%s'?I.\gAP%'/^fg;E<F(*gV@EEXU:DSr9-3&e=aF0rC#VqNrqR&.'DCHnuu#U&ZF\!=?OMh0*I_Yu&i]iU&rM'Lp&Tlm-U`QYN^,@Se!)H#0UJ%58Bj.8or)MR,jseGa9M[e21+/UoTohQGR6B8lV;Q)hDnRUg%P<R]\Kmm32/ZR&QLeedH0EIQQXLQ4a4SRP9eZ%6-UF3s*o>_H>(r%*.>Dc"!.JCAs&gI1uWg=Ob^G>=f)ht11*S)//uaiN<A(pni1$`h]WF[U7"NFdk6lL*s+kCVc79-W/T`=_fSREiaErun]%g:V]mP\%n\iAN7*X2&]n?X0MQ43<Ma\ID]."GI<_<teZ1tX3U_:4J]Gq:><,lkgN.t^_aGd+*K`qNl*+bOcC4P@H,*:uGY:<:6mYq;_6;kAE%TQL3,]Un^NA#_sbJ,f[A&WhkmM*-gJ`[[""-X']4=)A5#!ajZ$#njfXn01p<`A%T2Z',L#Gn<AX-H9PM+KB3c]:BO)=4;=SWWo7=%7X4<]+:]EbM8UCuMqac@ZHal<\D'!-W#?oV/3;4BO#",l1j%Gsf'HN3NMmh<W7K+2YaBOsZ*.>9<sT.b7!sRH]V;/4HfD%<pD!b?%5+M=Rd4(eN8(rNJ+E@&m%i2!N`i2j6P@<cN.Narc1AZq1>"4AQ<,-l8T$\gmGt4ZfS(KhM65rq\LG:I!HGkBZ`&O[HAosOT)Q'*C%X%%?/kW*Gg'1-3D^t&JkLWEn>QmA,uM6d0a1/8,X<:$^N!#+pl=X.Ub@:iu*(GfPQL<Qq[7l%-S30upoBr=gBHIF:O8(CgRAnO*/%>!`VW[^\B;:l-4]qfM.TGt@"01-bsg6(iUJjO4/A8(c;@#:T8_S.\7^B]SpZ-$+sM)sQdC&u.$T^t$g-9*:skiS7SO&A#r[1$)S<%hgbD8e=oKk/jM,^NSNBFU9HOMO?-I\R(:8"K"=qpF+U.VIUIH$0UHK&mg&!Ab,qso5HnO06Lmit5:hmVEu%S4&56`jc!Ua`g_"jM%m'8=/f2Q82BMfS#D#&rBV-RnoW7]r;CH.1VNg1_0G@-e;HjfO$8gOQFQ1#A2``#G>*-6pOA4Ig)ac]EY94ED\1?bun$"pss..gt'%cEKbo%SE"AaFYW[L==DX!0&trM9O&u&hjS*/t?k")8@(6q4YM+C(^fCBXF0.VgW$c%f>uV9$O$rTHYIkJl:A:mnrF!@[D]?`ehq[%&kJU4.Ofo$cU"ANFFI>B&k`m\F==s<6&C\kc`,]e=;lL:f^:1(<9A!qOc!,6#Lg>iA<ZBh[cq.gm]!!RRmpLd.1qK.o,1F4pL/Q$%.TrbpS#8A'WWJGX/U'DS.J4HrVBW1+Ebd\SPOh;#O-"1pReLeQ+<RA_>FCZJ/#<PB6]eOIYUej;SFT?_OifCdBPZgin;NbI`=du[%[*$Mt%NVL;1V1oM$&UbE6r&eA+@o6=dXB%P#1gC\6SZd_QuY'\N$7KiGbNGD\Y;&S*FqQYP%guPQZRT#Nud&p3m0uO_-IM8qSqoA%mjTd+oS,3^X4oTk.a_-8fTRP;o4!%Q8=@[.XJI*EVg`BU"@/3u@do,m_=J9Y]6IpM`<UVun6f,0!4,W#prRu6/)0,OkV7DXZe/aU%f9FoR3G&VO!7,\SigE7(I\[m%_3S?c+BX93pgXFUPl`L!r_,055`3tLLN6$]mC6D$T(:DI$R-R[1Z'sU"Jm\k&g#X0ip\-S5+(Nq%.CUse,+\LA$*7AQW3BJ$<7@E=<&-2O-1%/a^ibAe\L!uL;NQ[;l7(2FfNX(hL6Pbp+HJ=/@s2T!LB()n8W&b^b\W/OE+$U-jb;,'%?')(N8'Y9cL7+p//]h/#TeDAL"soe;/Ep[RZnsQH-u'2+<EJl=lTU[TOf,1Z,6<miLQ*p?V7_5sMh!;m_nq4)XA#2Gc34<#EYWO9%IAIQBmYmQ+We*+;PZ+]c"W3'Hb:K='8CITKASaJ[R>Ngk&D9*.4h8K)i`LXP<dW/X#Z)^BJ0fe,Z6)AqNQOgU["Iq0&Z8+plA>hE%LELooKJl%?%qq"':cH(@I/MLWMS8?Wc7-(Yi#"3oCb,Y>&h/m?U8-6EF(1Dq=F,j-n@9bjMQrP:V33mTo9Zgu$BsUpVL3BPMdalo%^pE(a&q*J6j1i^AAB\K`?fi=L,E6ks&m.#dd/.@)%##Xn7H#"Y#R#EO(1oH>+U9M/)_sJ"e(6uZbV0KBP6-"Va4"6,:8r.tj>75i%4ich=i.AZ1TGVC4,hC`^Piocg!#qX]g]AD#dft][ArWI"4)61_#./!DCdhNnT0'o_-o&G=)44M\Kq1umZ/l&+Yn^*2:+eFL3OUW&%8Ab5AY8*.5?LV`=SeBY)duH$(E"^9fOcLE`(DQQK8L]TRVd1eJhqG>hab/XT[QRh#j=kB:ftuOV.//DBO_5&cp,ju@c6Su5"Not.%Sh1*,;50Er-b&jdo+TFc!Y_HE<!@=>jFB"7/IS</=q6M(=p0[EEFFu2M`MC%10._`JF8Y$(_N\4;':be$B\\Rjr/P<mpaTYV)fq1%8=hD*F\J#=M`b2L8j_XX'$h=>5^L/O,L7.%576-]NtpY9bEU-rSh86E9T&3cmEp0e..n7qa7a>s5#[!Cp1tm0E1JAY(#">:[7;LP%<(Er[4,c.A6F&SGXq6eN1emN7`j:APT-R$-7)p'0]UTpT`tfuOM+&\M/Hgp,UE!K_g-dt=a&YI5Ke:?2FXEA`b6DZ2dK3Sl`W@V"%j3r>p[UT[Yq7)BL_dRSb?=@i@9G463LOkGA>fRUlnn#NOgT=AqcEXrQ2!_K&9]QVMR3hbHNm/^V8GfeGTTLfa:pFUiJ77>l`P+4!%fCLlZ5VL7c%D?ph[V-ACFrHL?2iVcl<3n<*Fr!<.'st8`Ml0JdK^p#m/aDCbVNmBk66[]i6HY,/67Y!WDL)3)j<c4A"]W$h.X$m`%3@>iE&p/s"DDjo?I+pp6W(_)<aO)\mj<d?RXeA6YjX)J758A%oj@"0$KA)_)?VW0VK:YuGP7p=;Hs\0IW[g/'M;mU77!:]5GY^C]%OZ&6@QBDoP9,LEqM-M?qZ4j"W&Ta2-(s57F(7*';`3kaibg&u5pXbpXW%S.$Ze-CrLn%D=*?`rZT^9TnimGk+1$ON#P$g`^K%_WU%"57-X:J?IPq.R!PH=CE;<-i#D3UJL`;+1n=.A[A_P-[i5nVLo,'*D[78JF^A,$utu;@&7\oHG%H)@)dEPUO8(dKJ5aAh6e61W/IZ%]eL.NdM&/Z&C+)$QT-6_1T;3ZW6F?gA/==kWBZSk8:elrN4L.3Z!\q-&k9)*&18kQJo\H.irheX*2S<SQ(c:BO#]1#ALMjS<Wd',%1)-/&pnE@[L8(k\49@.$5oGRHI1W'o:fJK%=sPI;qVp>-#;0kT;$dXB*IF$89j*@1ML6QN6Y@jBPnX"Va\kf#B$oG0a\kM<BXfNb%;0aYnI_1Wh'NO(!b%[rEVW`pT,F+PC'E\q'OmG<PZ1uI1Os__R0t&&6(?HCL7VRaBh29Vp4dEp<aqF6b0Gg'cJ;*=U6q&+9A24_<%S!`>X!CV+GSZ,/O<6@g4M2LA>LkpIfU1,P%SBCf\M2LApV<Pu>L.`*;2^VC!KBtupX.;j^,jUP`U#e[2L8a)?Pc(J"9VY#;.7W;P%VNc'n:'LL1<L'J\P=7H,;'gg=PXfCF72aFAV\l:SX&s*&b(7c^MII8illY4L78G6rZ#?.^a;9S'6ZkX,W8[kM1$(O:6r<2\PhrP5%'Ifh0:/%7R,GN0#G<A8H2Lcf@L*rmR:HfJ"FUmn)SLl4:@Kb.uXpLJ-6u>L<"Gg.LCr=W3,9_\q0,kJH"Ol>.BS"\dQAT>]o'r7S%)h]#1CaN:MO4T2\PcdCeH<r+u5m&n#']^3-2eRUd!mr1oejE29MAC2_'F@N"H;kJB6Bt[?'7[sMJ$/@<5qiRF3M]n_X.Arf,YIa6%5X%\)i26bb#fruNVKNPEFCM)PJ=kcD/.dlb279N/.2NP95q1\(WD1<,'7ON1!#YfXR@d<a6psr`R#D\2b%!e:Y0atB:r&$P8Au>=%"qaKiU&g+'B$?;N#X8d[VT:S]O$"XCiA=.G,]"./["6"g,AJ#$"U(>-J06>1?rjj>7bE2j`>'rAlD\)];nR:(0j!D_YMp*7kXHmi%`*,*mDhM)N4\;MVMQ`f^L`C1g#kLVi"grk8Rf`52&c2TJHt3N\<"Z*qL`921n<ls.[hB0u`@=o5,nMRh,^B"oD(HkF#f"<ei(.K;%mEFht%(qCN$Wt7a*c#>cqs.Q9i.I8q/]X77S1m/^5`_1Em"h]WKFtq6N;OX\f2?$_%:\$'&!1KA&P)!/.%NGVUel)f5qOMhHWp3$%7JUg6:`Mn@DM305K"+!#J^C0Q>9NH($H--p(C$`W^@k"FNY+u6T5>.rI^/Q_!@<bk%LRRDid`%<#R^>.(`tp!k="[iq&GVfCC"rp%([u]*+HI29q,7<',T'-5+s[Ui@bM)NWWFpDi7cjb4*9?m;iHiMa-d$ekiuL,KYS3Q3'ej#fm+R8*.'r`M%(=+El_.fZNqr@$H3/M%_e\PF19.Yk]>Ph#<#]/#?9>ral`:ZjKfj\"GN+?q;7r>6b9Z\81i>P\`Ao,uD?^D8;:#RU=]8=nD`"Ct$CQ'L*^6&TL&#27T=(sn%'TO1sFA)H;g0n[P>SBr$("R3Ail`SrW)OF^\;CVc4*G3d&BgW/;b0Wp*:qMY"qg7V+J0nT7+uXn?PFn+S$>>E5[:8h7qG+NdVo*2%3T5$lg8.EXNro#U,"QOa.*t"?&o%OTYXq*@?2++K?J3b=V<!(^6V+IpB-r2Z8[Or^b^[,Y5@l/gOb2.Xif)'Ffb6Xgq[f_B5Irf5%<;G&F6rlI&\6Pd5Z#V'gA(i6oDA4IR4=T4/U>s*a@Wb+t5eMM4:up`D@jq^`#NU6uhlqVPhg\LA<.]k'$(X;V!A\siS!#G(oMgWD%[gAmh+]'`a&;t4qndHX\X&('ZmXcX*JaEN<MK_>0Q6\^4Ee-6>$'kK6:r$k^4*a/j^^q-ap(O0a%t/%*#j]^>d'8,lF>8>KlO)mf%4.q[33g.!JR;9r:-KZ"#q<Z8,>!R*"daoa_)(:u1#%m)*[M*Zo5J@ZG>fhMH;+Z`\#8lW$9'pXoVoL2t`EPY=SlHm[ocOa7Aq>i=%_9UE[ZU(jrg$JjofLu>qSP)U@URI2Z]:O#A8d3%'10G2</POB-3RZBu35QKUU-'"l`s!kKOE_hY*:_92[)>LSZZaR=RdjG?>UnM/%RgeAi"F@9]R>hTKrZ"`W--$uJAP1mS(L8K.6F'`f+Ke>>5tj/1*LM"2"?E9*?m\.A)W[tDiBut7+q_(k(4j$mC;Pj8kg^?":RVEf%QtGRPi.HR32ITVdGuD>s!:el-<)j%'PX6DqEF.*NGkKF@@]+JXEPa'6!1@2i*,U]H[ZRXG/-Po%kZ"iR+U?JDZWR``9'?g(6WHQQ%+u\I\AU2IO^Hnr,=LoNQWBhjuE$\SmiOC]9'sT,58TfE>a0(:H.oC]A6bukkS.\Di9%kFk9)tQ67/FpG;^1UL.DAQJ&^PM`WB/9.%kk!mL]rfA,JESnd$=3G(+^`+F[@em0,\4O<fa0d)bT:#^-l*(V8%b[#?lgXp&At>9:of+WC#Utsm;aY<MS0Tk/J,Y"a9?-kT[1Tg%\@eH.J'@rrTaJ/-_E;Z-:i:s:qQ=[)N%R,Ls$GENOamu?@43DLOB?'$,bdXYZ`J=ZrhJp:&j`<YOY/S/!FmS"MS1a^2Wl43`%2R.%.pGG>5E+)nF?,PkIYb7;lojKTj,%;&?]$S"S"@,;;h_6I/7ts$[O%F\7@o34U.nQ;hJK6:$H2fpQP66ehH,Y%`Ah!:6tK_qrQ"*l%@PV.DH/F;Q@nFt;'tX5s+IR/NEZCpH5+R/B/usNZbm>ZV7#F5Q^6Nb#@b%;H>8;r-:1?);'smRj78lbZCUQlI<'AK:F-Yk.Z5)bd%+I'Jk$GWf2=Il'WBj*co""&lX-*b&!+R9SA-_%(B`(X2`6FTVW[6dk(KrUP=\kQQuQmbs&[;(H-9;3o*6s7NQ%)&N)2ef;A@j350%ki.PlYK/(;(FYFC!+[(;9)FI`T5"#L[*uXJQ`H83&<8+]GRg"s9e+t6+jES>;l6Y09F&3:LoEet#c:lWeT;Cf@%8i(5H;W%62[_.%hF>sHiCkrn%Dr70_pU[e?2r7TelpbS1s@Dq*at+80\8^Sl7,$VnG&l_MYZT@C6j9Ro[Ta0$1i7!"gU'"PsEKY-YUW.(YY('"sWH)%-ETO,gK^?#C)?3jCb.Q-Ae$5&jP"9$0Mdh>"En6TA`,;bq@W1WJA,1?NbOe/RI0fJjY=d/Cm'&.Z*t`\J4dnh8eo85IL4iUr$Vf)%XeOR/r*?i_GnNT7dTstpUnV\D_'2pRYp'L"NXb@\=OW'neI"Q+%qV)Pq[#e'"g#.$#LNT!ia^=X=h8?;S:M/mcL[\YX*!jAWk&6<%[M(N*Bc!i(cWkH?07`,,_h);4Fq@bJ=J-_!5Z#`@IMIYd)fSq=h+ZM'#bj)sH8DgQ:G0?&\K1P_;#JsNn0MTkS+qHN!/g6=!l"RF%LB<;K5N:ZW\t*:Ie3=Z_G!PV'RLP39E03:fZ.]prPia,I_U521KU!s(E$Qp)VC\Mnp3n.[WJ[`JTF<n-;[VDI11d:(A+TJ=7Vf/O%Ie#16eQFGkKBg!$"^uf,P.[]Tk8Z[\i$j`nd?J.9Yi&a*mN`O^K%KI++./r37$KkF1H!DcRguq2\-jK+]'MPD`>WY-ZC*gf'pf8k%)N_1EM5nqi;CP7VR%(K_@=i9+SC+W1bosl9m>QsG><m;GW5BIo>@@Bi"0)f.EaM)k1e<hKBnnS&;D(C1Y7W`*H:!WL'7g<"$)lZR%>eDp*6\jQ5`I_7j17Ag?"QX'oge@VS7-6`Y<Dq0JVOV]oIKk(a-"j\I;6nNOW<c&_UZA++h$tg1hO;gn=+QIFAVpX>@*D21FJSh*%k"Ds-HqP)EfiV#[D(OfW($A@T^+<Y&+>'0/@2tAqnKT(jct>j0.>U/PU+.lP#a.OK$H/^>LDtBJ6l2Qi\\]t5TMiPXkMk/]['=r@%PXBif;%$Mo`/b6<aOAI<B7\KY'JS^+Ch%G$oHeSmn,4Z+>_BtC`.CQ<ZfjE5n-b$>M7V9\%YO)ROlpa_#tSR,6T?/Orta^*.a*a$%plHSl_Pg8?Y)H(:)^I`F2@s4%+>kZH:SB'PX"!1qCCmhK0\0$]EP"p:.(5S.cj!pd9_"2'Y?\IpV5FEaCjCe@B,jq;gtj>Lq93+U%HDS9k`hgb^4Ecddrah6^A_!GlQ5ha+oN;2+"mM0V-dS,5Eu'7N`)!fsN8<U\!Jl\%47J+b<W06RK`W\t/I:6M#R`H5Hk@,NNL9\-%nfjcq"WCJ?FJ5+V2QLO-H,`T_p#_TW#-h&Y40CicS[d=\BpYd0f;:L']@,3]TLG7:.p*ir:*]V^(FQO;;[OcN&,\]'BbsEO+mp_u%eiFqM86S9``/WABT,;(MBon9'm<hr<fP;8E1BLJ#SV@Co!R\fE/dVH[]k.[H<-TP91$1Fln<ui]n0#1?h^h?5[F-7S*__A0.>23n%9(!Q6)3gr-;j%]DdSrK*]W0n*Pn6O*95Q5bT3Y=$"n\%l_@jFNC(*dVod3,ISDDY)ildi4OGY?mJEXh1RF:1c9&pM'X/@k2+em#R%WSJt!!mL:I5X&uIr1O/>[0PMrah*2>,XB^DYH_8/`$'59W6!16N3r*8^FE22QPcE^TV:oI-i!]urW`O\`m6A]B`,M"G_j1!L(E7`%4U2Pga$#+fnYBB@L]CZq7`=4+",ZO-SjSA(j.:m[GiTp`M=BPgJ0IHOD]qQ^Ql^m;nDdimMX]Al",fdnr\&eOd(*8VhFdp/>]?#Q%7Z?INK8fTc*lEs+j'DhInCsO%NCqTsn-nYUo-;+s=kJiEmP=9fl)V;?,6qj.pkZaLL*,q4p)&<*I&sdg,bB1?5tJ<DhSPAAkO]OG%,g<*o:aCg8]+%4ZV8cO?d1V])K"DC`iX,>rR)B+$(n+F8R*&oB(8f%.*Wq[0VY(e+,gs'/?mRg3]nIskGA.@c@W66/92#CM"t_"C%[Y?@?[(!gsOd!J40!QnXA+1+\gfsQ:Hs7"e@W7AO9`/mK5tq&jY@1-&D(gH6r8mt9hUV;OE?*S;YlA-=#fo;4R\&r=kt[hKN<:S2%,DM`l14k$!-q7*NOoe),n@qbkF/lfum_(rm'>;?r,`nia1]:H^<ILmm'pQi6qB_M#k0t-98`Gqa-8X&p6(5.qc@MGVlq(<CmGCQE%dnRf*XWqaMSBTMC#BJ6aF9Q_@nN!8kjhoDr3b_lj"?W#]GmS\Xp^H(Pqsl#naYrfPd$(m5')#j>mi:i]TVA"cIF>3g"$`2lEX@4N%j6[N\b"hVN&1F+7-UCS__,i<=gVK4AW.X@*>UYhZnf/Lh9UBg>W*?:ag-E?'73**=F+I23(nH:KfdV.U*-JSH5Ad+N!(prST7]b(%o6grsV%n"`/p18>cNR!FX3X)/A2[bFVDO.m?rNr&cN0s5n7h*N<:r9@P^7]i5,GZ3&jW:YEtUf^=?4\2;-?0R*/mK#T*/'Jgq8tg%m094UbOl3?FYEq[W9WM,IQAs$"(5\hd5d#Jp;&bNPo0kj?rjV!ofSn49T*sgX4\SD-J3(i4ql^Do61gdAV4q'Eb/a1$?TjFjuM(Z%RX>HeAZj'"oZB)e$1O59I%5grbt@6R!%]/K-QuSq1+,@i#K(l'YY:%H"(KsBHjYaB7cuccf(!-m-614[brJ&?9jN(_K>%N63f9O7%cE]^V)0hGf/#NANZf1CYLt3PiHT"Df)s&>=bLYc(TU+IKS:YKIf:N1]l,tI5>.1BU!OfA+:-uB?5^!LAF`X>5N^mBk[nN&n!4X:;%$/mZ6l5YUQ$LK*t9+PA0\L`2K$HdLYdcZ4mk*,J+E%\au\,^VBH4&(HVth%*bM9i?=I3"@8RRnLZr>=(4aR[oV2]L.hISV&3ImHE%q%D[uf+[=4?Ikc*0X(<MI4il>c^of9fs8-kHYIb3_7cWYY5hoBT7hUFmD^$jQW]>]?se6P,k0"4VG$.)9oXTuqu:sYmQZ'orknX1%G'%pV=L_`5ce!Y\J,-#9L];+`5MrC9?etbZIk:?O2!NW,\ZR_G<LEp3gHp5u[r`$*%M9,N9Hpi8L5L,u>/uWScKdf%W<;rbG.>Mq%;i,TD:"4>+@4MACSDg'IfN^`ULBr+'3m&o@L(a5=4$tpQP463GL>qnq&g#h9-5.3R##79EenKruM4ub17"C6*?bjY=![E:"S>D0M%o&^E`d<V@6Q%F((nP.83_Gt6jept=eSt1\=Yr9GV!V)-MT3Aj(HSV9!Ai>k_X)b\iZI?+"%%8]1&4$uh-h,ndKVg`iD<$@DRsb_J%?M=*Bk,d:('J-I[@T1=f9P-*Y1lH=8dT/,+R&]&nj,+.B9oH1.WahTgXA-CMk\MObUqH+b)8F[c?Rj@Vl]Ur]JjUO8ri6BDY;!]t%Pmd>*p`?(jMh;PmWXKG*h56K6&p97rR:n/08QGte_TP@eRI,V5FX;b:>23]p[Uis8EPeH=.@RsT6Wh=iPG67F2"4Y/)QIs7Mt\:9%ASJ^h6WJ:sF_seKI=b[%%!8p-YWO7AZ[`@K68713X1r0CC]l]4n<J]jS1Y_H+`K=Q[u%rt(uYS@5Z^7]@T[jVZnX'sqkGRNLQ\AW%%Yo^pG1n[i<NiF[ebN:K;^E:?ND[3qJcR-!pMe@8g.jL/EK^JL$TBNCXY&lr,\%,k=^T%0a;+h,\u$%:`=d_Kd.MZk;A&]%&>t6&%We3<+M_ieIg($ccFXAY^?G^\>#35]WolC.=Vm"(c<P,_!BrG6Op6>\#jaAq,Lg[a&WSA'u*O7jCPA&>Q59s^U`E."0A_0nkitgN^%`l2AkHZ)@h17I3,Sm3Z]5o8?h=!rG%r[HT^B6i='S3Rl8J^V/)Z5+Ot=GRo1ZDQFE=#f;_1(J=H:pLZcnM'=8nRcV>qbVCep_j4N%0K)?SMe6V5Nr/+q"RE)TjYfk$eq\,UflVc#7Q3XtAUAOD1$5mcCa&]:P<J*U:f-M7!,lra9KXVUq,]6rI2MUR%I@EenTu40ELg=a%3k_G>DY]Ch65h%T5Yjo'#%[t[WkH'E:-)).[G"q6Fc`%'=+eE]?5!0Min\4FBN<M%*_YiNHX,"-]$b<H$U%7:ZC3GP!tl:WC2E_[%,IQb]/V;[CWG?-F3Fd_t@VR[YRdRr-jcrTq,+oBjSQo/,/CtXUB\illfiW4nBbHEQ430B^7+="d`c5_Ka=L;-&sf9Tl^+PW'q'Q]%1cmU;XT-\=Z"s3>=pMMn^Bf1n*l$iPV`/>@,\m%<DAda*Tb3E5&&!%GnI5XLcJ3>WfC[`t6OKuVk?]B^<5Uh0Kikqbd-CbAM1%R-%$<XiJSDT"beiGq6k5[i+EGcHc[EI@l=^iBnZE>&lOmT@BEo2ME$"KlnLAH??Saej-\i_ge(mt:Q+1qLr+5c<u4pSbmI@>JgLW%`[%p&#<Z.57Q1=n-?cYe'D;K5_X`32koF)+FWALr%u_-6ct#`f<NYNWUZ?YsLX!QJg*D1qeIY.*HTFeC+)[a`+du42ftZ^7A*P_^E80%AVO5^&@6ngO=D!ia6oNEf$!blQbaHV?/9a(K(`ulCjZcePoO4=H'iJ=7KqKt:VirLlJ@nJ%RZ*EP]O'pDO?&2CQ.NQ?p"DHERCp[%EZbEur?m$p`]Zoc!/F*+i/8CW`_;+\o+$lN!nP5&Ee?]B2\n]WVAif4;$GY-qS4E;;&DjUZWP+TDLZE];@;kn'Bk8jV6.?O"uK_W%ec`rh'c\mM/?*%%(!(PsS?4s+IU.1W$7!-hZ)`CiAp$!Tfr(Pj_6OBUNBt?<I9HKS)+EC\`e;>SGkEPQEK]t.:GRir=*0>n+KeP7%D+?Aors1H+ai%^"@O/&hkh9RK\>qWnrU,dPYS*b>*e&lRoJOs5,CLSla77CSb*#bm%+[8:U2BM/"h&mrokr'l7>XjigQE0:9j\nS%_U^%(O!W^t_(`??cXj28X4?h(;"u;t7.K:'R=nj1cSDhQ"8Q`LD"^3&YI:'nkF=fI4<)!GeLf"2DZDo%)eN^Y6DtC)m2H12RuQ;j%3hLN$INbe>T$6*-C@R)8^[d]MBE/:eakmX.1dpK[\Hr\,WRP>Y#9F6:BEV,J0p\$I:(<$=*p04$U-3?`6Pre>6-I0,.>[O`Ma9#/%lpk7s6JMCtG?>Pn4hN?j)S'1%21fRj4gY^q5O=.h%$;W[PAHb;7j2_Y;A`%e]A^PdQL/?#6b&Ik#2/J#V_u)RS_-YGL,!t;QT/3h%lFp"G1Q=+[AQt2'0h6-+ZZ-CNgs^(7:4kaU<)/IAD>e[;@F#-ui"23LKcC*hZgI*+ng']Zo,uQ8J]Ap2X1Mqt-#;Sf_gmBd[(k@@%g]/-B*ZJ\Ug"9`nGHJ2e34pei0(3]W-DK;Sd'Vo_fY*uF-?a)KBr.TIRRDH&;Le9,TC<^D8aW*XkcMtCdlMfMoAX;_]k7UWM=c"`%gBquFiu5^UfeU/Ii+h.j:<0P)\*IkuXeX:J*d>CNZ9ak2P<p.m^)?ea`g6!DRC@?XnPB8"?X6Nfr_El4N77Q-+3jen1$[4ha6`HL%q$cs<F?rtTQh*D/d>61"[4&rl09qFspl=0O\aX<hLkO`DbH&8U)qD6kWY0[JWEltJ3/%Ys%8782Aca]8Fr"4eY+B`D(2m(n3\8uf%SWPfKGQXm@X!bEMD,Iqj:cJIK6=f/lL`A#iRn!$,0,B)7qKTpG)kP!%:ZN1u/4kd_Rb+F`q-a&`!W*Nt3_h7<#VdDrb:P6\7`R(6%8RC<8`shF@6jZQ<hs&MEq?TT,4P5<gKrD6VEn+6LUB-QIiPA6)5^m#XJ2S'"ke!B@1m#N?]-oM;HmhBM+Yr=rk\>caa\5uA)dm9V%M`=jed^WRRX*BhlaH)P@1E8h`(W3R5l.VUNS`34+"hrh?2$r!:-Z*JR:h9Ho;+\V7-]N!/JT6F@r4+f$+>]n\2"@p8\<r(3q7mri%BJ8+_+V3Opjh592#B;/WpBhMs??(HDe&3LULc0G5q.C)Q7?I!UhK\9mU4!iI.1oT-!XKD?D7.qo+:h!n?+a0\o>9&*H\qW[Yk<F&%iM"-(0qP/RSQ(eVI7D9-7[BDDE`?s8-V+Iea1W>@kQK!i+C]cn);`K?^,adT9oMddlTUe8aj\rp73n:'6<"_V_!dbL_CCR\;B^1>%EQ"@/nR"_sK'',b7A=Iq1-2lSp9BdYYsN6WcLt6LIA<l,CV.+_]5>lfH'8elTjns"Aor.'i/hnO5['%.C-7`Jc9duei08Q0?p[AG%.MU+4?.<]gJo+:k.O["%V'Zc2>1fA/*1@btO2-toc!;&6L@!eY@.GMf(Jb*$bW0B(1(A5#BhmT1C\<mJRqG33-!ZYd4Cqc=<c.gU%30"!b"$6]a'i>jAVH&WdB\D]\pL#6TKuf`l.D)p"kh@7Kk,N[oK2S0&O[aN$p3I:>kdRoXXV3=7dOro)@]^jm4*5#b0NPF1nqBej%g[]RpJ8u8j$3cV1ciM@Uj^PHQ7Sueo<re_pc35!VYZ=$"iLD[_Eb=S'_9T`gE<FVq.ib:+O*9)1o`Z`*VK8$Hn_<2]D(d-M"+t8u%oCoYYRA$k]/[bAS0l*ajUk#qt&D:sAm4u]>-o17:()gBm7@RA(@86tjY^*p@L^SSm\iE2.[O0NHY#ghtMtKk,Cg_@.]<0rAA[a%8%gk)JM"4K^*6"]mYdU$K.6B=kQ7-%bhk'tf!Z*qc]U'[V(j)#W;c;rbNKPe9SO''1!dqPV)=LNM@[YW4<%$7ZFm-oVFpt97nPS=uG%4l.?^1b(sg3pi3o&AGu\N>I*Hl@AOE^-UQ]V7GW'PoDoFn4qBS2(-ie7ObP>:egHrX8]qk!fr+C=JdQ*Ha7EhdY%6cnbbUZ%:EZ7%K\M)Q-p^ZjiO79ok%ml=4=ZU7Y^n!Hhe!H)3okacR]qT)P:qi`M+DGH*NPRpBP/;?Wtl(9R2q%"ObY?n#q@s.pHuE,i+TPr9"PDo%N+4]^C?7X(^E*[(i8$p;Kk+*q5*mLLM\ALg\/:*W!#[l/@D,In*Wph>Ed@kqPj*^pn7`Y5hXNl[^T&!G5jmK1fi;JFi2&:SUX52`%=12Gpa7Wrqr.(C2BZY^lNSjCcX78)YGq\L&=5.Zu05k@&9:gr(qCmi_2]T\K<.N*GQ:p3!eTQ8?&-,Mj>Zf#TOPi%%\jp4C)@22$%UG-6US[f+2nj"'57&Ej/R6,]CbM3[L+.XCkdCAUHN\5DqATW(cA]FRdi=gof5<`>3'R9IBh>A7`RSl5N@;g2BSaa+4C_HF?+(Q:e%l"*&Gj.k(rO2gk7)-uH)GeI*h6MdFgMkMBQOY`MbCBu)`?'cJ'n)E1B15W"c/M=o6naMOMrQZBBf!WU)hXe!IO$^#4q/*S*kHFU8%0t5GOdG+u]CNEk[Sm7E*OUa>(i33^im.Q3s`Y,jk`8V\0'`5>JYTSVdSG,8i9+EP3q]m4nKLdNO.2WAb0r]ND&gBQ*/[>\FXd9V#%L!\"9q:ItYGLGNN8!+>Z&.Vsk,dY#[oEC<A:G!H8rMdaWfUr$%Jc2SJ,HsClP6VDkdIbNZ2!Q<k5L#3Wp89A3]f]$^:^#7A(lD^)%4T46D`*<mJ95uA3C!!q1Qkjk#8PLC1"@j=E_>H&e"Ofkr,+';3MI>_$n+s#a6P6E@/)%nB*M-jd@WF/%0ds$SK=%1]@@mBE$<K!S%b;4b;#*_;R=2eS'6tm630!7ZfruGSO&6U#*LSi</]-*SRaiLlf=.tc<nAX`O-DuS!,[Tp%f#%j=pu(A4M%51!_S[M,QMeWPIJPcT%`P^t5gLS^E,OKE8F62p_n\Res'W0@]cjJrP=2l#:,QY1J":n%d#[)&E#:*qZ%nP!_lpU9?gQTkAB0^J`<V'r0Q-k>gk#%.h,Xf7u%Jh/%$Y&7IOPMQA('IjGL!g6q6-L:4.8:gnl;dIJYr;cK5@2?9F`Rl]Co\W)MU\93`\;DjH3!,6S;A2d9-MAVVJ0`3hK<fts5SCr9%+8+E!UaC6k"">M<Xr_qsJ0`h#9<l:7C'qsiSuKaT6,gNji.no'OedN2dA'8=8<U8_"U[C8GnaCHEY_hDOs5g[=[\DpYZ^?*8N'"9%it4ki[k8_T'1k'KkRCqa&P3V3B9+2clO3(O(8A6njMXeX,*HK7hlDG[)3NufY(fE=ThT]R\PFFo8N(7_][_LefKo5gnb`MU[)MZ`%8.rcO/nIil,'.6W/.'^=YIC/M6qcts'8U,T]H3:_+1`?;4X^U[bNFhW,X`EVZ)Aon;,6;18j[4M(lq9u3H*#j*h0#Qobm-o8SeoY%$9]jF&PITFGU)rdE4ChrbXT,5q=(HCd4(,K658drMM(GG"K*h&\]1I!L$8DFn]ImW/.'kba.J&3+gOuK*gVI-#Rif3P$n3j]<<*,%-!-BP.X!PASGIlZfU+%SKdHPKe^,-+G:R1QUQXhka$D:..4Y#f&X:3Vg=\W@P*dV<cTEVt7AVG1:m0#8Q_Lj[,km\'ab,c/YgM_M%>#5j+]cV50P[%AND6XcY"skG`AlqlM((HfrKH?B==3G'55\*CZci&UH6BY7`7S&\h@'uJ37O4tJc/j,l4'G4=K@q<6/WpUYCGV(M%k*=X5'4h[%#YAKW9`]K0&u%hLhh.(OX+m$Z5tN,>(,rRm,X`^.Z(NAgC7VIO.(QKt6;fWn8>cZpkiJ1KI4Zf]d$hh7l\Zph=B(5f%ad(D,(),)A3/ZM$RtMQCUe($*%nlHq<pI,K,p=fcH6$Rs5;^ZC<*NH;,!2,\>S9@F3f?WtjE#!c8ViaP3sR*HQ:)7AWA#@:P2\2j%R*$E+/`e/'bZL"Pri=9s?p$3$3AnQt6mcW4kYUuo,aO)5!;+V`XVBU0p!Dd2em<RR6Bec]AG1,k)9XtB7q<Jp61R"2rGM#-GRI6K%9M7qM2@E5WYF?bOTh/sJ`K_u2M4N`6L)ueR/0#0plEmjjUp34TVZ`K#MbHI)/2V7<8KO9Lqr=Bl8MibtZd;%&Hs<0ePPo#4ECmTT%PE+AP*5hSCF4B65kk\+o(70\nfle%W7E4Olm55DJ@UcDEjp4XY[EIO9aJ9T(luS(YhQZ%tG`DL!1d>RI/X@XVHZA(#*!HHSbU'LR%TYMm4)h9ikr+LK^*/\=*!8FL#bp=jL!2YlJO%(:UN[ViSTSU_h'UA>pPUdj3j<6?gEI/!L5B),UPTRih704&AWISHHW*o;>!LA;^%$Q.I\`:@Jf%E."#Qked+;p#1MLkppCX=@QGd$06!&;?!8<$lE?J'?p/ePsTsYYaZ%U[EV78:rAmX^hF#V;s='1i.Cmb'M&%4O>"-%]Y@o].`mbPXXbuP!6Y?YlF^/jiCOW)r?Lb_&h>nMAM?rsCDZhq4<o*qNI69!A6ZpRoI-daUAO11,m&p#m[-SqX&\qnpaF<'!%3Iu%aH(k+mf<VM+r9QRAX8+EFpR6Ybh.1h@MM1oU&<R'SZ\J;akXGos712rlO$'0Yu#_F"8._uW48VX*MG)N_?\Y/DIZ1.O<>Z]%0@kr%6,GJJp/n^Z90dsi=$Tn$^_q[PDFW5@WtcaX:37T;qlQ.)Z/r/#n6"DCTe%9?dK&EM>qo+o7s%m5V<\`/E5BeB*,i@B?2t5Nb%HlD%!n;%m4ARB)S1l8jHPHo,(MGL#6:@m^q?WdNN=smI!3H9s%'Z<M05"lm<CNSMgb*\9e85-PDJr/L3BPJ_,>947laaD874d@0FTK:*%>eJ;SPDo%<]mU@rG><?Kot=X=X%L$R(En/,24J2$$43ZR:4Lk,9qRr/3'B0b+'!jqm/=_'F]XIbnICu5?bH=3ko[WhoBH,_mpCSB%bPg>'I+K0A^&N3SfupS9ErY:>],s67nbkE@5CWA'LU[$H5()tq(\`F6IeEI&hZIZ6c$./,rOZsQDYV!*roFZ7cG.b-c+OarJ)C6K%4U^^jWDD+,CgPFI8qR8B4D4HPW-9IciF2so$1,SEr>U3Ai\EKk1$/o7Y,G[9E9YE93d.t:>m2FTB'7_Z?HojK]j)6&/*H%%Hh$B9%-!i7U>>&-Ko)H1QK'`=MYA0]aT3*`)3H)".pfVF$pj%f9NMo@RF8t8iqOIrADG#IKHip)d&LcQW/\*)0;]MkEZ&AU5QoIL6nN0o.%>R<[Z59TC8>-1H&CHhk&(TS72TI#^.4&V4"8--#S.bP?R[F!H\j#rK-15[j)(8\Es[#po%:msrLL`o_ts+,I<^/4Rd]N>JsBOuT5%KVYLr++6jn?*_re**%;=0N-J.YrG)IDQ=0\SiX5:?i`)](0'h$!J6*QRNQkKZk7n`5&5m\K$P>ZGkSKndN1SjN*nrD2+O*=3,+Je%G]hF[H1C0q;:6LJBpQ-7Shj'on=2:/g755E*<Po[R]aG%@##L8-dA';pK,N%nY`e^ZZP6br#?(;kBMcQl>?G0\prr3Y-MF*^L.#o%o_G3O$N>@Pp'RGeNRc.]oXc5/m<Lu"SbBbrWqu^pqYoBQ^(Ys`-M)`\b[.qCjdStN_)&b\m&SV7fke&\dmJKPlM]%HH@PYSf:TeS%cgTb@oCh5CDu]V2VtO>/g96#)1\bp10FTGDl2G(_L-fY@D5.+O'+84\a?dub2(JaE1V<AS_sXeYV&I5nOqR+R0*DlD?m4qG_KMkJ%NLIEh/:ACO>:5MPM`kIKY_4tC\$ELG0euHHr.u7B_,X=3OKdGNO,Jat[=Q0[h[p_s`J\ppdkbB5:p2(PUZ,";eO%2qL9+W;]+96'%IN"SWdH[]#!9(8e;6'sLO=R.]4qbFIdB%]'MU8Q4"]8B^!TXS_QRE8"0A[e4Wf=7Wp_qTG'3QB,`ahrmLUu^I+^gN55jMs7rt.f3%#?.I$V>j'FjN3qs=UN5jg/gXR[-(Q1%qEHpWK7[&!/P*glGNPV#)p3-QW1!oLguG4p-Z6FU5oEW7MIt7W%8Qh)&51M(Fs*Tc7giE%.2ThH$mJI-5R<ZC_KM=hZYF1-PbN%%dpm,,)c*D#Y#Zu@'\r]:*W::"l_F.UC)ptceKe]m1tM<f#]S4o38H6l#@NgSFp[TlQ4:AL%rt,_&9q2CFRJ+PEl?^b@r'U2k4+"Yh=>1l'ZnpQ/HG'c!8cp`niQMLs&Q#qrgTqo&KLF;NXX32LniWa:fGAjb,mV?oZ<Z.(NCV_0%b[&7Wj\1AoTbfNJMr:ZT-"Io$)PW*d%&4sB%1S=DRj]XJLq5B'g/_Jn#LYr@IO_Ys"j_Ht9AZs5$ii190AEIaWg:jO:MZ3j7#R$"%Vff6Tn6WhW'amJ9EE%Zt!9PZehM)7g!%@nQP3W_;j;$Do$6s@<bf/tXX"Zk=;V$Y]>='*$?mfA>'NXKd&IV\A%p6h&PDSSn$T1+a%.T?XAR0V8bU8_\.nV(+S'V_gElZr/$!)-&%Nl;WsH*H%_iZi1_0I)t3ADA0"2um`d"'hjJ_hJ"U;>-_%7OWCF[0[^jFtf5+m"^AH%3>!r63g_)MZEVDbg?hSh_%M=Pc!3DK:eJM_'4XQhV67DaHK;pnL!tdfkKGe+HB+I64TPa%CN1_8!*4#9-6T?k/@:(i$T4a9$81j?%R$LF5?2/^_A,>7uL%I&aTlOS:Cd)(8gU.tu`WPPO0]`<1OGDCF+_*+V@@R3J/!b3cF!Bn,,<n!8K]+*piLMS8(?F`cgh%;(ph3[U%!jBe/VZ<m&8.A,^P*"i4dM1?j'^i$1qm(7S"([#U3/H93;^Cq%#&]4n'8?g`TKou!=#4f9?k9;9,aq:'`(,9^/bCOiKqp4Qe<iUR%4j!"U8=&U72[Mhk@,YnA2H?,G,\[kn^i37WGXP<*eXXE%iha3X`"onaRRobb3a.ZI%2DFXJ;M;5l`.9;.VT![*3k!t/V,F&KVrho%Q!TT<=Y!:n`@DQg7S=bu^k%2*=4[ld5)r3&qI'9Q'hbaG%?-ldYPMk-fH,YY_D/0nV1-;UjR?"qX=H4M$>F+oRV>l,E@.MVLGu8^%UO%aeZjUPkFA)n"+Z((i+s:T4pMM;^T3H<JY*?/L41'l\47i`m"$ju-L/Chf8M10*lEW'8`:bfW$/'G"7[/$Gfd\$u@#=NI-J@^R%[19u/f^o_[<GF&Z"c.5Maak`c\42!iXf-<Xa=$oHKLH*1-KRm8]_8aji]YDLn.'DN?*$!iO.&\f%;gEoI2LoCG>tkS;A)CX>Z%.&%X#tr_JAb8d5qJACEXfAo:kg:!g^M`Yd:Q8.>)d+s?jaR+)\ueRR3ul-F;`(+r9!<NcN>/G%.o^VZl#oYaoEdk92e,IF;[2?nt4=a%bHT7T[$&HIC5]Ve5dNqt>4LAP1)S%:ftRUQpRk[YrjqbG;DAiLdNLL\_BgGu*3,C5hE:=:HUDB1SA?W@X&<:_]*n^,'Qo7@i@ujO%g/D]-<XiBLBos=eZf,NSG0q^<$8`7u+D(]h)0`uK5t#KU8OfMCPT?HNa$o4%#9F3;WdMN\K<YeZn]5f9d;uN)!fHnC`8r8n-(.;,%Za@_T3hDa^`$5C#GEXoA%`;#L&Ual;!3?O11dk-U'dA;SS\epF<Rf*q>\FldHrA0Xo2W=]5Y@.CS2<d9,XdB>!6C<9r*hO9"'*;^%/^"d0/.?Z!?ni=Q.Ad.-d-+l4XthF[0su/+I]73ZJTHsADJ[fG4@'@=PZVst+)&Epm),qDProTONPtmtAtsd]WY.0fg.;(Y1b>+5%pje6W'k?eAAMM=T]T$+sU.!KYZPMIR[n#cDQZ%#uB[Rr7EThpF;II:k5H%cLBLp\mUleFH,bSI*EJUR76lm[eIgbulNLggtc$J76%d3W#b6Z=q+QmL<kiq=.!)-uTJ=97IMPguM5K*aqS-#bE]GB_hs%)0PC#M6uE>r3nlLR#ZF_K*hOqb_st%5>DFKs%ZrA+IL]qA%k@%r^(%V%2k<;Lelep6:Qg:a2!rO_ZO.8TUuMi,FJu9Ngb=43meA(0Om%Eq:^#aB?=3D$fZMa9EhYs!QBr8MDL%hMS9YtDHVKQS!EmS%=]H-0_M9Q+K6W_.GU^fN<VoK**Yq+8nk$KOmO?Q0`?Z&p+RD6<;F!PjR)Pi"1Jf*`(Ng:*/tkX&rLsKuW\H_><L]Qp^tN55cXe%3%i!HS7q9;^k_LM9`YZP)2^UX='\">j5s8LdMcbB>JjdS2YI.s*@T3gQe;rgA-#eR*gP<(*nEi>-r?$&TK.b?lc8g;\?a9Vk%S/[A!%W'/T!E'UID'"kaW!4;b5bQ`SKo"&jQ"rgk_NW*q"(6`Qq73cCiD\R9q__J6B&"<[b=We_D/rnYRjMB5A\^="H'H$@>%eiSDZ_Ndd%dNAB^3WW)r6E@U?ls,XoK%^rrCV@T_5SL/[Ti6Q6%E1d6R4(MV":SsP7(c]K"On:AJk65mgJ(a.8b_mS!^qb;EEn))#a2dQY6Yt7%e4?VIL(9=(HnKBeJ6WEscgF>+oU(IF=*+9q/tjeKgJCdD?f&J@q,Mn:bP0mV^&H40Nt2bF04+SQos\l>jl>[qs7#aBh7#V_rmTX!%fC.VWc#8)Fs6'C9O)KOGo\nibq]ETMn7P;G,Q@9N07N`Cs*4:qns4=o~>%AI9_PrivateDataEnd